
Sensores_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08008788  08008788  00009788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bb4  08008bb4  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bbc  08008bbc  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00009bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00009bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008bc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001dc  08008da0  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000474  08008da0  0000a474  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baab  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1e  00000000  00000000  00015cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000179d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000816  00000000  00000000  00018448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ffd  00000000  00000000  00018c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0f5  00000000  00000000  0002fc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aa23  00000000  00000000  0003dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8773  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c08  00000000  00000000  000c87b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000cc3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800876c 	.word	0x0800876c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800876c 	.word	0x0800876c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <MPU6050_init>:
int16_t Accel_X_RAW, Accel_Y_RAW, Accel_Z_RAW;
int16_t Gyro_X_RAW, Gyro_Y_RAW, Gyro_Z_RAW;
//float Ax, Ay, Az, Gx, Gy, Gz;
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly
void MPU6050_init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af04      	add	r7, sp, #16
	uint8_t check,data;
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1 , 1000);
 8000f8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	1dfb      	adds	r3, r7, #7
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	2275      	movs	r2, #117	@ 0x75
 8000f9c:	21d0      	movs	r1, #208	@ 0xd0
 8000f9e:	4823      	ldr	r0, [pc, #140]	@ (800102c <MPU6050_init+0xa8>)
 8000fa0:	f002 fe86 	bl	8003cb0 <HAL_I2C_Mem_Read>
	if (check == 104)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b68      	cmp	r3, #104	@ 0x68
 8000fa8:	d13b      	bne.n	8001022 <MPU6050_init+0x9e>
	{
		//Power management register write all 0's to wake up sensor
		data = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	226b      	movs	r2, #107	@ 0x6b
 8000fc0:	21d0      	movs	r1, #208	@ 0xd0
 8000fc2:	481a      	ldr	r0, [pc, #104]	@ (800102c <MPU6050_init+0xa8>)
 8000fc4:	f002 fd7a 	bl	8003abc <HAL_I2C_Mem_Write>
		//Set data rate of 1KHz by writing SMPRT_DIV register
		data = 0x07;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8000fcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	1dbb      	adds	r3, r7, #6
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2219      	movs	r2, #25
 8000fde:	21d0      	movs	r1, #208	@ 0xd0
 8000fe0:	4812      	ldr	r0, [pc, #72]	@ (800102c <MPU6050_init+0xa8>)
 8000fe2:	f002 fd6b 	bl	8003abc <HAL_I2C_Mem_Write>
		//Writing both register with 0 to set full scale range
		data = 0x00;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8000fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	1dbb      	adds	r3, r7, #6
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	221c      	movs	r2, #28
 8000ffc:	21d0      	movs	r1, #208	@ 0xd0
 8000ffe:	480b      	ldr	r0, [pc, #44]	@ (800102c <MPU6050_init+0xa8>)
 8001000:	f002 fd5c 	bl	8003abc <HAL_I2C_Mem_Write>
		
		data = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8001008:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	2301      	movs	r3, #1
 8001018:	221b      	movs	r2, #27
 800101a:	21d0      	movs	r1, #208	@ 0xd0
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <MPU6050_init+0xa8>)
 800101e:	f002 fd4d 	bl	8003abc <HAL_I2C_Mem_Write>
	}

}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000210 	.word	0x20000210

08001030 <MPU6050_Read_Accel>:

//Function with multiple return using pointer

void MPU6050_Read_Accel (float* Ax, float* Ay, float* Az)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af04      	add	r7, sp, #16
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
	uint8_t Rec_Data[6];

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800103c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2306      	movs	r3, #6
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	223b      	movs	r2, #59	@ 0x3b
 8001050:	21d0      	movs	r1, #208	@ 0xd0
 8001052:	4836      	ldr	r0, [pc, #216]	@ (800112c <MPU6050_Read_Accel+0xfc>)
 8001054:	f002 fe2c 	bl	8003cb0 <HAL_I2C_Mem_Read>
	//Adding 2 BYTES into 16 bit integer 
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	b21b      	sxth	r3, r3
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	b21a      	sxth	r2, r3
 8001060:	7c7b      	ldrb	r3, [r7, #17]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21a      	sxth	r2, r3
 8001068:	4b31      	ldr	r3, [pc, #196]	@ (8001130 <MPU6050_Read_Accel+0x100>)
 800106a:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800106c:	7cbb      	ldrb	r3, [r7, #18]
 800106e:	b21b      	sxth	r3, r3
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	7cfb      	ldrb	r3, [r7, #19]
 8001076:	b21b      	sxth	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b21a      	sxth	r2, r3
 800107c:	4b2d      	ldr	r3, [pc, #180]	@ (8001134 <MPU6050_Read_Accel+0x104>)
 800107e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8001080:	7d3b      	ldrb	r3, [r7, #20]
 8001082:	b21b      	sxth	r3, r3
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b21a      	sxth	r2, r3
 8001088:	7d7b      	ldrb	r3, [r7, #21]
 800108a:	b21b      	sxth	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b21a      	sxth	r2, r3
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <MPU6050_Read_Accel+0x108>)
 8001092:	801a      	strh	r2, [r3, #0]
	
	*Ax = Accel_X_RAW*100/16384.0;
 8001094:	4b26      	ldr	r3, [pc, #152]	@ (8001130 <MPU6050_Read_Accel+0x100>)
 8001096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109a:	461a      	mov	r2, r3
 800109c:	2364      	movs	r3, #100	@ 0x64
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa46 	bl	8000534 <__aeabi_i2d>
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MPU6050_Read_Accel+0x10c>)
 80010ae:	f7ff fbd5 	bl	800085c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd7d 	bl	8000bb8 <__aeabi_d2f>
 80010be:	4602      	mov	r2, r0
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	601a      	str	r2, [r3, #0]
	*Ay = Accel_Y_RAW*100/16384.0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MPU6050_Read_Accel+0x104>)
 80010c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2364      	movs	r3, #100	@ 0x64
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff fa2e 	bl	8000534 <__aeabi_i2d>
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MPU6050_Read_Accel+0x10c>)
 80010de:	f7ff fbbd 	bl	800085c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f7ff fd65 	bl	8000bb8 <__aeabi_d2f>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	601a      	str	r2, [r3, #0]
	*Az = Accel_Z_RAW*100/16384.0;
 80010f4:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MPU6050_Read_Accel+0x108>)
 80010f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fa:	461a      	mov	r2, r3
 80010fc:	2364      	movs	r3, #100	@ 0x64
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fa16 	bl	8000534 <__aeabi_i2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <MPU6050_Read_Accel+0x10c>)
 800110e:	f7ff fba5 	bl	800085c <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f7ff fd4d 	bl	8000bb8 <__aeabi_d2f>
 800111e:	4602      	mov	r2, r0
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	bf00      	nop
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000210 	.word	0x20000210
 8001130:	200001f8 	.word	0x200001f8
 8001134:	200001fa 	.word	0x200001fa
 8001138:	200001fc 	.word	0x200001fc
 800113c:	40d00000 	.word	0x40d00000

08001140 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(float* Gx, float* Gy, float* Gz)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af04      	add	r7, sp, #16
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[6];
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800114c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001150:	9302      	str	r3, [sp, #8]
 8001152:	2306      	movs	r3, #6
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2301      	movs	r3, #1
 800115e:	2243      	movs	r2, #67	@ 0x43
 8001160:	21d0      	movs	r1, #208	@ 0xd0
 8001162:	4833      	ldr	r0, [pc, #204]	@ (8001230 <MPU6050_Read_Gyro+0xf0>)
 8001164:	f002 fda4 	bl	8003cb0 <HAL_I2C_Mem_Read>

    // Correctly assign raw data values for each axis
    Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001168:	7c3b      	ldrb	r3, [r7, #16]
 800116a:	b21b      	sxth	r3, r3
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7c7b      	ldrb	r3, [r7, #17]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b2e      	ldr	r3, [pc, #184]	@ (8001234 <MPU6050_Read_Gyro+0xf4>)
 800117a:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800117c:	7cbb      	ldrb	r3, [r7, #18]
 800117e:	b21b      	sxth	r3, r3
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7cfb      	ldrb	r3, [r7, #19]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <MPU6050_Read_Gyro+0xf8>)
 800118e:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001190:	7d3b      	ldrb	r3, [r7, #20]
 8001192:	b21b      	sxth	r3, r3
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	b21a      	sxth	r2, r3
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	b21b      	sxth	r3, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b26      	ldr	r3, [pc, #152]	@ (800123c <MPU6050_Read_Gyro+0xfc>)
 80011a2:	801a      	strh	r2, [r3, #0]

    *Gx = Gyro_X_RAW / 131.0;
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MPU6050_Read_Gyro+0xf4>)
 80011a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9c2 	bl	8000534 <__aeabi_i2d>
 80011b0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001228 <MPU6050_Read_Gyro+0xe8>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fb51 	bl	800085c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fcf9 	bl	8000bb8 <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	601a      	str	r2, [r3, #0]
    *Gy = Gyro_Y_RAW / 131.0;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MPU6050_Read_Gyro+0xf8>)
 80011ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9ae 	bl	8000534 <__aeabi_i2d>
 80011d8:	a313      	add	r3, pc, #76	@ (adr r3, 8001228 <MPU6050_Read_Gyro+0xe8>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb3d 	bl	800085c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f7ff fce5 	bl	8000bb8 <__aeabi_d2f>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	601a      	str	r2, [r3, #0]
    *Gz = Gyro_Z_RAW / 131.0;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MPU6050_Read_Gyro+0xfc>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f99a 	bl	8000534 <__aeabi_i2d>
 8001200:	a309      	add	r3, pc, #36	@ (adr r3, 8001228 <MPU6050_Read_Gyro+0xe8>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fb29 	bl	800085c <__aeabi_ddiv>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fcd1 	bl	8000bb8 <__aeabi_d2f>
 8001216:	4602      	mov	r2, r0
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	f3af 8000 	nop.w
 8001228:	00000000 	.word	0x00000000
 800122c:	40606000 	.word	0x40606000
 8001230:	20000210 	.word	0x20000210
 8001234:	200001fe 	.word	0x200001fe
 8001238:	20000200 	.word	0x20000200
 800123c:	20000202 	.word	0x20000202

08001240 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b0ae      	sub	sp, #184	@ 0xb8
 8001244:	af00      	add	r7, sp, #0
 8001246:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800124a:	edc7 0a08 	vstr	s1, [r7, #32]
 800124e:	ed87 1a07 	vstr	s2, [r7, #28]
 8001252:	edc7 1a06 	vstr	s3, [r7, #24]
 8001256:	ed87 2a05 	vstr	s4, [r7, #20]
 800125a:	edc7 2a04 	vstr	s5, [r7, #16]
 800125e:	ed87 3a03 	vstr	s6, [r7, #12]
 8001262:	edc7 3a02 	vstr	s7, [r7, #8]
 8001266:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800126a:	edd7 7a03 	vldr	s15, [r7, #12]
 800126e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d11d      	bne.n	80012b4 <MadgwickAHRSupdate+0x74>
 8001278:	edd7 7a02 	vldr	s15, [r7, #8]
 800127c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d116      	bne.n	80012b4 <MadgwickAHRSupdate+0x74>
 8001286:	edd7 7a01 	vldr	s15, [r7, #4]
 800128a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	d10f      	bne.n	80012b4 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8001294:	edd7 2a04 	vldr	s5, [r7, #16]
 8001298:	ed97 2a05 	vldr	s4, [r7, #20]
 800129c:	edd7 1a06 	vldr	s3, [r7, #24]
 80012a0:	ed97 1a07 	vldr	s2, [r7, #28]
 80012a4:	edd7 0a08 	vldr	s1, [r7, #32]
 80012a8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80012ac:	f000 fede 	bl	800206c <MadgwickAHRSupdateIMU>
		return;
 80012b0:	f000 becc 	b.w	800204c <MadgwickAHRSupdate+0xe0c>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80012b4:	4be4      	ldr	r3, [pc, #912]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	eeb1 7a67 	vneg.f32	s14, s15
 80012be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	4be1      	ldr	r3, [pc, #900]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 80012c8:	edd3 6a00 	vldr	s13, [r3]
 80012cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d8:	4bdd      	ldr	r3, [pc, #884]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 80012da:	edd3 6a00 	vldr	s13, [r3]
 80012de:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80012f6:	4bd7      	ldr	r3, [pc, #860]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 80012f8:	ed93 7a00 	vldr	s14, [r3]
 80012fc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001300:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001304:	4bd1      	ldr	r3, [pc, #836]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 8001306:	edd3 6a00 	vldr	s13, [r3]
 800130a:	edd7 7a07 	vldr	s15, [r7, #28]
 800130e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001316:	4bce      	ldr	r3, [pc, #824]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001318:	edd3 6a00 	vldr	s13, [r3]
 800131c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001320:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001324:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001328:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800132c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001330:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001334:	4bc7      	ldr	r3, [pc, #796]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001336:	ed93 7a00 	vldr	s14, [r3]
 800133a:	edd7 7a08 	vldr	s15, [r7, #32]
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	4bc1      	ldr	r3, [pc, #772]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 8001344:	edd3 6a00 	vldr	s13, [r3]
 8001348:	edd7 7a07 	vldr	s15, [r7, #28]
 800134c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001350:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001354:	4bbe      	ldr	r3, [pc, #760]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800135e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001372:	4bb8      	ldr	r3, [pc, #736]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001374:	ed93 7a00 	vldr	s14, [r3]
 8001378:	edd7 7a07 	vldr	s15, [r7, #28]
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	4bb1      	ldr	r3, [pc, #708]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 8001382:	edd3 6a00 	vldr	s13, [r3]
 8001386:	edd7 7a08 	vldr	s15, [r7, #32]
 800138a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800138e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001392:	4bae      	ldr	r3, [pc, #696]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 8001394:	edd3 6a00 	vldr	s13, [r3]
 8001398:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80013b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	d10e      	bne.n	80013dc <MadgwickAHRSupdate+0x19c>
 80013be:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d107      	bne.n	80013dc <MadgwickAHRSupdate+0x19c>
 80013cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80013d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	f000 85ac 	beq.w	8001f34 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80013dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80013e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80013f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	f001 f958 	bl	80026b4 <invSqrt>
 8001404:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		ax *= recipNorm;
 8001408:	ed97 7a06 	vldr	s14, [r7, #24]
 800140c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001414:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8001418:	ed97 7a05 	vldr	s14, [r7, #20]
 800141c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001424:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8001428:	ed97 7a04 	vldr	s14, [r7, #16]
 800142c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 8001438:	edd7 7a03 	vldr	s15, [r7, #12]
 800143c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001440:	edd7 7a02 	vldr	s15, [r7, #8]
 8001444:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800144c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001450:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	eeb0 0a67 	vmov.f32	s0, s15
 800145c:	f001 f92a 	bl	80026b4 <invSqrt>
 8001460:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		mx *= recipNorm;
 8001464:	ed97 7a03 	vldr	s14, [r7, #12]
 8001468:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 8001474:	ed97 7a02 	vldr	s14, [r7, #8]
 8001478:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 8001484:	ed97 7a01 	vldr	s14, [r7, #4]
 8001488:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001494:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149e:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		_2q0my = 2.0f * q0 * my;
 80014aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80014b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014bc:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		_2q0mz = 2.0f * q0 * mz;
 80014c0:	4b64      	ldr	r3, [pc, #400]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d2:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		_2q1mx = 2.0f * q1 * mx;
 80014d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80014e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		_2q0 = 2.0f * q0;
 80014ec:	4b59      	ldr	r3, [pc, #356]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 80014ee:	edd3 7a00 	vldr	s15, [r3]
 80014f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014f6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		_2q1 = 2.0f * q1;
 80014fa:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001504:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		_2q2 = 2.0f * q2;
 8001508:	4b50      	ldr	r3, [pc, #320]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001512:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		_2q3 = 2.0f * q3;
 8001516:	4b4e      	ldr	r3, [pc, #312]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001520:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8001524:	4b4b      	ldr	r3, [pc, #300]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001538:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		_2q2q3 = 2.0f * q2 * q3;
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001546:	4b42      	ldr	r3, [pc, #264]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001550:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		q0q0 = q0 * q0;
 8001554:	4b3f      	ldr	r3, [pc, #252]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001556:	ed93 7a00 	vldr	s14, [r3]
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001564:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		q0q1 = q0 * q1;
 8001568:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 800156a:	ed93 7a00 	vldr	s14, [r3]
 800156e:	4b36      	ldr	r3, [pc, #216]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001578:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		q0q2 = q0 * q2;
 800157c:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 800157e:	ed93 7a00 	vldr	s14, [r3]
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		q0q3 = q0 * q3;
 8001590:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <MadgwickAHRSupdate+0x414>)
 8001592:	ed93 7a00 	vldr	s14, [r3]
 8001596:	4b2e      	ldr	r3, [pc, #184]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015a0:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		q1q1 = q1 * q1;
 80015a4:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80015a6:	ed93 7a00 	vldr	s14, [r3]
 80015aa:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		q1q2 = q1 * q2;
 80015b8:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	4b23      	ldr	r3, [pc, #140]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		q1q3 = q1 * q3;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MadgwickAHRSupdate+0x408>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		q2q2 = q2 * q2;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		q2q3 = q2 * q3;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001604:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		q3q3 = q3 * q3;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001618:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800161c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001620:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MadgwickAHRSupdate+0x410>)
 800162a:	edd3 6a00 	vldr	s13, [r3]
 800162e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee37 7a67 	vsub.f32	s14, s14, s15
 800163a:	4b04      	ldr	r3, [pc, #16]	@ (800164c <MadgwickAHRSupdate+0x40c>)
 800163c:	edd3 6a00 	vldr	s13, [r3]
 8001640:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8001644:	e008      	b.n	8001658 <MadgwickAHRSupdate+0x418>
 8001646:	bf00      	nop
 8001648:	20000204 	.word	0x20000204
 800164c:	20000208 	.word	0x20000208
 8001650:	2000020c 	.word	0x2000020c
 8001654:	20000004 	.word	0x20000004
 8001658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001660:	edd7 6a03 	vldr	s13, [r7, #12]
 8001664:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001670:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8001674:	edd7 7a02 	vldr	s15, [r7, #8]
 8001678:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800167c:	4bf5      	ldr	r3, [pc, #980]	@ (8001a54 <MadgwickAHRSupdate+0x814>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001686:	ee37 7a27 	vadd.f32	s14, s14, s15
 800168a:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001696:	4bf0      	ldr	r3, [pc, #960]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80016a8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80016ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b4:	edd7 6a03 	vldr	s13, [r7, #12]
 80016b8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80016c8:	4be3      	ldr	r3, [pc, #908]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 80016ca:	ed93 7a00 	vldr	s14, [r3]
 80016ce:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80016d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d6:	edd7 6a02 	vldr	s13, [r7, #8]
 80016da:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80016de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016e6:	4bdd      	ldr	r3, [pc, #884]	@ (8001a5c <MadgwickAHRSupdate+0x81c>)
 80016e8:	edd3 6a00 	vldr	s13, [r3]
 80016ec:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80016f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f8:	4bd6      	ldr	r3, [pc, #856]	@ (8001a54 <MadgwickAHRSupdate+0x814>)
 80016fa:	edd3 6a00 	vldr	s13, [r3]
 80016fe:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8001702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800170a:	edd7 6a02 	vldr	s13, [r7, #8]
 800170e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001716:	ee37 7a67 	vsub.f32	s14, s14, s15
 800171a:	edd7 6a02 	vldr	s13, [r7, #8]
 800171e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172a:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 800172e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001732:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001736:	4bc8      	ldr	r3, [pc, #800]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 8001738:	edd3 7a00 	vldr	s15, [r3]
 800173c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001740:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001744:	edd7 6a02 	vldr	s13, [r7, #8]
 8001748:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800174c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8001758:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800175c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001760:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001764:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	ee17 0a90 	vmov	r0, s15
 8001770:	f7fe fef2 	bl	8000558 <__aeabi_f2d>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	ec43 2b10 	vmov	d0, r2, r3
 800177c:	f004 f8e2 	bl	8005944 <sqrt>
 8001780:	ec53 2b10 	vmov	r2, r3, d0
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
 8001788:	f7ff fa16 	bl	8000bb8 <__aeabi_d2f>
 800178c:	4603      	mov	r3, r0
 800178e:	64bb      	str	r3, [r7, #72]	@ 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001790:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001794:	eeb1 7a67 	vneg.f32	s14, s15
 8001798:	4bae      	ldr	r3, [pc, #696]	@ (8001a54 <MadgwickAHRSupdate+0x814>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a2:	4bae      	ldr	r3, [pc, #696]	@ (8001a5c <MadgwickAHRSupdate+0x81c>)
 80017a4:	edd3 6a00 	vldr	s13, [r3]
 80017a8:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80017ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80017b8:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80017bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c4:	4ba4      	ldr	r3, [pc, #656]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 80017c6:	edd3 6a00 	vldr	s13, [r3]
 80017ca:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 80017ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017d6:	edd7 6a01 	vldr	s13, [r7, #4]
 80017da:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017e6:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80017ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80017ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f2:	4b99      	ldr	r3, [pc, #612]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001800:	edd7 6a01 	vldr	s13, [r7, #4]
 8001804:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001808:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001810:	edd7 6a01 	vldr	s13, [r7, #4]
 8001814:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4bx = 2.0f * _2bx;
 8001824:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800182c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_4bz = 2.0f * _2bz;
 8001830:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001834:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001838:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800183c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001840:	eeb1 7a67 	vneg.f32	s14, s15
 8001844:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001848:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800184c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001850:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001854:	edd7 7a06 	vldr	s15, [r7, #24]
 8001858:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800185c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001860:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001864:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001868:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800186c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001870:	edd7 7a05 	vldr	s15, [r7, #20]
 8001874:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001878:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800187c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001884:	4b73      	ldr	r3, [pc, #460]	@ (8001a54 <MadgwickAHRSupdate+0x814>)
 8001886:	edd3 6a00 	vldr	s13, [r3]
 800188a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800188e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001892:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001896:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800189a:	ee36 6a67 	vsub.f32	s12, s12, s15
 800189e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80018a2:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018a6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80018aa:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018ae:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 80018b2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80018b6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80018ba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018c2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ca:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018d6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80018da:	eef1 6a67 	vneg.f32	s13, s15
 80018de:	4b5e      	ldr	r3, [pc, #376]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 80018e0:	edd3 7a00 	vldr	s15, [r3]
 80018e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018e8:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <MadgwickAHRSupdate+0x81c>)
 80018ea:	ed93 6a00 	vldr	s12, [r3]
 80018ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018fa:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 80018fe:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001902:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001906:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800190a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800190e:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8001912:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001916:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800191a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800191e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001922:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001926:	edd7 7a02 	vldr	s15, [r7, #8]
 800192a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800192e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001936:	4b47      	ldr	r3, [pc, #284]	@ (8001a54 <MadgwickAHRSupdate+0x814>)
 8001938:	edd3 6a00 	vldr	s13, [r3]
 800193c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001944:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8001948:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800194c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001950:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001954:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001958:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800195c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001960:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001964:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001968:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800196c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001970:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001974:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001978:	edd7 7a01 	vldr	s15, [r7, #4]
 800197c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800198c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001990:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001994:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001998:	ee37 7a67 	vsub.f32	s14, s14, s15
 800199c:	edd7 7a06 	vldr	s15, [r7, #24]
 80019a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80019a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ac:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80019b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019b4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80019b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019c4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80019c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d0:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <MadgwickAHRSupdate+0x81c>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80019da:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80019e2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019e6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80019ea:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019ee:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f6:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80019fe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <MadgwickAHRSupdate+0x818>)
 8001a0c:	edd3 6a00 	vldr	s13, [r3]
 8001a10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a14:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a18:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001a1c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001a20:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a24:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a28:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a2c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001a30:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a34:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8001a38:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001a3c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a44:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a50:	e006      	b.n	8001a60 <MadgwickAHRSupdate+0x820>
 8001a52:	bf00      	nop
 8001a54:	20000208 	.word	0x20000208
 8001a58:	2000020c 	.word	0x2000020c
 8001a5c:	20000204 	.word	0x20000204
 8001a60:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6c:	4bf6      	ldr	r3, [pc, #984]	@ (8001e48 <MadgwickAHRSupdate+0xc08>)
 8001a6e:	edd3 6a00 	vldr	s13, [r3]
 8001a72:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001a76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a7a:	4bf4      	ldr	r3, [pc, #976]	@ (8001e4c <MadgwickAHRSupdate+0xc0c>)
 8001a7c:	ed93 6a00 	vldr	s12, [r3]
 8001a80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001a84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a8c:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8001a90:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001a94:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a98:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001a9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001aa0:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8001aa4:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001aa8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001aac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ab0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ab4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001abc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac8:	4be1      	ldr	r3, [pc, #900]	@ (8001e50 <MadgwickAHRSupdate+0xc10>)
 8001aca:	edd3 6a00 	vldr	s13, [r3]
 8001ace:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001ad2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ad6:	4bdf      	ldr	r3, [pc, #892]	@ (8001e54 <MadgwickAHRSupdate+0xc14>)
 8001ad8:	ed93 6a00 	vldr	s12, [r3]
 8001adc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001ae0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ae8:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8001aec:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001af0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001af4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001af8:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001afc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001b00:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001b04:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b08:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001b0c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001b10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001b14:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b18:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001b1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b20:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b30:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001b34:	eeb1 7a67 	vneg.f32	s14, s15
 8001b38:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001b3c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b40:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001b44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b54:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b58:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b5c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001b60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b6c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	4bb3      	ldr	r3, [pc, #716]	@ (8001e48 <MadgwickAHRSupdate+0xc08>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001b82:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b86:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001b8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b8e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001b92:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001b96:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001b9a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ba6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001baa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001bb6:	eef1 6a67 	vneg.f32	s13, s15
 8001bba:	4ba3      	ldr	r3, [pc, #652]	@ (8001e48 <MadgwickAHRSupdate+0xc08>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc4:	4ba1      	ldr	r3, [pc, #644]	@ (8001e4c <MadgwickAHRSupdate+0xc0c>)
 8001bc6:	ed93 6a00 	vldr	s12, [r3]
 8001bca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bd6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001bda:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001bde:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001be2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001be6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001bee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bf2:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8001bf6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001bfa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bfe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c0e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c1a:	4b8e      	ldr	r3, [pc, #568]	@ (8001e54 <MadgwickAHRSupdate+0xc14>)
 8001c1c:	edd3 6a00 	vldr	s13, [r3]
 8001c20:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c28:	4b89      	ldr	r3, [pc, #548]	@ (8001e50 <MadgwickAHRSupdate+0xc10>)
 8001c2a:	ed93 6a00 	vldr	s12, [r3]
 8001c2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c32:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c3a:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8001c3e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001c42:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c46:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c4a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c4e:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8001c52:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001c56:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c5a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001c5e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c62:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c76:	4b75      	ldr	r3, [pc, #468]	@ (8001e4c <MadgwickAHRSupdate+0xc0c>)
 8001c78:	edd3 6a00 	vldr	s13, [r3]
 8001c7c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c84:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <MadgwickAHRSupdate+0xc08>)
 8001c86:	ed93 6a00 	vldr	s12, [r3]
 8001c8a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c8e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c96:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8001c9a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001c9e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ca2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001ca6:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001caa:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001cae:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001cb2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cb6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001cba:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001cbe:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001cc2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001cc6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cce:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cda:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001cde:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001ce2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ce6:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001cea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cee:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cf6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001d02:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001d06:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001d0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d16:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001d1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d22:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001d26:	eef1 6a67 	vneg.f32	s13, s15
 8001d2a:	4b49      	ldr	r3, [pc, #292]	@ (8001e50 <MadgwickAHRSupdate+0xc10>)
 8001d2c:	edd3 7a00 	vldr	s15, [r3]
 8001d30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d34:	4b47      	ldr	r3, [pc, #284]	@ (8001e54 <MadgwickAHRSupdate+0xc14>)
 8001d36:	ed93 6a00 	vldr	s12, [r3]
 8001d3a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d42:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d46:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001d4a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001d4e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d52:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001d56:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001d5a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d62:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8001d66:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001d6a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001d6e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d72:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d76:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001d7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d7e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d8a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001d8e:	eef1 6a67 	vneg.f32	s13, s15
 8001d92:	4b2e      	ldr	r3, [pc, #184]	@ (8001e4c <MadgwickAHRSupdate+0xc0c>)
 8001d94:	edd3 7a00 	vldr	s15, [r3]
 8001d98:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <MadgwickAHRSupdate+0xc08>)
 8001d9e:	ed93 6a00 	vldr	s12, [r3]
 8001da2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001da6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001daa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dae:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8001db2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001db6:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001dba:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001dbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dc2:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8001dc6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001dca:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001dce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001dd2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dd6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001dda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dde:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dea:	4b1a      	ldr	r3, [pc, #104]	@ (8001e54 <MadgwickAHRSupdate+0xc14>)
 8001dec:	edd3 6a00 	vldr	s13, [r3]
 8001df0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001df4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001df8:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8001dfc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001e00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e04:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001e08:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e0c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8001e10:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001e14:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e18:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001e1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001e20:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001e24:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e28:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001e40:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001e44:	e008      	b.n	8001e58 <MadgwickAHRSupdate+0xc18>
 8001e46:	bf00      	nop
 8001e48:	20000208 	.word	0x20000208
 8001e4c:	20000004 	.word	0x20000004
 8001e50:	2000020c 	.word	0x2000020c
 8001e54:	20000204 	.word	0x20000204
 8001e58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e5c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001e60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e68:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001e6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e74:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	f000 fc16 	bl	80026b4 <invSqrt>
 8001e88:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		s0 *= recipNorm;
 8001e8c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001e90:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e98:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 *= recipNorm;
 8001e9c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001ea0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 *= recipNorm;
 8001eac:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001eb0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 *= recipNorm;
 8001ebc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001ec0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 8001ecc:	4b61      	ldr	r3, [pc, #388]	@ (8002054 <MadgwickAHRSupdate+0xe14>)
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
		qDot2 -= beta * s1;
 8001ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8002054 <MadgwickAHRSupdate+0xe14>)
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efc:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
		qDot3 -= beta * s2;
 8001f00:	4b54      	ldr	r3, [pc, #336]	@ (8002054 <MadgwickAHRSupdate+0xe14>)
 8001f02:	ed93 7a00 	vldr	s14, [r3]
 8001f06:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8001f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f16:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		qDot4 -= beta * s3;
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <MadgwickAHRSupdate+0xe14>)
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f28:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8001f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f30:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8001f34:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8001f38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002058 <MadgwickAHRSupdate+0xe18>
 8001f3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f40:	4b46      	ldr	r3, [pc, #280]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	4b44      	ldr	r3, [pc, #272]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8001f50:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001f54:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002058 <MadgwickAHRSupdate+0xe18>
 8001f58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f5c:	4b40      	ldr	r3, [pc, #256]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	4b3e      	ldr	r3, [pc, #248]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 8001f6c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001f70:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002058 <MadgwickAHRSupdate+0xe18>
 8001f74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f78:	4b3a      	ldr	r3, [pc, #232]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8001f84:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 8001f88:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001f8c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002058 <MadgwickAHRSupdate+0xe18>
 8001f90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f94:	4b34      	ldr	r3, [pc, #208]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	4b32      	ldr	r3, [pc, #200]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 8001fa6:	ed93 7a00 	vldr	s14, [r3]
 8001faa:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 8001fac:	edd3 7a00 	vldr	s15, [r3]
 8001fb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8001fb6:	edd3 6a00 	vldr	s13, [r3]
 8001fba:	4b29      	ldr	r3, [pc, #164]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8001fca:	edd3 6a00 	vldr	s13, [r3]
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fdc:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 8001fde:	edd3 6a00 	vldr	s13, [r3]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 8001fe4:	edd3 7a00 	vldr	s15, [r3]
 8001fe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	f000 fb5e 	bl	80026b4 <invSqrt>
 8001ff8:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	q0 *= recipNorm;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 8001ffe:	ed93 7a00 	vldr	s14, [r3]
 8002002:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MadgwickAHRSupdate+0xe1c>)
 800200c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8002012:	ed93 7a00 	vldr	s14, [r3]
 8002016:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <MadgwickAHRSupdate+0xe20>)
 8002020:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MadgwickAHRSupdate+0xe24>)
 8002034:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8002042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <MadgwickAHRSupdate+0xe28>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
}
 800204c:	37b8      	adds	r7, #184	@ 0xb8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000
 8002058:	3b000000 	.word	0x3b000000
 800205c:	20000004 	.word	0x20000004
 8002060:	20000204 	.word	0x20000204
 8002064:	20000208 	.word	0x20000208
 8002068:	2000020c 	.word	0x2000020c

0800206c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b09c      	sub	sp, #112	@ 0x70
 8002070:	af00      	add	r7, sp, #0
 8002072:	ed87 0a05 	vstr	s0, [r7, #20]
 8002076:	edc7 0a04 	vstr	s1, [r7, #16]
 800207a:	ed87 1a03 	vstr	s2, [r7, #12]
 800207e:	edc7 1a02 	vstr	s3, [r7, #8]
 8002082:	ed87 2a01 	vstr	s4, [r7, #4]
 8002086:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800208a:	4bec      	ldr	r3, [pc, #944]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800208c:	edd3 7a00 	vldr	s15, [r3]
 8002090:	eeb1 7a67 	vneg.f32	s14, s15
 8002094:	edd7 7a05 	vldr	s15, [r7, #20]
 8002098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800209c:	4be8      	ldr	r3, [pc, #928]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 800209e:	edd3 6a00 	vldr	s13, [r3]
 80020a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020ae:	4be5      	ldr	r3, [pc, #916]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 80020b0:	edd3 6a00 	vldr	s13, [r3]
 80020b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80020c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020c8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020cc:	4bde      	ldr	r3, [pc, #888]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020da:	4bd9      	ldr	r3, [pc, #868]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 80020dc:	edd3 6a00 	vldr	s13, [r3]
 80020e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ec:	4bd5      	ldr	r3, [pc, #852]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 80020ee:	edd3 6a00 	vldr	s13, [r3]
 80020f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80020f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002106:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800210a:	4bcf      	ldr	r3, [pc, #828]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a04 	vldr	s15, [r7, #16]
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	4bc8      	ldr	r3, [pc, #800]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800211a:	edd3 6a00 	vldr	s13, [r3]
 800211e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee37 7a67 	vsub.f32	s14, s14, s15
 800212a:	4bc6      	ldr	r3, [pc, #792]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 800212c:	edd3 6a00 	vldr	s13, [r3]
 8002130:	edd7 7a05 	vldr	s15, [r7, #20]
 8002134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002148:	4bbf      	ldr	r3, [pc, #764]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 800214a:	ed93 7a00 	vldr	s14, [r3]
 800214e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002156:	4bb9      	ldr	r3, [pc, #740]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 8002158:	edd3 6a00 	vldr	s13, [r3]
 800215c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002160:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002164:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002168:	4bb5      	ldr	r3, [pc, #724]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 800216a:	edd3 6a00 	vldr	s13, [r3]
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8002186:	edd7 7a02 	vldr	s15, [r7, #8]
 800218a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800218e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002192:	d10e      	bne.n	80021b2 <MadgwickAHRSupdateIMU+0x146>
 8002194:	edd7 7a01 	vldr	s15, [r7, #4]
 8002198:	eef5 7a40 	vcmp.f32	s15, #0.0
 800219c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a0:	d107      	bne.n	80021b2 <MadgwickAHRSupdateIMU+0x146>
 80021a2:	edd7 7a00 	vldr	s15, [r7]
 80021a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ae:	f000 81e5 	beq.w	800257c <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80021be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021c6:	edd7 7a00 	vldr	s15, [r7]
 80021ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80021ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	f000 fa6d 	bl	80026b4 <invSqrt>
 80021da:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 80021de:	ed97 7a02 	vldr	s14, [r7, #8]
 80021e2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80021e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ea:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 80021ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80021f2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80021f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fa:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 80021fe:	ed97 7a00 	vldr	s14, [r7]
 8002202:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800220e:	4b8e      	ldr	r3, [pc, #568]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002218:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 800221c:	4b87      	ldr	r3, [pc, #540]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002226:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 800222a:	4b85      	ldr	r3, [pc, #532]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002234:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 8002238:	4b82      	ldr	r3, [pc, #520]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002242:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 8002246:	4b80      	ldr	r3, [pc, #512]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 8002258:	4b78      	ldr	r3, [pc, #480]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002266:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 800226a:	4b75      	ldr	r3, [pc, #468]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002278:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 800227c:	4b6f      	ldr	r3, [pc, #444]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 800228e:	4b6c      	ldr	r3, [pc, #432]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 8002290:	edd3 7a00 	vldr	s15, [r3]
 8002294:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8002298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800229c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 80022a0:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b68      	ldr	r3, [pc, #416]	@ (8002448 <MadgwickAHRSupdateIMU+0x3dc>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 80022b4:	4b61      	ldr	r3, [pc, #388]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4b60      	ldr	r3, [pc, #384]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 80022c8:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 80022ca:	ed93 7a00 	vldr	s14, [r3]
 80022ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 80022dc:	4b59      	ldr	r3, [pc, #356]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	4b58      	ldr	r3, [pc, #352]	@ (8002444 <MadgwickAHRSupdateIMU+0x3d8>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80022f0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80022f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022fc:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002300:	edd7 7a02 	vldr	s15, [r7, #8]
 8002304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002310:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800231c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002320:	edd7 7a01 	vldr	s15, [r7, #4]
 8002324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8002330:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002334:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002340:	edd7 7a02 	vldr	s15, [r7, #8]
 8002344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002350:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002354:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002358:	4b38      	ldr	r3, [pc, #224]	@ (800243c <MadgwickAHRSupdateIMU+0x3d0>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002366:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800236a:	edd7 7a01 	vldr	s15, [r7, #4]
 800236e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002372:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002376:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800237a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800237e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002382:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002392:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800239e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 80023a2:	edd7 7a00 	vldr	s15, [r7]
 80023a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80023b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80023b6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80023ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <MadgwickAHRSupdateIMU+0x3d4>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c8:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80023cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d8:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80023dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80023e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e8:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002400:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002404:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002410:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002414:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002420:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8002424:	edd7 7a00 	vldr	s15, [r7]
 8002428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002430:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002434:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002438:	e008      	b.n	800244c <MadgwickAHRSupdateIMU+0x3e0>
 800243a:	bf00      	nop
 800243c:	20000204 	.word	0x20000204
 8002440:	20000208 	.word	0x20000208
 8002444:	2000020c 	.word	0x2000020c
 8002448:	20000004 	.word	0x20000004
 800244c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8002450:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002454:	4b91      	ldr	r3, [pc, #580]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245e:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002462:	edd7 7a02 	vldr	s15, [r7, #8]
 8002466:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800246a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800246e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002472:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8002476:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002488:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800248c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002498:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800249c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80024a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80024a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	eeb0 0a67 	vmov.f32	s0, s15
 80024cc:	f000 f8f2 	bl	80026b4 <invSqrt>
 80024d0:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 80024d4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024d8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 80024e4:	ed97 7a08 	vldr	s14, [r7, #32]
 80024e8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f0:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 80024f4:	ed97 7a07 	vldr	s14, [r7, #28]
 80024f8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80024fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002500:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 8002504:	ed97 7a06 	vldr	s14, [r7, #24]
 8002508:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800250c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002510:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002514:	4b62      	ldr	r3, [pc, #392]	@ (80026a0 <MadgwickAHRSupdateIMU+0x634>)
 8002516:	ed93 7a00 	vldr	s14, [r3]
 800251a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 800252e:	4b5c      	ldr	r3, [pc, #368]	@ (80026a0 <MadgwickAHRSupdateIMU+0x634>)
 8002530:	ed93 7a00 	vldr	s14, [r3]
 8002534:	edd7 7a08 	vldr	s15, [r7, #32]
 8002538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800253c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8002540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002544:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 8002548:	4b55      	ldr	r3, [pc, #340]	@ (80026a0 <MadgwickAHRSupdateIMU+0x634>)
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002556:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800255a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 8002562:	4b4f      	ldr	r3, [pc, #316]	@ (80026a0 <MadgwickAHRSupdateIMU+0x634>)
 8002564:	ed93 7a00 	vldr	s14, [r3]
 8002568:	edd7 7a06 	vldr	s15, [r7, #24]
 800256c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002570:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002578:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800257c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8002580:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80026a4 <MadgwickAHRSupdateIMU+0x638>
 8002584:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002588:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	4b45      	ldr	r3, [pc, #276]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 8002594:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002598:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800259c:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80026a4 <MadgwickAHRSupdateIMU+0x638>
 80025a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025a4:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	4b3f      	ldr	r3, [pc, #252]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 80025b0:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 80025b4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80025b8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80026a4 <MadgwickAHRSupdateIMU+0x638>
 80025bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025c0:	4b3b      	ldr	r3, [pc, #236]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	4b39      	ldr	r3, [pc, #228]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 80025cc:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 80025d0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80025d4:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80026a4 <MadgwickAHRSupdateIMU+0x638>
 80025d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025dc:	4b2f      	ldr	r3, [pc, #188]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e6:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 80025e8:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80025ec:	4b2e      	ldr	r3, [pc, #184]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	4b2d      	ldr	r3, [pc, #180]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 80025f4:	edd3 7a00 	vldr	s15, [r3]
 80025f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fc:	4b2b      	ldr	r3, [pc, #172]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 80025fe:	edd3 6a00 	vldr	s13, [r3]
 8002602:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002610:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 8002612:	edd3 6a00 	vldr	s13, [r3]
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002624:	4b1d      	ldr	r3, [pc, #116]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 8002626:	edd3 6a00 	vldr	s13, [r3]
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 800262c:	edd3 7a00 	vldr	s15, [r3]
 8002630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002638:	eeb0 0a67 	vmov.f32	s0, s15
 800263c:	f000 f83a 	bl	80026b4 <invSqrt>
 8002640:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 8002644:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <MadgwickAHRSupdateIMU+0x63c>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 8002658:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 800265a:	ed93 7a00 	vldr	s14, [r3]
 800265e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002666:	4b11      	ldr	r3, [pc, #68]	@ (80026ac <MadgwickAHRSupdateIMU+0x640>)
 8002668:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800266c:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267a:	4b0d      	ldr	r3, [pc, #52]	@ (80026b0 <MadgwickAHRSupdateIMU+0x644>)
 800267c:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	4b03      	ldr	r3, [pc, #12]	@ (800269c <MadgwickAHRSupdateIMU+0x630>)
 8002690:	edc3 7a00 	vstr	s15, [r3]
}
 8002694:	bf00      	nop
 8002696:	3770      	adds	r7, #112	@ 0x70
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	2000020c 	.word	0x2000020c
 80026a0:	20000000 	.word	0x20000000
 80026a4:	3b000000 	.word	0x3b000000
 80026a8:	20000004 	.word	0x20000004
 80026ac:	20000204 	.word	0x20000204
 80026b0:	20000208 	.word	0x20000208

080026b4 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80026b4:	b480      	push	{r7}
 80026b6:	b087      	sub	sp, #28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80026be:	edd7 7a01 	vldr	s15, [r7, #4]
 80026c2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80026c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ca:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80026d2:	f107 0310 	add.w	r3, r7, #16
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	105a      	asrs	r2, r3, #1
 80026de:	4b12      	ldr	r3, [pc, #72]	@ (8002728 <invSqrt+0x74>)
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80026ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80026f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8002704:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002708:	edd7 7a04 	vldr	s15, [r7, #16]
 800270c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002710:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	ee07 3a90 	vmov	s15, r3
}
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	5f3759df 	.word	0x5f3759df

0800272c <QMC_init>:
#include"QMC5883.h"
#include "math.h"

//###############################################################################################################
uint8_t QMC_init(QMC_t *qmc,I2C_HandleTypeDef *i2c,uint8_t Output_Data_Rate)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	@ 0x28
 8002730:	af04      	add	r7, sp, #16
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	71fb      	strb	r3, [r7, #7]
	uint8_t array[2];
	qmc->i2c=i2c;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	601a      	str	r2, [r3, #0]
	qmc->Control_Register=0x11;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2211      	movs	r2, #17
 8002744:	711a      	strb	r2, [r3, #4]
	array[0]=1;
 8002746:	2301      	movs	r3, #1
 8002748:	753b      	strb	r3, [r7, #20]
	array[1]=qmc->Control_Register;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	791b      	ldrb	r3, [r3, #4]
 800274e:	757b      	strb	r3, [r7, #21]

	if(Output_Data_Rate==200)qmc->Control_Register|=0b00001100;
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2bc8      	cmp	r3, #200	@ 0xc8
 8002754:	d107      	bne.n	8002766 <QMC_init+0x3a>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	791b      	ldrb	r3, [r3, #4]
 800275a:	f043 030c 	orr.w	r3, r3, #12
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	711a      	strb	r2, [r3, #4]
 8002764:	e024      	b.n	80027b0 <QMC_init+0x84>
	else if(Output_Data_Rate==100)qmc->Control_Register|=0b00001000;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b64      	cmp	r3, #100	@ 0x64
 800276a:	d107      	bne.n	800277c <QMC_init+0x50>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	791b      	ldrb	r3, [r3, #4]
 8002770:	f043 0308 	orr.w	r3, r3, #8
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	711a      	strb	r2, [r3, #4]
 800277a:	e019      	b.n	80027b0 <QMC_init+0x84>
	else if(Output_Data_Rate==50)qmc->Control_Register|=0b00000100;
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b32      	cmp	r3, #50	@ 0x32
 8002780:	d107      	bne.n	8002792 <QMC_init+0x66>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	791b      	ldrb	r3, [r3, #4]
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	b2da      	uxtb	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	711a      	strb	r2, [r3, #4]
 8002790:	e00e      	b.n	80027b0 <QMC_init+0x84>
	else if(Output_Data_Rate==10)qmc->Control_Register|=0b00000000;
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b0a      	cmp	r3, #10
 8002796:	d104      	bne.n	80027a2 <QMC_init+0x76>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	791a      	ldrb	r2, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	711a      	strb	r2, [r3, #4]
 80027a0:	e006      	b.n	80027b0 <QMC_init+0x84>
	else qmc->Control_Register|=0b00001100;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	f043 030c 	orr.w	r3, r3, #12
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	711a      	strb	r2, [r3, #4]

	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x0B, 1, &array[0], 1, 100)!=HAL_OK)return 1;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	2364      	movs	r3, #100	@ 0x64
 80027b6:	9302      	str	r3, [sp, #8]
 80027b8:	2301      	movs	r3, #1
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2301      	movs	r3, #1
 80027c4:	220b      	movs	r2, #11
 80027c6:	211a      	movs	r1, #26
 80027c8:	f001 f978 	bl	8003abc <HAL_I2C_Mem_Write>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <QMC_init+0xaa>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e014      	b.n	8002800 <QMC_init+0xd4>
	if(HAL_I2C_Mem_Write(qmc->i2c, 0x1A, 0x09, 1, &array[1], 1, 100)!=HAL_OK)return 1;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	2364      	movs	r3, #100	@ 0x64
 80027dc:	9302      	str	r3, [sp, #8]
 80027de:	2301      	movs	r3, #1
 80027e0:	9301      	str	r3, [sp, #4]
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	3301      	adds	r3, #1
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2301      	movs	r3, #1
 80027ec:	2209      	movs	r2, #9
 80027ee:	211a      	movs	r1, #26
 80027f0:	f001 f964 	bl	8003abc <HAL_I2C_Mem_Write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <QMC_init+0xd2>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <QMC_init+0xd4>

	return 0;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <QMC_read>:

uint8_t QMC_read(QMC_t *qmc)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af04      	add	r7, sp, #16
 800280e:	6078      	str	r0, [r7, #4]
	  qmc->datas[0]=0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	715a      	strb	r2, [r3, #5]
	  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x06, 1, qmc->datas, 1, 100);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3305      	adds	r3, #5
 800281e:	2264      	movs	r2, #100	@ 0x64
 8002820:	9202      	str	r2, [sp, #8]
 8002822:	2201      	movs	r2, #1
 8002824:	9201      	str	r2, [sp, #4]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2301      	movs	r3, #1
 800282a:	2206      	movs	r2, #6
 800282c:	211a      	movs	r1, #26
 800282e:	f001 fa3f 	bl	8003cb0 <HAL_I2C_Mem_Read>

	  if((qmc->datas[0]&0x01)==1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	795b      	ldrb	r3, [r3, #5]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d079      	beq.n	8002932 <QMC_read+0x12a>
	  {
		  HAL_I2C_Mem_Read(qmc->i2c, 0x1A, 0x00, 1, qmc->datas, 6, 100);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	3305      	adds	r3, #5
 8002846:	2264      	movs	r2, #100	@ 0x64
 8002848:	9202      	str	r2, [sp, #8]
 800284a:	2206      	movs	r2, #6
 800284c:	9201      	str	r2, [sp, #4]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2301      	movs	r3, #1
 8002852:	2200      	movs	r2, #0
 8002854:	211a      	movs	r1, #26
 8002856:	f001 fa2b 	bl	8003cb0 <HAL_I2C_Mem_Read>
		  qmc->Xaxis= (qmc->datas[1]<<8) | qmc->datas[0];
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	799b      	ldrb	r3, [r3, #6]
 800285e:	b21b      	sxth	r3, r3
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	b21a      	sxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	795b      	ldrb	r3, [r3, #5]
 8002868:	b21b      	sxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	b21a      	sxth	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	819a      	strh	r2, [r3, #12]
		  qmc->Yaxis= (qmc->datas[3]<<8) | qmc->datas[2];
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	7a1b      	ldrb	r3, [r3, #8]
 8002876:	b21b      	sxth	r3, r3
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	b21a      	sxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	79db      	ldrb	r3, [r3, #7]
 8002880:	b21b      	sxth	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b21a      	sxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	81da      	strh	r2, [r3, #14]
		  qmc->Zaxis= (qmc->datas[5]<<8) | qmc->datas[4];
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7a9b      	ldrb	r3, [r3, #10]
 800288e:	b21b      	sxth	r3, r3
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	b21a      	sxth	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	b21b      	sxth	r3, r3
 800289a:	4313      	orrs	r3, r2
 800289c:	b21a      	sxth	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	821a      	strh	r2, [r3, #16]

		  qmc->compas=atan2f(qmc->Yaxis,qmc->Xaxis)*180.00/M_PI;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80028b6:	ee07 3a10 	vmov	s14, r3
 80028ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80028be:	eef0 0a47 	vmov.f32	s1, s14
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	f003 f869 	bl	800599c <atan2f>
 80028ca:	ee10 3a10 	vmov	r3, s0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe42 	bl	8000558 <__aeabi_f2d>
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002948 <QMC_read+0x140>)
 80028da:	f7fd fe95 	bl	8000608 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	a316      	add	r3, pc, #88	@ (adr r3, 8002940 <QMC_read+0x138>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd ffb6 	bl	800085c <__aeabi_ddiv>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe f95e 	bl	8000bb8 <__aeabi_d2f>
 80028fc:	4602      	mov	r2, r0
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	619a      	str	r2, [r3, #24]

		  if(qmc->compas>0)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	edd3 7a06 	vldr	s15, [r3, #24]
 8002908:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800290c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002910:	dd04      	ble.n	800291c <QMC_read+0x114>
		  {
			  qmc->heading= qmc->compas;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699a      	ldr	r2, [r3, #24]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	615a      	str	r2, [r3, #20]
 800291a:	e00c      	b.n	8002936 <QMC_read+0x12e>
		  }
		  else
		  {
			  qmc->heading=360+qmc->compas;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002922:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800294c <QMC_read+0x144>
 8002926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	edc3 7a05 	vstr	s15, [r3, #20]
 8002930:	e001      	b.n	8002936 <QMC_read+0x12e>
		  }
	  }
	  else
	  {
		  return 1;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <QMC_read+0x130>
	  }
return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	54442d18 	.word	0x54442d18
 8002944:	400921fb 	.word	0x400921fb
 8002948:	40668000 	.word	0x40668000
 800294c:	43b40000 	.word	0x43b40000

08002950 <__io_putchar>:
/* USER CODE BEGIN PFP */
void Read_Sensors(SensorData *data);
void Process_Data(const SensorData *data);

// Redireciona o 'printf' para a UART
int __io_putchar(int ch) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002958:	1d39      	adds	r1, r7, #4
 800295a:	f04f 33ff 	mov.w	r3, #4294967295
 800295e:	2201      	movs	r2, #1
 8002960:	4803      	ldr	r0, [pc, #12]	@ (8002970 <__io_putchar+0x20>)
 8002962:	f002 fc33 	bl	80051cc <HAL_UART_Transmit>
    return ch;
 8002966:	687b      	ldr	r3, [r7, #4]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200002b8 	.word	0x200002b8

08002974 <Read_Sensors>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Read all sensors ----------------------------------------------------------*/
void Read_Sensors(SensorData *data)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
    // Leitura do acelerômetro e giroscópio
    // Os dados são armazenados diretamente na struct através do ponteiro
    MPU6050_Read_Accel(&data->ax, &data->ay, &data->az);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	1d19      	adds	r1, r3, #4
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3308      	adds	r3, #8
 8002986:	461a      	mov	r2, r3
 8002988:	f7fe fb52 	bl	8001030 <MPU6050_Read_Accel>
    MPU6050_Read_Gyro(&data->gx, &data->gy, &data->gz);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f103 000c 	add.w	r0, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f103 0110 	add.w	r1, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3314      	adds	r3, #20
 800299c:	461a      	mov	r2, r3
 800299e:	f7fe fbcf 	bl	8001140 <MPU6050_Read_Gyro>

    // Leitura do magnetômetro
    QMC_read(&qmc);
 80029a2:	4812      	ldr	r0, [pc, #72]	@ (80029ec <Read_Sensors+0x78>)
 80029a4:	f7ff ff30 	bl	8002808 <QMC_read>
    data->mx = (float)qmc.Xaxis;
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <Read_Sensors+0x78>)
 80029aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edc3 7a06 	vstr	s15, [r3, #24]
    data->my = (float)qmc.Yaxis;
 80029bc:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <Read_Sensors+0x78>)
 80029be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	edc3 7a07 	vstr	s15, [r3, #28]
    data->mz = (float)qmc.Zaxis;
 80029d0:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <Read_Sensors+0x78>)
 80029d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000300 	.word	0x20000300

080029f0 <Process_Data>:

/* Process data with Madgwick ------------------------------------------------*/
void Process_Data(const SensorData *data)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b08a      	sub	sp, #40	@ 0x28
 80029f6:	af06      	add	r7, sp, #24
 80029f8:	6078      	str	r0, [r7, #4]
    // Atualiza o AHRS com os novos dados dos sensores
    MadgwickAHRSupdate(data->gx, data->gy, data->gz,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	ed93 7a04 	vldr	s14, [r3, #16]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	edd3 6a05 	vldr	s13, [r3, #20]
                       data->ax, data->ay, data->az,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	ed93 6a00 	vldr	s12, [r3]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	edd3 5a01 	vldr	s11, [r3, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	ed93 5a02 	vldr	s10, [r3, #8]
                       data->mx, data->my, data->mz);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edd3 4a06 	vldr	s9, [r3, #24]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	edd3 3a07 	vldr	s7, [r3, #28]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	ed93 4a08 	vldr	s8, [r3, #32]
    MadgwickAHRSupdate(data->gx, data->gy, data->gz,
 8002a30:	eeb0 3a64 	vmov.f32	s6, s9
 8002a34:	eef0 2a45 	vmov.f32	s5, s10
 8002a38:	eeb0 2a65 	vmov.f32	s4, s11
 8002a3c:	eef0 1a46 	vmov.f32	s3, s12
 8002a40:	eeb0 1a66 	vmov.f32	s2, s13
 8002a44:	eef0 0a47 	vmov.f32	s1, s14
 8002a48:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4c:	f7fe fbf8 	bl	8001240 <MadgwickAHRSupdate>

    // Imprime o quaternião resultante
    printf("Quaternion: q0:%.3f q1:%.3f q2:%.3f q3:%.3f\r\n", q0, q1, q2, q3);
 8002a50:	4b45      	ldr	r3, [pc, #276]	@ (8002b68 <Process_Data+0x178>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd7f 	bl	8000558 <__aeabi_f2d>
 8002a5a:	4682      	mov	sl, r0
 8002a5c:	468b      	mov	fp, r1
 8002a5e:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <Process_Data+0x17c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fd fd78 	bl	8000558 <__aeabi_f2d>
 8002a68:	4604      	mov	r4, r0
 8002a6a:	460d      	mov	r5, r1
 8002a6c:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <Process_Data+0x180>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd71 	bl	8000558 <__aeabi_f2d>
 8002a76:	4680      	mov	r8, r0
 8002a78:	4689      	mov	r9, r1
 8002a7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b74 <Process_Data+0x184>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd6a 	bl	8000558 <__aeabi_f2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002a8c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a90:	e9cd 4500 	strd	r4, r5, [sp]
 8002a94:	4652      	mov	r2, sl
 8002a96:	465b      	mov	r3, fp
 8002a98:	4837      	ldr	r0, [pc, #220]	@ (8002b78 <Process_Data+0x188>)
 8002a9a:	f003 fee9 	bl	8006870 <iprintf>

    // --- CÁLCULO CORRETO DO HEADING (YAW) ---
    // O heading é extraído do quaternião, que já está com a inclinação compensada.
    // Isso garante que a leitura da "bússola" seja precisa mesmo se o sensor estiver inclinado.
    float yaw_rad = atan2f(2.0f * (q0 * q3 + q1 * q2), 1.0f - 2.0f * (q2 * q2 + q3 * q3));
 8002a9e:	4b32      	ldr	r3, [pc, #200]	@ (8002b68 <Process_Data+0x178>)
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <Process_Data+0x184>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aae:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <Process_Data+0x17c>)
 8002ab0:	edd3 6a00 	vldr	s13, [r3]
 8002ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b70 <Process_Data+0x180>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac2:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <Process_Data+0x180>)
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <Process_Data+0x180>)
 8002ace:	edd3 7a00 	vldr	s15, [r3]
 8002ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad6:	4b27      	ldr	r3, [pc, #156]	@ (8002b74 <Process_Data+0x184>)
 8002ad8:	edd3 6a00 	vldr	s13, [r3]
 8002adc:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <Process_Data+0x184>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af6:	eef0 0a67 	vmov.f32	s1, s15
 8002afa:	eeb0 0a46 	vmov.f32	s0, s12
 8002afe:	f002 ff4d 	bl	800599c <atan2f>
 8002b02:	ed87 0a02 	vstr	s0, [r7, #8]
    float heading_deg = yaw_rad * (180.0f / M_PI);
 8002b06:	68b8      	ldr	r0, [r7, #8]
 8002b08:	f7fd fd26 	bl	8000558 <__aeabi_f2d>
 8002b0c:	a314      	add	r3, pc, #80	@ (adr r3, 8002b60 <Process_Data+0x170>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fd79 	bl	8000608 <__aeabi_dmul>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7fe f84b 	bl	8000bb8 <__aeabi_d2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	60fb      	str	r3, [r7, #12]

    // Converte para a faixa de 0-360 graus
    if (heading_deg < 0) {
 8002b26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	d507      	bpl.n	8002b44 <Process_Data+0x154>
        heading_deg += 360.0f;
 8002b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b38:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002b7c <Process_Data+0x18c>
 8002b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b40:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    printf("Heading (Corrigido): %.2f graus\r\n\r\n", heading_deg);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7fd fd07 	bl	8000558 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	480c      	ldr	r0, [pc, #48]	@ (8002b80 <Process_Data+0x190>)
 8002b50:	f003 fe8e 	bl	8006870 <iprintf>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5e:	bf00      	nop
 8002b60:	1a63c1f8 	.word	0x1a63c1f8
 8002b64:	404ca5dc 	.word	0x404ca5dc
 8002b68:	20000004 	.word	0x20000004
 8002b6c:	20000204 	.word	0x20000204
 8002b70:	20000208 	.word	0x20000208
 8002b74:	2000020c 	.word	0x2000020c
 8002b78:	08008788 	.word	0x08008788
 8002b7c:	43b40000 	.word	0x43b40000
 8002b80:	080087b8 	.word	0x080087b8

08002b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	@ 0x28
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b8a:	f000 fb77 	bl	800327c <HAL_Init>
  // A declaração DEVE estar aqui, no início da função main.

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b8e:	f000 f82b 	bl	8002be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b92:	f000 f917 	bl	8002dc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b96:	f000 f88f 	bl	8002cb8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002b9a:	f000 f8bb 	bl	8002d14 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8002b9e:	f000 f8e7 	bl	8002d70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_init();
 8002ba2:	f7fe f9ef 	bl	8000f84 <MPU6050_init>
  QMC_init(&qmc, &hi2c1, Continuous);
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <main+0x58>)
 8002baa:	480d      	ldr	r0, [pc, #52]	@ (8002be0 <main+0x5c>)
 8002bac:	f7ff fdbe 	bl	800272c <QMC_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t now = HAL_GetTick();
 8002bb0:	f000 fbca 	bl	8003348 <HAL_GetTick>
 8002bb4:	6278      	str	r0, [r7, #36]	@ 0x24

	     // Loop com taxa de amostragem fixa (100 Hz)
	     if ((now - lastTick) >= LOOP_INTERVAL)
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <main+0x60>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	d9f6      	bls.n	8002bb0 <main+0x2c>
	     {
	         lastTick = now;
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <main+0x60>)
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	6013      	str	r3, [r2, #0]

	         // 1. Lê os dados brutos e preenche a estrutura 'raw_data'
	         Read_Sensors(&raw_data);
 8002bc8:	463b      	mov	r3, r7
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fed2 	bl	8002974 <Read_Sensors>

	         // 2. Processa os dados da estrutura 'raw_data'
	         Process_Data(&raw_data);
 8002bd0:	463b      	mov	r3, r7
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff0c 	bl	80029f0 <Process_Data>
  {
 8002bd8:	e7ea      	b.n	8002bb0 <main+0x2c>
 8002bda:	bf00      	nop
 8002bdc:	20000210 	.word	0x20000210
 8002be0:	20000300 	.word	0x20000300
 8002be4:	2000031c 	.word	0x2000031c

08002be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b094      	sub	sp, #80	@ 0x50
 8002bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	2230      	movs	r2, #48	@ 0x30
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f003 fe8f 	bl	800691a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <SystemClock_Config+0xc8>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	4a26      	ldr	r2, [pc, #152]	@ (8002cb0 <SystemClock_Config+0xc8>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1c:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <SystemClock_Config+0xc8>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <SystemClock_Config+0xcc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a20      	ldr	r2, [pc, #128]	@ (8002cb4 <SystemClock_Config+0xcc>)
 8002c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c36:	6013      	str	r3, [r2, #0]
 8002c38:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb4 <SystemClock_Config+0xcc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c44:	2302      	movs	r3, #2
 8002c46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c4c:	2310      	movs	r3, #16
 8002c4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c50:	2302      	movs	r3, #2
 8002c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c54:	2300      	movs	r3, #0
 8002c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002c58:	2308      	movs	r3, #8
 8002c5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002c5c:	2350      	movs	r3, #80	@ 0x50
 8002c5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c60:	2302      	movs	r3, #2
 8002c62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002c64:	2304      	movs	r3, #4
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c68:	f107 0320 	add.w	r3, r7, #32
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 fe05 	bl	800487c <HAL_RCC_OscConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002c78:	f000 f8cc 	bl	8002e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c80:	2302      	movs	r3, #2
 8002c82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c92:	f107 030c 	add.w	r3, r7, #12
 8002c96:	2102      	movs	r1, #2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f002 f867 	bl	8004d6c <HAL_RCC_ClockConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002ca4:	f000 f8b6 	bl	8002e14 <Error_Handler>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3750      	adds	r7, #80	@ 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000

08002cb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cbe:	4a13      	ldr	r2, [pc, #76]	@ (8002d0c <MX_I2C1_Init+0x54>)
 8002cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cc2:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cc4:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <MX_I2C1_Init+0x58>)
 8002cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cee:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	@ (8002d08 <MX_I2C1_Init+0x50>)
 8002cf6:	f000 fd9d 	bl	8003834 <HAL_I2C_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d00:	f000 f888 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	20000210 	.word	0x20000210
 8002d0c:	40005400 	.word	0x40005400
 8002d10:	000186a0 	.word	0x000186a0

08002d14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d1a:	4a13      	ldr	r2, [pc, #76]	@ (8002d68 <MX_I2C2_Init+0x54>)
 8002d1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d20:	4a12      	ldr	r2, [pc, #72]	@ (8002d6c <MX_I2C2_Init+0x58>)
 8002d22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d24:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d30:	4b0c      	ldr	r3, [pc, #48]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d38:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d44:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d50:	4804      	ldr	r0, [pc, #16]	@ (8002d64 <MX_I2C2_Init+0x50>)
 8002d52:	f000 fd6f 	bl	8003834 <HAL_I2C_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d5c:	f000 f85a 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000264 	.word	0x20000264
 8002d68:	40005800 	.word	0x40005800
 8002d6c:	000186a0 	.word	0x000186a0

08002d70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d74:	4b11      	ldr	r3, [pc, #68]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d76:	4a12      	ldr	r2, [pc, #72]	@ (8002dc0 <MX_USART2_UART_Init+0x50>)
 8002d78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d7a:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d94:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d96:	220c      	movs	r2, #12
 8002d98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da6:	4805      	ldr	r0, [pc, #20]	@ (8002dbc <MX_USART2_UART_Init+0x4c>)
 8002da8:	f002 f9c0 	bl	800512c <HAL_UART_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002db2:	f000 f82f 	bl	8002e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200002b8 	.word	0x200002b8
 8002dc0:	40004400 	.word	0x40004400

08002dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dda:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <MX_GPIO_Init+0x4c>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40023800 	.word	0x40023800

08002e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e18:	b672      	cpsid	i
}
 8002e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e1c:	bf00      	nop
 8002e1e:	e7fd      	b.n	8002e1c <Error_Handler+0x8>

08002e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3e:	607b      	str	r3, [r7, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a08      	ldr	r2, [pc, #32]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <HAL_MspInit+0x4c>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 031c 	add.w	r3, r7, #28
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f78 <HAL_I2C_MspInit+0x108>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d12c      	bne.n	8002eec <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
 8002e96:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea2:	4b36      	ldr	r3, [pc, #216]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]
 8002eac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eae:	23c0      	movs	r3, #192	@ 0xc0
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb2:	2312      	movs	r3, #18
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482d      	ldr	r0, [pc, #180]	@ (8002f80 <HAL_I2C_MspInit+0x110>)
 8002eca:	f000 fb2f 	bl	800352c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002ed8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002edc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ede:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002eea:	e041      	b.n	8002f70 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a24      	ldr	r2, [pc, #144]	@ (8002f84 <HAL_I2C_MspInit+0x114>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d13c      	bne.n	8002f70 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	4b20      	ldr	r3, [pc, #128]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a1f      	ldr	r2, [pc, #124]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b1d      	ldr	r3, [pc, #116]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f18:	2312      	movs	r3, #18
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f20:	2303      	movs	r3, #3
 8002f22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f24:	2304      	movs	r3, #4
 8002f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4814      	ldr	r0, [pc, #80]	@ (8002f80 <HAL_I2C_MspInit+0x110>)
 8002f30:	f000 fafc 	bl	800352c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f34:	2308      	movs	r3, #8
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f38:	2312      	movs	r3, #18
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002f44:	2309      	movs	r3, #9
 8002f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480c      	ldr	r0, [pc, #48]	@ (8002f80 <HAL_I2C_MspInit+0x110>)
 8002f50:	f000 faec 	bl	800352c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	4b08      	ldr	r3, [pc, #32]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a07      	ldr	r2, [pc, #28]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002f5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f64:	4b05      	ldr	r3, [pc, #20]	@ (8002f7c <HAL_I2C_MspInit+0x10c>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3730      	adds	r7, #48	@ 0x30
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40005400 	.word	0x40005400
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40005800 	.word	0x40005800

08002f88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	@ (800300c <HAL_UART_MspInit+0x84>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d12b      	bne.n	8003002 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	4b18      	ldr	r3, [pc, #96]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	613b      	str	r3, [r7, #16]
 8002fc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fce:	4a10      	ldr	r2, [pc, #64]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003010 <HAL_UART_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fe2:	230c      	movs	r3, #12
 8002fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ff2:	2307      	movs	r3, #7
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4805      	ldr	r0, [pc, #20]	@ (8003014 <HAL_UART_MspInit+0x8c>)
 8002ffe:	f000 fa95 	bl	800352c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	@ 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40004400 	.word	0x40004400
 8003010:	40023800 	.word	0x40023800
 8003014:	40020000 	.word	0x40020000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <NMI_Handler+0x4>

08003020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <HardFault_Handler+0x4>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <MemManage_Handler+0x4>

08003030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <UsageFault_Handler+0x4>

08003040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306e:	f000 f957 	bl	8003320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}

08003076 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003076:	b480      	push	{r7}
 8003078:	af00      	add	r7, sp, #0
  return 1;
 800307a:	2301      	movs	r3, #1
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <_kill>:

int _kill(int pid, int sig)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003090:	f003 fc96 	bl	80069c0 <__errno>
 8003094:	4603      	mov	r3, r0
 8003096:	2216      	movs	r2, #22
 8003098:	601a      	str	r2, [r3, #0]
  return -1;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <_exit>:

void _exit (int status)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ae:	f04f 31ff 	mov.w	r1, #4294967295
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff ffe7 	bl	8003086 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <_exit+0x12>

080030bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e00a      	b.n	80030e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ce:	f3af 8000 	nop.w
 80030d2:	4601      	mov	r1, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	b2ca      	uxtb	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	dbf0      	blt.n	80030ce <_read+0x12>
  }

  return len;
 80030ec:	687b      	ldr	r3, [r7, #4]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e009      	b.n	800311c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	60ba      	str	r2, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fc1d 	bl	8002950 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3301      	adds	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	dbf1      	blt.n	8003108 <_write+0x12>
  }
  return len;
 8003124:	687b      	ldr	r3, [r7, #4]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_close>:

int _close(int file)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003156:	605a      	str	r2, [r3, #4]
  return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_isatty>:

int _isatty(int file)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4a14      	ldr	r2, [pc, #80]	@ (80031f4 <_sbrk+0x5c>)
 80031a2:	4b15      	ldr	r3, [pc, #84]	@ (80031f8 <_sbrk+0x60>)
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ac:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b4:	4b11      	ldr	r3, [pc, #68]	@ (80031fc <_sbrk+0x64>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	@ (8003200 <_sbrk+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d207      	bcs.n	80031d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c8:	f003 fbfa 	bl	80069c0 <__errno>
 80031cc:	4603      	mov	r3, r0
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e009      	b.n	80031ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d8:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031de:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	4a05      	ldr	r2, [pc, #20]	@ (80031fc <_sbrk+0x64>)
 80031e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20020000 	.word	0x20020000
 80031f8:	00000400 	.word	0x00000400
 80031fc:	20000320 	.word	0x20000320
 8003200:	20000478 	.word	0x20000478

08003204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	@ (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800322c:	f7ff ffea 	bl	8003204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003230:	480c      	ldr	r0, [pc, #48]	@ (8003264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003232:	490d      	ldr	r1, [pc, #52]	@ (8003268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003238:	e002      	b.n	8003240 <LoopCopyDataInit>

0800323a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800323c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323e:	3304      	adds	r3, #4

08003240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003244:	d3f9      	bcc.n	800323a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003248:	4c0a      	ldr	r4, [pc, #40]	@ (8003274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800324c:	e001      	b.n	8003252 <LoopFillZerobss>

0800324e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003250:	3204      	adds	r2, #4

08003252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003254:	d3fb      	bcc.n	800324e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003256:	f003 fbb9 	bl	80069cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800325a:	f7ff fc93 	bl	8002b84 <main>
  bx  lr    
 800325e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800326c:	08008bc4 	.word	0x08008bc4
  ldr r2, =_sbss
 8003270:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003274:	20000474 	.word	0x20000474

08003278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC_IRQHandler>
	...

0800327c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_Init+0x40>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <HAL_Init+0x40>)
 8003286:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800328a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800328c:	4b0b      	ldr	r3, [pc, #44]	@ (80032bc <HAL_Init+0x40>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <HAL_Init+0x40>)
 8003292:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003298:	4b08      	ldr	r3, [pc, #32]	@ (80032bc <HAL_Init+0x40>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a07      	ldr	r2, [pc, #28]	@ (80032bc <HAL_Init+0x40>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f000 f90d 	bl	80034c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032aa:	200f      	movs	r0, #15
 80032ac:	f000 f808 	bl	80032c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032b0:	f7ff fdb6 	bl	8002e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c8:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <HAL_InitTick+0x54>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <HAL_InitTick+0x58>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4619      	mov	r1, r3
 80032d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f917 	bl	8003512 <HAL_SYSTICK_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00e      	b.n	800330c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b0f      	cmp	r3, #15
 80032f2:	d80a      	bhi.n	800330a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f4:	2200      	movs	r2, #0
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f000 f8ed 	bl	80034da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003300:	4a06      	ldr	r2, [pc, #24]	@ (800331c <HAL_InitTick+0x5c>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	e000      	b.n	800330c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000008 	.word	0x20000008
 8003318:	20000010 	.word	0x20000010
 800331c:	2000000c 	.word	0x2000000c

08003320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003324:	4b06      	ldr	r3, [pc, #24]	@ (8003340 <HAL_IncTick+0x20>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	4b06      	ldr	r3, [pc, #24]	@ (8003344 <HAL_IncTick+0x24>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4413      	add	r3, r2
 8003330:	4a04      	ldr	r2, [pc, #16]	@ (8003344 <HAL_IncTick+0x24>)
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000010 	.word	0x20000010
 8003344:	20000324 	.word	0x20000324

08003348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return uwTick;
 800334c:	4b03      	ldr	r3, [pc, #12]	@ (800335c <HAL_GetTick+0x14>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000324 	.word	0x20000324

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	@ (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	@ (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db0a      	blt.n	80033ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	490c      	ldr	r1, [pc, #48]	@ (8003410 <__NVIC_SetPriority+0x4c>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	440b      	add	r3, r1
 80033e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033ec:	e00a      	b.n	8003404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	4908      	ldr	r1, [pc, #32]	@ (8003414 <__NVIC_SetPriority+0x50>)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	3b04      	subs	r3, #4
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	440b      	add	r3, r1
 8003402:	761a      	strb	r2, [r3, #24]
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	e000e100 	.word	0xe000e100
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	@ 0x24
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f1c3 0307 	rsb	r3, r3, #7
 8003432:	2b04      	cmp	r3, #4
 8003434:	bf28      	it	cs
 8003436:	2304      	movcs	r3, #4
 8003438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3304      	adds	r3, #4
 800343e:	2b06      	cmp	r3, #6
 8003440:	d902      	bls.n	8003448 <NVIC_EncodePriority+0x30>
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3b03      	subs	r3, #3
 8003446:	e000      	b.n	800344a <NVIC_EncodePriority+0x32>
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800344c:	f04f 32ff 	mov.w	r2, #4294967295
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43da      	mvns	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	401a      	ands	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003460:	f04f 31ff 	mov.w	r1, #4294967295
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	43d9      	mvns	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	4313      	orrs	r3, r2
         );
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003490:	d301      	bcc.n	8003496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003496:	4a0a      	ldr	r2, [pc, #40]	@ (80034c0 <SysTick_Config+0x40>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800349e:	210f      	movs	r1, #15
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f7ff ff8e 	bl	80033c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <SysTick_Config+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <SysTick_Config+0x40>)
 80034b0:	2207      	movs	r2, #7
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff47 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034ec:	f7ff ff5c 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 80034f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff8e 	bl	8003418 <NVIC_EncodePriority>
 80034fc:	4602      	mov	r2, r0
 80034fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff ff5d 	bl	80033c4 <__NVIC_SetPriority>
}
 800350a:	bf00      	nop
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003512:	b580      	push	{r7, lr}
 8003514:	b082      	sub	sp, #8
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ffb0 	bl	8003480 <SysTick_Config>
 8003520:	4603      	mov	r3, r0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800352c:	b480      	push	{r7}
 800352e:	b089      	sub	sp, #36	@ 0x24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	e159      	b.n	80037fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4013      	ands	r3, r2
 800355a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	429a      	cmp	r2, r3
 8003562:	f040 8148 	bne.w	80037f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d005      	beq.n	800357e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800357a:	2b02      	cmp	r3, #2
 800357c:	d130      	bne.n	80035e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	2203      	movs	r2, #3
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035b4:	2201      	movs	r2, #1
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4013      	ands	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f003 0201 	and.w	r2, r3, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d017      	beq.n	800361c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	2203      	movs	r2, #3
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43db      	mvns	r3, r3
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4013      	ands	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689a      	ldr	r2, [r3, #8]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f003 0303 	and.w	r3, r3, #3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d123      	bne.n	8003670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	08da      	lsrs	r2, r3, #3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3208      	adds	r2, #8
 8003630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	691a      	ldr	r2, [r3, #16]
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	4313      	orrs	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 80a2 	beq.w	80037f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b57      	ldr	r3, [pc, #348]	@ (8003814 <HAL_GPIO_Init+0x2e8>)
 80036b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ba:	4a56      	ldr	r2, [pc, #344]	@ (8003814 <HAL_GPIO_Init+0x2e8>)
 80036bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036c2:	4b54      	ldr	r3, [pc, #336]	@ (8003814 <HAL_GPIO_Init+0x2e8>)
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ce:	4a52      	ldr	r2, [pc, #328]	@ (8003818 <HAL_GPIO_Init+0x2ec>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4013      	ands	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a49      	ldr	r2, [pc, #292]	@ (800381c <HAL_GPIO_Init+0x2f0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x202>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a48      	ldr	r2, [pc, #288]	@ (8003820 <HAL_GPIO_Init+0x2f4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x1fe>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a47      	ldr	r2, [pc, #284]	@ (8003824 <HAL_GPIO_Init+0x2f8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x1fa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a46      	ldr	r2, [pc, #280]	@ (8003828 <HAL_GPIO_Init+0x2fc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x1f6>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a45      	ldr	r2, [pc, #276]	@ (800382c <HAL_GPIO_Init+0x300>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x1f2>
 800371a:	2304      	movs	r3, #4
 800371c:	e008      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800371e:	2307      	movs	r3, #7
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_Init+0x204>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_Init+0x204>
 800372e:	2300      	movs	r3, #0
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003740:	4935      	ldr	r1, [pc, #212]	@ (8003818 <HAL_GPIO_Init+0x2ec>)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800374e:	4b38      	ldr	r3, [pc, #224]	@ (8003830 <HAL_GPIO_Init+0x304>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	43db      	mvns	r3, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003772:	4a2f      	ldr	r2, [pc, #188]	@ (8003830 <HAL_GPIO_Init+0x304>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003778:	4b2d      	ldr	r3, [pc, #180]	@ (8003830 <HAL_GPIO_Init+0x304>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800379c:	4a24      	ldr	r2, [pc, #144]	@ (8003830 <HAL_GPIO_Init+0x304>)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037a2:	4b23      	ldr	r3, [pc, #140]	@ (8003830 <HAL_GPIO_Init+0x304>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4013      	ands	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003830 <HAL_GPIO_Init+0x304>)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037cc:	4b18      	ldr	r3, [pc, #96]	@ (8003830 <HAL_GPIO_Init+0x304>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003830 <HAL_GPIO_Init+0x304>)
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3301      	adds	r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	f67f aea2 	bls.w	8003548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	3724      	adds	r7, #36	@ 0x24
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40013800 	.word	0x40013800
 800381c:	40020000 	.word	0x40020000
 8003820:	40020400 	.word	0x40020400
 8003824:	40020800 	.word	0x40020800
 8003828:	40020c00 	.word	0x40020c00
 800382c:	40021000 	.word	0x40021000
 8003830:	40013c00 	.word	0x40013c00

08003834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e12b      	b.n	8003a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fb08 	bl	8002e70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	@ 0x24
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003898:	f001 fc20 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 800389c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	4a81      	ldr	r2, [pc, #516]	@ (8003aa8 <HAL_I2C_Init+0x274>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d807      	bhi.n	80038b8 <HAL_I2C_Init+0x84>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a80      	ldr	r2, [pc, #512]	@ (8003aac <HAL_I2C_Init+0x278>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bf94      	ite	ls
 80038b0:	2301      	movls	r3, #1
 80038b2:	2300      	movhi	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	e006      	b.n	80038c6 <HAL_I2C_Init+0x92>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab0 <HAL_I2C_Init+0x27c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	bf94      	ite	ls
 80038c0:	2301      	movls	r3, #1
 80038c2:	2300      	movhi	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e0e7      	b.n	8003a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a78      	ldr	r2, [pc, #480]	@ (8003ab4 <HAL_I2C_Init+0x280>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a6a      	ldr	r2, [pc, #424]	@ (8003aa8 <HAL_I2C_Init+0x274>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d802      	bhi.n	8003908 <HAL_I2C_Init+0xd4>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	3301      	adds	r3, #1
 8003906:	e009      	b.n	800391c <HAL_I2C_Init+0xe8>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800390e:	fb02 f303 	mul.w	r3, r2, r3
 8003912:	4a69      	ldr	r2, [pc, #420]	@ (8003ab8 <HAL_I2C_Init+0x284>)
 8003914:	fba2 2303 	umull	r2, r3, r2, r3
 8003918:	099b      	lsrs	r3, r3, #6
 800391a:	3301      	adds	r3, #1
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800392e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	495c      	ldr	r1, [pc, #368]	@ (8003aa8 <HAL_I2C_Init+0x274>)
 8003938:	428b      	cmp	r3, r1
 800393a:	d819      	bhi.n	8003970 <HAL_I2C_Init+0x13c>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1e59      	subs	r1, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	fbb1 f3f3 	udiv	r3, r1, r3
 800394a:	1c59      	adds	r1, r3, #1
 800394c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003950:	400b      	ands	r3, r1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <HAL_I2C_Init+0x138>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1e59      	subs	r1, r3, #1
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	fbb1 f3f3 	udiv	r3, r1, r3
 8003964:	3301      	adds	r3, #1
 8003966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396a:	e051      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 800396c:	2304      	movs	r3, #4
 800396e:	e04f      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d111      	bne.n	800399c <HAL_I2C_Init+0x168>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1e58      	subs	r0, r3, #1
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	440b      	add	r3, r1
 8003986:	fbb0 f3f3 	udiv	r3, r0, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	e012      	b.n	80039c2 <HAL_I2C_Init+0x18e>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	1e58      	subs	r0, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	0099      	lsls	r1, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80039b2:	3301      	adds	r3, #1
 80039b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf0c      	ite	eq
 80039bc:	2301      	moveq	r3, #1
 80039be:	2300      	movne	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Init+0x196>
 80039c6:	2301      	movs	r3, #1
 80039c8:	e022      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10e      	bne.n	80039f0 <HAL_I2C_Init+0x1bc>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1e58      	subs	r0, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6859      	ldr	r1, [r3, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	440b      	add	r3, r1
 80039e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039ee:	e00f      	b.n	8003a10 <HAL_I2C_Init+0x1dc>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1e58      	subs	r0, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	0099      	lsls	r1, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	6809      	ldr	r1, [r1, #0]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69da      	ldr	r2, [r3, #28]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	430a      	orrs	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6911      	ldr	r1, [r2, #16]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	000186a0 	.word	0x000186a0
 8003aac:	001e847f 	.word	0x001e847f
 8003ab0:	003d08ff 	.word	0x003d08ff
 8003ab4:	431bde83 	.word	0x431bde83
 8003ab8:	10624dd3 	.word	0x10624dd3

08003abc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	4608      	mov	r0, r1
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4603      	mov	r3, r0
 8003acc:	817b      	strh	r3, [r7, #10]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	813b      	strh	r3, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ad6:	f7ff fc37 	bl	8003348 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	f040 80d9 	bne.w	8003c9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	2319      	movs	r3, #25
 8003af0:	2201      	movs	r2, #1
 8003af2:	496d      	ldr	r1, [pc, #436]	@ (8003ca8 <HAL_I2C_Mem_Write+0x1ec>)
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fc8b 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0cc      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_I2C_Mem_Write+0x56>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e0c5      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d007      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2221      	movs	r2, #33	@ 0x21
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2240      	movs	r2, #64	@ 0x40
 8003b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a3a      	ldr	r2, [r7, #32]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a4d      	ldr	r2, [pc, #308]	@ (8003cac <HAL_I2C_Mem_Write+0x1f0>)
 8003b78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b7a:	88f8      	ldrh	r0, [r7, #6]
 8003b7c:	893a      	ldrh	r2, [r7, #8]
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	4603      	mov	r3, r0
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fac2 	bl	8004114 <I2C_RequestMemoryWrite>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d052      	beq.n	8003c3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e081      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fd50 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d107      	bne.n	8003bc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e06b      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be0:	3b01      	subs	r3, #1
 8003be2:	b29a      	uxth	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0304 	and.w	r3, r3, #4
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d11b      	bne.n	8003c3c <HAL_I2C_Mem_Write+0x180>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d017      	beq.n	8003c3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c10:	781a      	ldrb	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1aa      	bne.n	8003b9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fd43 	bl	80046d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d107      	bne.n	8003c6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e016      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	e000      	b.n	8003c9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c9c:	2302      	movs	r3, #2
  }
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	00100002 	.word	0x00100002
 8003cac:	ffff0000 	.word	0xffff0000

08003cb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	@ 0x30
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cca:	f7ff fb3d 	bl	8003348 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	f040 8214 	bne.w	8004106 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2319      	movs	r3, #25
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	497b      	ldr	r1, [pc, #492]	@ (8003ed4 <HAL_I2C_Mem_Read+0x224>)
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fb91 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e207      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x56>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e200      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d007      	beq.n	8003d2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2222      	movs	r2, #34	@ 0x22
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2240      	movs	r2, #64	@ 0x40
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ed8 <HAL_I2C_Mem_Read+0x228>)
 8003d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d6e:	88f8      	ldrh	r0, [r7, #6]
 8003d70:	893a      	ldrh	r2, [r7, #8]
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d76:	9301      	str	r3, [sp, #4]
 8003d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa5e 	bl	8004240 <I2C_RequestMemoryRead>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e1bc      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d113      	bne.n	8003dbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	e190      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d11b      	bne.n	8003dfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	e170      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d11b      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	e150      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e54:	e144      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	f200 80f1 	bhi.w	8004042 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d123      	bne.n	8003eb0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fc79 	bl	8004764 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e145      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003eae:	e117      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d14e      	bne.n	8003f56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	4906      	ldr	r1, [pc, #24]	@ (8003edc <HAL_I2C_Mem_Read+0x22c>)
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 faa4 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e11a      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
 8003ed2:	bf00      	nop
 8003ed4:	00100002 	.word	0x00100002
 8003ed8:	ffff0000 	.word	0xffff0000
 8003edc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f54:	e0c4      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	496c      	ldr	r1, [pc, #432]	@ (8004110 <HAL_I2C_Mem_Read+0x460>)
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 fa55 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0cb      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	1c5a      	adds	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4955      	ldr	r1, [pc, #340]	@ (8004110 <HAL_I2C_Mem_Read+0x460>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fa27 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e09d      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004036:	b29b      	uxth	r3, r3
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004040:	e04e      	b.n	80040e0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004044:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fb8c 	bl	8004764 <I2C_WaitOnRXNEFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e058      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b04      	cmp	r3, #4
 8004094:	d124      	bne.n	80040e0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	2b03      	cmp	r3, #3
 800409c:	d107      	bne.n	80040ae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b29a      	uxth	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f aeb6 	bne.w	8003e56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
  }
}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	@ 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	00010004 	.word	0x00010004

08004114 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	4608      	mov	r0, r1
 800411e:	4611      	mov	r1, r2
 8004120:	461a      	mov	r2, r3
 8004122:	4603      	mov	r3, r0
 8004124:	817b      	strh	r3, [r7, #10]
 8004126:	460b      	mov	r3, r1
 8004128:	813b      	strh	r3, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800413c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2200      	movs	r2, #0
 8004146:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f960 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00d      	beq.n	8004172 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004164:	d103      	bne.n	800416e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e05f      	b.n	8004232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	b2db      	uxtb	r3, r3
 8004176:	461a      	mov	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004180:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	492d      	ldr	r1, [pc, #180]	@ (800423c <I2C_RequestMemoryWrite+0x128>)
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f9bb 	bl	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e04c      	b.n	8004232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b0:	6a39      	ldr	r1, [r7, #32]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fa46 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00d      	beq.n	80041da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d107      	bne.n	80041d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e02b      	b.n	8004232 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	e021      	b.n	8004230 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fc:	6a39      	ldr	r1, [r7, #32]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fa20 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00d      	beq.n	8004226 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420e:	2b04      	cmp	r3, #4
 8004210:	d107      	bne.n	8004222 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004220:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e005      	b.n	8004232 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004226:	893b      	ldrh	r3, [r7, #8]
 8004228:	b2da      	uxtb	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	00010002 	.word	0x00010002

08004240 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b088      	sub	sp, #32
 8004244:	af02      	add	r7, sp, #8
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	4608      	mov	r0, r1
 800424a:	4611      	mov	r1, r2
 800424c:	461a      	mov	r2, r3
 800424e:	4603      	mov	r3, r0
 8004250:	817b      	strh	r3, [r7, #10]
 8004252:	460b      	mov	r3, r1
 8004254:	813b      	strh	r3, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004268:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004278:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2200      	movs	r2, #0
 8004282:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f8c2 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042a0:	d103      	bne.n	80042aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e0aa      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042ae:	897b      	ldrh	r3, [r7, #10]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	4952      	ldr	r1, [pc, #328]	@ (800440c <I2C_RequestMemoryRead+0x1cc>)
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 f91d 	bl	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e097      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ec:	6a39      	ldr	r1, [r7, #32]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f9a8 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d107      	bne.n	8004312 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004310:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e076      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d105      	bne.n	8004328 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e021      	b.n	800436c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004328:	893b      	ldrh	r3, [r7, #8]
 800432a:	0a1b      	lsrs	r3, r3, #8
 800432c:	b29b      	uxth	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004338:	6a39      	ldr	r1, [r7, #32]
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f982 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	2b04      	cmp	r3, #4
 800434c:	d107      	bne.n	800435e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e050      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004362:	893b      	ldrh	r3, [r7, #8]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	6a39      	ldr	r1, [r7, #32]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f967 	bl	8004644 <I2C_WaitOnTXEFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	2b04      	cmp	r3, #4
 8004382:	d107      	bne.n	8004394 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004392:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e035      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f82b 	bl	8004410 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ce:	d103      	bne.n	80043d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e013      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043dc:	897b      	ldrh	r3, [r7, #10]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	6a3a      	ldr	r2, [r7, #32]
 80043f0:	4906      	ldr	r1, [pc, #24]	@ (800440c <I2C_RequestMemoryRead+0x1cc>)
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f886 	bl	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	00010002 	.word	0x00010002

08004410 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	603b      	str	r3, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004420:	e048      	b.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004428:	d044      	beq.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442a:	f7fe ff8d 	bl	8003348 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d302      	bcc.n	8004440 <I2C_WaitOnFlagUntilTimeout+0x30>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d139      	bne.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d10d      	bne.n	8004466 <I2C_WaitOnFlagUntilTimeout+0x56>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	43da      	mvns	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4013      	ands	r3, r2
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	e00c      	b.n	8004480 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	43da      	mvns	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	b29b      	uxth	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d116      	bne.n	80044b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	f043 0220 	orr.w	r2, r3, #32
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e023      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d10d      	bne.n	80044da <I2C_WaitOnFlagUntilTimeout+0xca>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	43da      	mvns	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4013      	ands	r3, r2
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	bf0c      	ite	eq
 80044d0:	2301      	moveq	r3, #1
 80044d2:	2300      	movne	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	e00c      	b.n	80044f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	43da      	mvns	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4013      	ands	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	bf0c      	ite	eq
 80044ec:	2301      	moveq	r3, #1
 80044ee:	2300      	movne	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	461a      	mov	r2, r3
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d093      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004512:	e071      	b.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004522:	d123      	bne.n	800456c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004532:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800453c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	f043 0204 	orr.w	r2, r3, #4
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e067      	b.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	d041      	beq.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004574:	f7fe fee8 	bl	8003348 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	d302      	bcc.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d136      	bne.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10c      	bne.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e00b      	b.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d016      	beq.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e021      	b.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10c      	bne.n	800461c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	e00b      	b.n	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	f47f af6d 	bne.w	8004514 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004650:	e034      	b.n	80046bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 f8e3 	bl	800481e <I2C_IsAcknowledgeFailed>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e034      	b.n	80046cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d028      	beq.n	80046bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466a:	f7fe fe6d 	bl	8003348 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d302      	bcc.n	8004680 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800468a:	2b80      	cmp	r3, #128	@ 0x80
 800468c:	d016      	beq.n	80046bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	f043 0220 	orr.w	r2, r3, #32
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e007      	b.n	80046cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b80      	cmp	r3, #128	@ 0x80
 80046c8:	d1c3      	bne.n	8004652 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e0:	e034      	b.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	f000 f89b 	bl	800481e <I2C_IsAcknowledgeFailed>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e034      	b.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d028      	beq.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fa:	f7fe fe25 	bl	8003348 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	429a      	cmp	r2, r3
 8004708:	d302      	bcc.n	8004710 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11d      	bne.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d016      	beq.n	800474c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	f043 0220 	orr.w	r2, r3, #32
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e007      	b.n	800475c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d1c3      	bne.n	80046e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004770:	e049      	b.n	8004806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d119      	bne.n	80047b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0210 	mvn.w	r2, #16
 8004788:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e030      	b.n	8004816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b4:	f7fe fdc8 	bl	8003348 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d302      	bcc.n	80047ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d11d      	bne.n	8004806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b40      	cmp	r3, #64	@ 0x40
 80047d6:	d016      	beq.n	8004806 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e007      	b.n	8004816 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004810:	2b40      	cmp	r3, #64	@ 0x40
 8004812:	d1ae      	bne.n	8004772 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004834:	d11b      	bne.n	800486e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800483e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	f043 0204 	orr.w	r2, r3, #4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e267      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d075      	beq.n	8004986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800489a:	4b88      	ldr	r3, [pc, #544]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	d00c      	beq.n	80048c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a6:	4b85      	ldr	r3, [pc, #532]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d112      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b2:	4b82      	ldr	r3, [pc, #520]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048be:	d10b      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c0:	4b7e      	ldr	r3, [pc, #504]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d05b      	beq.n	8004984 <HAL_RCC_OscConfig+0x108>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d157      	bne.n	8004984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e242      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048e0:	d106      	bne.n	80048f0 <HAL_RCC_OscConfig+0x74>
 80048e2:	4b76      	ldr	r3, [pc, #472]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a75      	ldr	r2, [pc, #468]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x98>
 80048fa:	4b70      	ldr	r3, [pc, #448]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6f      	ldr	r2, [pc, #444]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b6d      	ldr	r3, [pc, #436]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6c      	ldr	r2, [pc, #432]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0xb0>
 8004914:	4b69      	ldr	r3, [pc, #420]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a68      	ldr	r2, [pc, #416]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a65      	ldr	r2, [pc, #404]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fe fd08 	bl	8003348 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fe fd04 	bl	8003348 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	@ 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e207      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b5b      	ldr	r3, [pc, #364]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0xc0>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fe fcf4 	bl	8003348 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fe fcf0 	bl	8003348 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1f3      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	4b51      	ldr	r3, [pc, #324]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0xe8>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d063      	beq.n	8004a5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004992:	4b4a      	ldr	r3, [pc, #296]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800499e:	4b47      	ldr	r3, [pc, #284]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d11c      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049aa:	4b44      	ldr	r3, [pc, #272]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d116      	bne.n	80049e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b6:	4b41      	ldr	r3, [pc, #260]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d001      	beq.n	80049ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e1c7      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ce:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4937      	ldr	r1, [pc, #220]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e2:	e03a      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ec:	4b34      	ldr	r3, [pc, #208]	@ (8004ac0 <HAL_RCC_OscConfig+0x244>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fe fca9 	bl	8003348 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fa:	f7fe fca5 	bl	8003348 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e1a8      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a18:	4b28      	ldr	r3, [pc, #160]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4925      	ldr	r1, [pc, #148]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	600b      	str	r3, [r1, #0]
 8004a2c:	e015      	b.n	8004a5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ac0 <HAL_RCC_OscConfig+0x244>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a34:	f7fe fc88 	bl	8003348 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3c:	f7fe fc84 	bl	8003348 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e187      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f0      	bne.n	8004a3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d036      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d016      	beq.n	8004a9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a74:	f7fe fc68 	bl	8003348 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a7c:	f7fe fc64 	bl	8003348 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e167      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <HAL_RCC_OscConfig+0x240>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x200>
 8004a9a:	e01b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <HAL_RCC_OscConfig+0x248>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa2:	f7fe fc51 	bl	8003348 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	e00e      	b.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fe fc4d 	bl	8003348 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d907      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e150      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	42470000 	.word	0x42470000
 8004ac4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ea      	bne.n	8004aaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8097 	beq.w	8004c10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b81      	ldr	r3, [pc, #516]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10f      	bne.n	8004b12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	4a7c      	ldr	r2, [pc, #496]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b02:	4b7a      	ldr	r3, [pc, #488]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b12:	4b77      	ldr	r3, [pc, #476]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d118      	bne.n	8004b50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1e:	4b74      	ldr	r3, [pc, #464]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a73      	ldr	r2, [pc, #460]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fc0d 	bl	8003348 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b32:	f7fe fc09 	bl	8003348 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e10c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b44:	4b6a      	ldr	r3, [pc, #424]	@ (8004cf0 <HAL_RCC_OscConfig+0x474>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_OscConfig+0x2ea>
 8004b58:	4b64      	ldr	r3, [pc, #400]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	4a63      	ldr	r2, [pc, #396]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b64:	e01c      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b05      	cmp	r3, #5
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x30c>
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b72:	4a5e      	ldr	r2, [pc, #376]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b74:	f043 0304 	orr.w	r3, r3, #4
 8004b78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0x324>
 8004b88:	4b58      	ldr	r3, [pc, #352]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8c:	4a57      	ldr	r2, [pc, #348]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b94:	4b55      	ldr	r3, [pc, #340]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b98:	4a54      	ldr	r2, [pc, #336]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 0304 	bic.w	r3, r3, #4
 8004b9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fe fbce 	bl	8003348 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bae:	e00a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fbca 	bl	8003348 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e0cb      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	4b49      	ldr	r3, [pc, #292]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0ee      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x334>
 8004bd2:	e014      	b.n	8004bfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd4:	f7fe fbb8 	bl	8003348 <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bdc:	f7fe fbb4 	bl	8003348 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0b5      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ee      	bne.n	8004bdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d105      	bne.n	8004c10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c04:	4b39      	ldr	r3, [pc, #228]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c08:	4a38      	ldr	r2, [pc, #224]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a1 	beq.w	8004d5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c1a:	4b34      	ldr	r3, [pc, #208]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d05c      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d141      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2e:	4b31      	ldr	r3, [pc, #196]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c34:	f7fe fb88 	bl	8003348 <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fe fb84 	bl	8003348 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e087      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b27      	ldr	r3, [pc, #156]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	491b      	ldr	r1, [pc, #108]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c84:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c8a:	f7fe fb5d 	bl	8003348 <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c92:	f7fe fb59 	bl	8003348 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e05c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca4:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x416>
 8004cb0:	e054      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb2:	4b10      	ldr	r3, [pc, #64]	@ (8004cf4 <HAL_RCC_OscConfig+0x478>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fe fb46 	bl	8003348 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fe fb42 	bl	8003348 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e045      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd2:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <HAL_RCC_OscConfig+0x470>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f0      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x444>
 8004cde:	e03d      	b.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e038      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	40007000 	.word	0x40007000
 8004cf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d68 <HAL_RCC_OscConfig+0x4ec>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d028      	beq.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0cc      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d80:	4b68      	ldr	r3, [pc, #416]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d90c      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b65      	ldr	r3, [pc, #404]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d044      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d119      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e067      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4a:	4b37      	ldr	r3, [pc, #220]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f023 0203 	bic.w	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	4934      	ldr	r1, [pc, #208]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e5c:	f7fe fa74 	bl	8003348 <HAL_GetTick>
 8004e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e64:	f7fe fa70 	bl	8003348 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e04f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 020c 	and.w	r2, r3, #12
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d1eb      	bne.n	8004e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8c:	4b25      	ldr	r3, [pc, #148]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20c      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9a:	4b22      	ldr	r3, [pc, #136]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ede:	4b12      	ldr	r3, [pc, #72]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f821 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	490a      	ldr	r1, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x1c0>)
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	@ (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	@ (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe f9d4 	bl	80032c0 <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	080087dc 	.word	0x080087dc
 8004f30:	20000008 	.word	0x20000008
 8004f34:	2000000c 	.word	0x2000000c

08004f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f3c:	b090      	sub	sp, #64	@ 0x40
 8004f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f50:	4b59      	ldr	r3, [pc, #356]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d00d      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	f200 80a1 	bhi.w	80050a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x34>
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f6a:	e09b      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f6c:	4b53      	ldr	r3, [pc, #332]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x184>)
 8004f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f70:	e09b      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f72:	4b53      	ldr	r3, [pc, #332]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004f76:	e098      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f78:	4b4f      	ldr	r3, [pc, #316]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f82:	4b4d      	ldr	r3, [pc, #308]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d028      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	099b      	lsrs	r3, r3, #6
 8004f94:	2200      	movs	r2, #0
 8004f96:	623b      	str	r3, [r7, #32]
 8004f98:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4b47      	ldr	r3, [pc, #284]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fa4:	fb03 f201 	mul.w	r2, r3, r1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	fb00 f303 	mul.w	r3, r0, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	4a43      	ldr	r2, [pc, #268]	@ (80050c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fb2:	fba0 1202 	umull	r1, r2, r0, r2
 8004fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fb8:	460a      	mov	r2, r1
 8004fba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004fbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fbe:	4413      	add	r3, r2
 8004fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	61fa      	str	r2, [r7, #28]
 8004fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004fd2:	f7fb fe41 	bl	8000c58 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4613      	mov	r3, r2
 8004fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fde:	e053      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe0:	4b35      	ldr	r3, [pc, #212]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	099b      	lsrs	r3, r3, #6
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	617a      	str	r2, [r7, #20]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ff2:	f04f 0b00 	mov.w	fp, #0
 8004ff6:	4652      	mov	r2, sl
 8004ff8:	465b      	mov	r3, fp
 8004ffa:	f04f 0000 	mov.w	r0, #0
 8004ffe:	f04f 0100 	mov.w	r1, #0
 8005002:	0159      	lsls	r1, r3, #5
 8005004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005008:	0150      	lsls	r0, r2, #5
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	ebb2 080a 	subs.w	r8, r2, sl
 8005012:	eb63 090b 	sbc.w	r9, r3, fp
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005022:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005026:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800502a:	ebb2 0408 	subs.w	r4, r2, r8
 800502e:	eb63 0509 	sbc.w	r5, r3, r9
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	00eb      	lsls	r3, r5, #3
 800503c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005040:	00e2      	lsls	r2, r4, #3
 8005042:	4614      	mov	r4, r2
 8005044:	461d      	mov	r5, r3
 8005046:	eb14 030a 	adds.w	r3, r4, sl
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	eb45 030b 	adc.w	r3, r5, fp
 8005050:	607b      	str	r3, [r7, #4]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800505e:	4629      	mov	r1, r5
 8005060:	028b      	lsls	r3, r1, #10
 8005062:	4621      	mov	r1, r4
 8005064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005068:	4621      	mov	r1, r4
 800506a:	028a      	lsls	r2, r1, #10
 800506c:	4610      	mov	r0, r2
 800506e:	4619      	mov	r1, r3
 8005070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005072:	2200      	movs	r2, #0
 8005074:	60bb      	str	r3, [r7, #8]
 8005076:	60fa      	str	r2, [r7, #12]
 8005078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800507c:	f7fb fdec 	bl	8000c58 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4613      	mov	r3, r2
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005098:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050a2:	e002      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b05      	ldr	r3, [pc, #20]	@ (80050bc <HAL_RCC_GetSysClockFreq+0x184>)
 80050a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3740      	adds	r7, #64	@ 0x40
 80050b0:	46bd      	mov	sp, r7
 80050b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800
 80050bc:	00f42400 	.word	0x00f42400
 80050c0:	017d7840 	.word	0x017d7840

080050c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c8:	4b03      	ldr	r3, [pc, #12]	@ (80050d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050ca:	681b      	ldr	r3, [r3, #0]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000008 	.word	0x20000008

080050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e0:	f7ff fff0 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0a9b      	lsrs	r3, r3, #10
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	@ (8005100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	080087ec 	.word	0x080087ec

08005104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005108:	f7ff ffdc 	bl	80050c4 <HAL_RCC_GetHCLKFreq>
 800510c:	4602      	mov	r2, r0
 800510e:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	0b5b      	lsrs	r3, r3, #13
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	4903      	ldr	r1, [pc, #12]	@ (8005128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800511a:	5ccb      	ldrb	r3, [r1, r3]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40023800 	.word	0x40023800
 8005128:	080087ec 	.word	0x080087ec

0800512c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e042      	b.n	80051c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fd ff18 	bl	8002f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	@ 0x24
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800516e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f973 	bl	800545c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af02      	add	r7, sp, #8
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	4613      	mov	r3, r2
 80051da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b20      	cmp	r3, #32
 80051ea:	d175      	bne.n	80052d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <HAL_UART_Transmit+0x2c>
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e06e      	b.n	80052da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2221      	movs	r2, #33	@ 0x21
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800520a:	f7fe f89d 	bl	8003348 <HAL_GetTick>
 800520e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005224:	d108      	bne.n	8005238 <HAL_UART_Transmit+0x6c>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	e003      	b.n	8005240 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005240:	e02e      	b.n	80052a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	@ 0x80
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 f848 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d005      	beq.n	8005264 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e03a      	b.n	80052da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005278:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	3302      	adds	r3, #2
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e007      	b.n	8005292 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	781a      	ldrb	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	3301      	adds	r3, #1
 8005290:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1cb      	bne.n	8005242 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	2140      	movs	r1, #64	@ 0x40
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f814 	bl	80052e2 <UART_WaitOnFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	e000      	b.n	80052da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3720      	adds	r7, #32
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	603b      	str	r3, [r7, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f2:	e03b      	b.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d037      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fe f824 	bl	8003348 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	429a      	cmp	r2, r3
 800530a:	d302      	bcc.n	8005312 <UART_WaitOnFlagUntilTimeout+0x30>
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e03a      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d023      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d020      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b40      	cmp	r3, #64	@ 0x40
 800532e:	d01d      	beq.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b08      	cmp	r3, #8
 800533c:	d116      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800533e:	2300      	movs	r3, #0
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f81d 	bl	8005394 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2208      	movs	r2, #8
 800535e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e00f      	b.n	800538c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	4013      	ands	r3, r2
 8005376:	68ba      	ldr	r2, [r7, #8]
 8005378:	429a      	cmp	r2, r3
 800537a:	bf0c      	ite	eq
 800537c:	2301      	moveq	r3, #1
 800537e:	2300      	movne	r3, #0
 8005380:	b2db      	uxtb	r3, r3
 8005382:	461a      	mov	r2, r3
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	429a      	cmp	r2, r3
 8005388:	d0b4      	beq.n	80052f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3718      	adds	r7, #24
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b095      	sub	sp, #84	@ 0x54
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e5      	bne.n	800539c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3314      	adds	r3, #20
 80053d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f023 0301 	bic.w	r3, r3, #1
 80053e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e5      	bne.n	80053d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005408:	2b01      	cmp	r3, #1
 800540a:	d119      	bne.n	8005440 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	60bb      	str	r3, [r7, #8]
   return(result);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f023 0310 	bic.w	r3, r3, #16
 8005422:	647b      	str	r3, [r7, #68]	@ 0x44
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330c      	adds	r3, #12
 800542a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800542c:	61ba      	str	r2, [r7, #24]
 800542e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6979      	ldr	r1, [r7, #20]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	613b      	str	r3, [r7, #16]
   return(result);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e5      	bne.n	800540c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800544e:	bf00      	nop
 8005450:	3754      	adds	r7, #84	@ 0x54
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800545c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005460:	b0c0      	sub	sp, #256	@ 0x100
 8005462:	af00      	add	r7, sp, #0
 8005464:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	68d9      	ldr	r1, [r3, #12]
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	ea40 0301 	orr.w	r3, r0, r1
 8005484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	431a      	orrs	r2, r3
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	431a      	orrs	r2, r3
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054b4:	f021 010c 	bic.w	r1, r1, #12
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054c2:	430b      	orrs	r3, r1
 80054c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d6:	6999      	ldr	r1, [r3, #24]
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	ea40 0301 	orr.w	r3, r0, r1
 80054e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005728 <UART_SetConfig+0x2cc>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d005      	beq.n	80054fc <UART_SetConfig+0xa0>
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b8d      	ldr	r3, [pc, #564]	@ (800572c <UART_SetConfig+0x2d0>)
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d104      	bne.n	8005506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054fc:	f7ff fe02 	bl	8005104 <HAL_RCC_GetPCLK2Freq>
 8005500:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005504:	e003      	b.n	800550e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005506:	f7ff fde9 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 800550a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005518:	f040 810c 	bne.w	8005734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800551c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005520:	2200      	movs	r2, #0
 8005522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005526:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800552a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800552e:	4622      	mov	r2, r4
 8005530:	462b      	mov	r3, r5
 8005532:	1891      	adds	r1, r2, r2
 8005534:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005536:	415b      	adcs	r3, r3
 8005538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800553a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800553e:	4621      	mov	r1, r4
 8005540:	eb12 0801 	adds.w	r8, r2, r1
 8005544:	4629      	mov	r1, r5
 8005546:	eb43 0901 	adc.w	r9, r3, r1
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800555a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800555e:	4690      	mov	r8, r2
 8005560:	4699      	mov	r9, r3
 8005562:	4623      	mov	r3, r4
 8005564:	eb18 0303 	adds.w	r3, r8, r3
 8005568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800556c:	462b      	mov	r3, r5
 800556e:	eb49 0303 	adc.w	r3, r9, r3
 8005572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005582:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800558a:	460b      	mov	r3, r1
 800558c:	18db      	adds	r3, r3, r3
 800558e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005590:	4613      	mov	r3, r2
 8005592:	eb42 0303 	adc.w	r3, r2, r3
 8005596:	657b      	str	r3, [r7, #84]	@ 0x54
 8005598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800559c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055a0:	f7fb fb5a 	bl	8000c58 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4b61      	ldr	r3, [pc, #388]	@ (8005730 <UART_SetConfig+0x2d4>)
 80055aa:	fba3 2302 	umull	r2, r3, r3, r2
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	011c      	lsls	r4, r3, #4
 80055b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b6:	2200      	movs	r2, #0
 80055b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055c4:	4642      	mov	r2, r8
 80055c6:	464b      	mov	r3, r9
 80055c8:	1891      	adds	r1, r2, r2
 80055ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055cc:	415b      	adcs	r3, r3
 80055ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055d4:	4641      	mov	r1, r8
 80055d6:	eb12 0a01 	adds.w	sl, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb43 0b01 	adc.w	fp, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f4:	4692      	mov	sl, r2
 80055f6:	469b      	mov	fp, r3
 80055f8:	4643      	mov	r3, r8
 80055fa:	eb1a 0303 	adds.w	r3, sl, r3
 80055fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005602:	464b      	mov	r3, r9
 8005604:	eb4b 0303 	adc.w	r3, fp, r3
 8005608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005618:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800561c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005620:	460b      	mov	r3, r1
 8005622:	18db      	adds	r3, r3, r3
 8005624:	643b      	str	r3, [r7, #64]	@ 0x40
 8005626:	4613      	mov	r3, r2
 8005628:	eb42 0303 	adc.w	r3, r2, r3
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
 800562e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005636:	f7fb fb0f 	bl	8000c58 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4611      	mov	r1, r2
 8005640:	4b3b      	ldr	r3, [pc, #236]	@ (8005730 <UART_SetConfig+0x2d4>)
 8005642:	fba3 2301 	umull	r2, r3, r3, r1
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	2264      	movs	r2, #100	@ 0x64
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	1acb      	subs	r3, r1, r3
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005656:	4b36      	ldr	r3, [pc, #216]	@ (8005730 <UART_SetConfig+0x2d4>)
 8005658:	fba3 2302 	umull	r2, r3, r3, r2
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005664:	441c      	add	r4, r3
 8005666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005670:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	1891      	adds	r1, r2, r2
 800567e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005680:	415b      	adcs	r3, r3
 8005682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005688:	4641      	mov	r1, r8
 800568a:	1851      	adds	r1, r2, r1
 800568c:	6339      	str	r1, [r7, #48]	@ 0x30
 800568e:	4649      	mov	r1, r9
 8005690:	414b      	adcs	r3, r1
 8005692:	637b      	str	r3, [r7, #52]	@ 0x34
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	f04f 0300 	mov.w	r3, #0
 800569c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056a0:	4659      	mov	r1, fp
 80056a2:	00cb      	lsls	r3, r1, #3
 80056a4:	4651      	mov	r1, sl
 80056a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056aa:	4651      	mov	r1, sl
 80056ac:	00ca      	lsls	r2, r1, #3
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	4603      	mov	r3, r0
 80056b4:	4642      	mov	r2, r8
 80056b6:	189b      	adds	r3, r3, r2
 80056b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056bc:	464b      	mov	r3, r9
 80056be:	460a      	mov	r2, r1
 80056c0:	eb42 0303 	adc.w	r3, r2, r3
 80056c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056dc:	460b      	mov	r3, r1
 80056de:	18db      	adds	r3, r3, r3
 80056e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e2:	4613      	mov	r3, r2
 80056e4:	eb42 0303 	adc.w	r3, r2, r3
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056f2:	f7fb fab1 	bl	8000c58 <__aeabi_uldivmod>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005730 <UART_SetConfig+0x2d4>)
 80056fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005700:	095b      	lsrs	r3, r3, #5
 8005702:	2164      	movs	r1, #100	@ 0x64
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	3332      	adds	r3, #50	@ 0x32
 800570e:	4a08      	ldr	r2, [pc, #32]	@ (8005730 <UART_SetConfig+0x2d4>)
 8005710:	fba2 2303 	umull	r2, r3, r2, r3
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	f003 0207 	and.w	r2, r3, #7
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4422      	add	r2, r4
 8005722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005724:	e106      	b.n	8005934 <UART_SetConfig+0x4d8>
 8005726:	bf00      	nop
 8005728:	40011000 	.word	0x40011000
 800572c:	40011400 	.word	0x40011400
 8005730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800573e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005746:	4642      	mov	r2, r8
 8005748:	464b      	mov	r3, r9
 800574a:	1891      	adds	r1, r2, r2
 800574c:	6239      	str	r1, [r7, #32]
 800574e:	415b      	adcs	r3, r3
 8005750:	627b      	str	r3, [r7, #36]	@ 0x24
 8005752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005756:	4641      	mov	r1, r8
 8005758:	1854      	adds	r4, r2, r1
 800575a:	4649      	mov	r1, r9
 800575c:	eb43 0501 	adc.w	r5, r3, r1
 8005760:	f04f 0200 	mov.w	r2, #0
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	00eb      	lsls	r3, r5, #3
 800576a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800576e:	00e2      	lsls	r2, r4, #3
 8005770:	4614      	mov	r4, r2
 8005772:	461d      	mov	r5, r3
 8005774:	4643      	mov	r3, r8
 8005776:	18e3      	adds	r3, r4, r3
 8005778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800577c:	464b      	mov	r3, r9
 800577e:	eb45 0303 	adc.w	r3, r5, r3
 8005782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057a2:	4629      	mov	r1, r5
 80057a4:	008b      	lsls	r3, r1, #2
 80057a6:	4621      	mov	r1, r4
 80057a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057ac:	4621      	mov	r1, r4
 80057ae:	008a      	lsls	r2, r1, #2
 80057b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057b4:	f7fb fa50 	bl	8000c58 <__aeabi_uldivmod>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4b60      	ldr	r3, [pc, #384]	@ (8005940 <UART_SetConfig+0x4e4>)
 80057be:	fba3 2302 	umull	r2, r3, r3, r2
 80057c2:	095b      	lsrs	r3, r3, #5
 80057c4:	011c      	lsls	r4, r3, #4
 80057c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	1891      	adds	r1, r2, r2
 80057de:	61b9      	str	r1, [r7, #24]
 80057e0:	415b      	adcs	r3, r3
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e8:	4641      	mov	r1, r8
 80057ea:	1851      	adds	r1, r2, r1
 80057ec:	6139      	str	r1, [r7, #16]
 80057ee:	4649      	mov	r1, r9
 80057f0:	414b      	adcs	r3, r1
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005800:	4659      	mov	r1, fp
 8005802:	00cb      	lsls	r3, r1, #3
 8005804:	4651      	mov	r1, sl
 8005806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800580a:	4651      	mov	r1, sl
 800580c:	00ca      	lsls	r2, r1, #3
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	4603      	mov	r3, r0
 8005814:	4642      	mov	r2, r8
 8005816:	189b      	adds	r3, r3, r2
 8005818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800581c:	464b      	mov	r3, r9
 800581e:	460a      	mov	r2, r1
 8005820:	eb42 0303 	adc.w	r3, r2, r3
 8005824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005832:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005840:	4649      	mov	r1, r9
 8005842:	008b      	lsls	r3, r1, #2
 8005844:	4641      	mov	r1, r8
 8005846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584a:	4641      	mov	r1, r8
 800584c:	008a      	lsls	r2, r1, #2
 800584e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005852:	f7fb fa01 	bl	8000c58 <__aeabi_uldivmod>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4611      	mov	r1, r2
 800585c:	4b38      	ldr	r3, [pc, #224]	@ (8005940 <UART_SetConfig+0x4e4>)
 800585e:	fba3 2301 	umull	r2, r3, r3, r1
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2264      	movs	r2, #100	@ 0x64
 8005866:	fb02 f303 	mul.w	r3, r2, r3
 800586a:	1acb      	subs	r3, r1, r3
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	3332      	adds	r3, #50	@ 0x32
 8005870:	4a33      	ldr	r2, [pc, #204]	@ (8005940 <UART_SetConfig+0x4e4>)
 8005872:	fba2 2303 	umull	r2, r3, r2, r3
 8005876:	095b      	lsrs	r3, r3, #5
 8005878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800587c:	441c      	add	r4, r3
 800587e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005882:	2200      	movs	r2, #0
 8005884:	673b      	str	r3, [r7, #112]	@ 0x70
 8005886:	677a      	str	r2, [r7, #116]	@ 0x74
 8005888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800588c:	4642      	mov	r2, r8
 800588e:	464b      	mov	r3, r9
 8005890:	1891      	adds	r1, r2, r2
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	415b      	adcs	r3, r3
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800589c:	4641      	mov	r1, r8
 800589e:	1851      	adds	r1, r2, r1
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	4649      	mov	r1, r9
 80058a4:	414b      	adcs	r3, r1
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058b4:	4659      	mov	r1, fp
 80058b6:	00cb      	lsls	r3, r1, #3
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058be:	4651      	mov	r1, sl
 80058c0:	00ca      	lsls	r2, r1, #3
 80058c2:	4610      	mov	r0, r2
 80058c4:	4619      	mov	r1, r3
 80058c6:	4603      	mov	r3, r0
 80058c8:	4642      	mov	r2, r8
 80058ca:	189b      	adds	r3, r3, r2
 80058cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ce:	464b      	mov	r3, r9
 80058d0:	460a      	mov	r2, r1
 80058d2:	eb42 0303 	adc.w	r3, r2, r3
 80058d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80058e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058f0:	4649      	mov	r1, r9
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fa:	4641      	mov	r1, r8
 80058fc:	008a      	lsls	r2, r1, #2
 80058fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005902:	f7fb f9a9 	bl	8000c58 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <UART_SetConfig+0x4e4>)
 800590c:	fba3 1302 	umull	r1, r3, r3, r2
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	2164      	movs	r1, #100	@ 0x64
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	3332      	adds	r3, #50	@ 0x32
 800591e:	4a08      	ldr	r2, [pc, #32]	@ (8005940 <UART_SetConfig+0x4e4>)
 8005920:	fba2 2303 	umull	r2, r3, r2, r3
 8005924:	095b      	lsrs	r3, r3, #5
 8005926:	f003 020f 	and.w	r2, r3, #15
 800592a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4422      	add	r2, r4
 8005932:	609a      	str	r2, [r3, #8]
}
 8005934:	bf00      	nop
 8005936:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800593a:	46bd      	mov	sp, r7
 800593c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005940:	51eb851f 	.word	0x51eb851f

08005944 <sqrt>:
 8005944:	b538      	push	{r3, r4, r5, lr}
 8005946:	ed2d 8b02 	vpush	{d8}
 800594a:	ec55 4b10 	vmov	r4, r5, d0
 800594e:	f000 f827 	bl	80059a0 <__ieee754_sqrt>
 8005952:	4622      	mov	r2, r4
 8005954:	462b      	mov	r3, r5
 8005956:	4620      	mov	r0, r4
 8005958:	4629      	mov	r1, r5
 800595a:	eeb0 8a40 	vmov.f32	s16, s0
 800595e:	eef0 8a60 	vmov.f32	s17, s1
 8005962:	f7fb f8eb 	bl	8000b3c <__aeabi_dcmpun>
 8005966:	b990      	cbnz	r0, 800598e <sqrt+0x4a>
 8005968:	2200      	movs	r2, #0
 800596a:	2300      	movs	r3, #0
 800596c:	4620      	mov	r0, r4
 800596e:	4629      	mov	r1, r5
 8005970:	f7fb f8bc 	bl	8000aec <__aeabi_dcmplt>
 8005974:	b158      	cbz	r0, 800598e <sqrt+0x4a>
 8005976:	f001 f823 	bl	80069c0 <__errno>
 800597a:	2321      	movs	r3, #33	@ 0x21
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	2300      	movs	r3, #0
 8005982:	4610      	mov	r0, r2
 8005984:	4619      	mov	r1, r3
 8005986:	f7fa ff69 	bl	800085c <__aeabi_ddiv>
 800598a:	ec41 0b18 	vmov	d8, r0, r1
 800598e:	eeb0 0a48 	vmov.f32	s0, s16
 8005992:	eef0 0a68 	vmov.f32	s1, s17
 8005996:	ecbd 8b02 	vpop	{d8}
 800599a:	bd38      	pop	{r3, r4, r5, pc}

0800599c <atan2f>:
 800599c:	f000 b8d6 	b.w	8005b4c <__ieee754_atan2f>

080059a0 <__ieee754_sqrt>:
 80059a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a4:	4a66      	ldr	r2, [pc, #408]	@ (8005b40 <__ieee754_sqrt+0x1a0>)
 80059a6:	ec55 4b10 	vmov	r4, r5, d0
 80059aa:	43aa      	bics	r2, r5
 80059ac:	462b      	mov	r3, r5
 80059ae:	4621      	mov	r1, r4
 80059b0:	d110      	bne.n	80059d4 <__ieee754_sqrt+0x34>
 80059b2:	4622      	mov	r2, r4
 80059b4:	4620      	mov	r0, r4
 80059b6:	4629      	mov	r1, r5
 80059b8:	f7fa fe26 	bl	8000608 <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4620      	mov	r0, r4
 80059c2:	4629      	mov	r1, r5
 80059c4:	f7fa fc6a 	bl	800029c <__adddf3>
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	ec45 4b10 	vmov	d0, r4, r5
 80059d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	2d00      	cmp	r5, #0
 80059d6:	dc0e      	bgt.n	80059f6 <__ieee754_sqrt+0x56>
 80059d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80059dc:	4322      	orrs	r2, r4
 80059de:	d0f5      	beq.n	80059cc <__ieee754_sqrt+0x2c>
 80059e0:	b19d      	cbz	r5, 8005a0a <__ieee754_sqrt+0x6a>
 80059e2:	4622      	mov	r2, r4
 80059e4:	4620      	mov	r0, r4
 80059e6:	4629      	mov	r1, r5
 80059e8:	f7fa fc56 	bl	8000298 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	f7fa ff34 	bl	800085c <__aeabi_ddiv>
 80059f4:	e7e8      	b.n	80059c8 <__ieee754_sqrt+0x28>
 80059f6:	152a      	asrs	r2, r5, #20
 80059f8:	d115      	bne.n	8005a26 <__ieee754_sqrt+0x86>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e009      	b.n	8005a12 <__ieee754_sqrt+0x72>
 80059fe:	0acb      	lsrs	r3, r1, #11
 8005a00:	3a15      	subs	r2, #21
 8005a02:	0549      	lsls	r1, r1, #21
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0fa      	beq.n	80059fe <__ieee754_sqrt+0x5e>
 8005a08:	e7f7      	b.n	80059fa <__ieee754_sqrt+0x5a>
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	e7fa      	b.n	8005a04 <__ieee754_sqrt+0x64>
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	3001      	adds	r0, #1
 8005a12:	02dc      	lsls	r4, r3, #11
 8005a14:	d5fb      	bpl.n	8005a0e <__ieee754_sqrt+0x6e>
 8005a16:	1e44      	subs	r4, r0, #1
 8005a18:	1b12      	subs	r2, r2, r4
 8005a1a:	f1c0 0420 	rsb	r4, r0, #32
 8005a1e:	fa21 f404 	lsr.w	r4, r1, r4
 8005a22:	4323      	orrs	r3, r4
 8005a24:	4081      	lsls	r1, r0
 8005a26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005a2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a32:	07d2      	lsls	r2, r2, #31
 8005a34:	bf5c      	itt	pl
 8005a36:	005b      	lslpl	r3, r3, #1
 8005a38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005a3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a40:	bf58      	it	pl
 8005a42:	0049      	lslpl	r1, r1, #1
 8005a44:	2600      	movs	r6, #0
 8005a46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005a4a:	107f      	asrs	r7, r7, #1
 8005a4c:	0049      	lsls	r1, r1, #1
 8005a4e:	2016      	movs	r0, #22
 8005a50:	4632      	mov	r2, r6
 8005a52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005a56:	1915      	adds	r5, r2, r4
 8005a58:	429d      	cmp	r5, r3
 8005a5a:	bfde      	ittt	le
 8005a5c:	192a      	addle	r2, r5, r4
 8005a5e:	1b5b      	suble	r3, r3, r5
 8005a60:	1936      	addle	r6, r6, r4
 8005a62:	0fcd      	lsrs	r5, r1, #31
 8005a64:	3801      	subs	r0, #1
 8005a66:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005a6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005a72:	d1f0      	bne.n	8005a56 <__ieee754_sqrt+0xb6>
 8005a74:	4605      	mov	r5, r0
 8005a76:	2420      	movs	r4, #32
 8005a78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	eb0c 0e00 	add.w	lr, ip, r0
 8005a82:	dc02      	bgt.n	8005a8a <__ieee754_sqrt+0xea>
 8005a84:	d113      	bne.n	8005aae <__ieee754_sqrt+0x10e>
 8005a86:	458e      	cmp	lr, r1
 8005a88:	d811      	bhi.n	8005aae <__ieee754_sqrt+0x10e>
 8005a8a:	f1be 0f00 	cmp.w	lr, #0
 8005a8e:	eb0e 000c 	add.w	r0, lr, ip
 8005a92:	da3f      	bge.n	8005b14 <__ieee754_sqrt+0x174>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	db3d      	blt.n	8005b14 <__ieee754_sqrt+0x174>
 8005a98:	f102 0801 	add.w	r8, r2, #1
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	458e      	cmp	lr, r1
 8005aa0:	bf88      	it	hi
 8005aa2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005aa6:	eba1 010e 	sub.w	r1, r1, lr
 8005aaa:	4465      	add	r5, ip
 8005aac:	4642      	mov	r2, r8
 8005aae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005ab2:	3c01      	subs	r4, #1
 8005ab4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005ab8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005abc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005ac0:	d1dc      	bne.n	8005a7c <__ieee754_sqrt+0xdc>
 8005ac2:	4319      	orrs	r1, r3
 8005ac4:	d01b      	beq.n	8005afe <__ieee754_sqrt+0x15e>
 8005ac6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8005b44 <__ieee754_sqrt+0x1a4>
 8005aca:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8005b48 <__ieee754_sqrt+0x1a8>
 8005ace:	e9da 0100 	ldrd	r0, r1, [sl]
 8005ad2:	e9db 2300 	ldrd	r2, r3, [fp]
 8005ad6:	f7fa fbdf 	bl	8000298 <__aeabi_dsub>
 8005ada:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fb f80b 	bl	8000b00 <__aeabi_dcmple>
 8005aea:	b140      	cbz	r0, 8005afe <__ieee754_sqrt+0x15e>
 8005aec:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005af0:	e9da 0100 	ldrd	r0, r1, [sl]
 8005af4:	e9db 2300 	ldrd	r2, r3, [fp]
 8005af8:	d10e      	bne.n	8005b18 <__ieee754_sqrt+0x178>
 8005afa:	3601      	adds	r6, #1
 8005afc:	4625      	mov	r5, r4
 8005afe:	1073      	asrs	r3, r6, #1
 8005b00:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b04:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005b08:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8005b0c:	086b      	lsrs	r3, r5, #1
 8005b0e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8005b12:	e759      	b.n	80059c8 <__ieee754_sqrt+0x28>
 8005b14:	4690      	mov	r8, r2
 8005b16:	e7c1      	b.n	8005a9c <__ieee754_sqrt+0xfc>
 8005b18:	f7fa fbc0 	bl	800029c <__adddf3>
 8005b1c:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b20:	4602      	mov	r2, r0
 8005b22:	460b      	mov	r3, r1
 8005b24:	4640      	mov	r0, r8
 8005b26:	4649      	mov	r1, r9
 8005b28:	f7fa ffe0 	bl	8000aec <__aeabi_dcmplt>
 8005b2c:	b120      	cbz	r0, 8005b38 <__ieee754_sqrt+0x198>
 8005b2e:	1cab      	adds	r3, r5, #2
 8005b30:	bf08      	it	eq
 8005b32:	3601      	addeq	r6, #1
 8005b34:	3502      	adds	r5, #2
 8005b36:	e7e2      	b.n	8005afe <__ieee754_sqrt+0x15e>
 8005b38:	1c6b      	adds	r3, r5, #1
 8005b3a:	f023 0501 	bic.w	r5, r3, #1
 8005b3e:	e7de      	b.n	8005afe <__ieee754_sqrt+0x15e>
 8005b40:	7ff00000 	.word	0x7ff00000
 8005b44:	08008800 	.word	0x08008800
 8005b48:	080087f8 	.word	0x080087f8

08005b4c <__ieee754_atan2f>:
 8005b4c:	ee10 2a90 	vmov	r2, s1
 8005b50:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8005b54:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	eef0 7a40 	vmov.f32	s15, s0
 8005b5e:	d806      	bhi.n	8005b6e <__ieee754_atan2f+0x22>
 8005b60:	ee10 0a10 	vmov	r0, s0
 8005b64:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005b68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005b6c:	d904      	bls.n	8005b78 <__ieee754_atan2f+0x2c>
 8005b6e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005b72:	eeb0 0a67 	vmov.f32	s0, s15
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8005b7c:	d103      	bne.n	8005b86 <__ieee754_atan2f+0x3a>
 8005b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b82:	f000 b883 	b.w	8005c8c <atanf>
 8005b86:	1794      	asrs	r4, r2, #30
 8005b88:	f004 0402 	and.w	r4, r4, #2
 8005b8c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005b90:	b943      	cbnz	r3, 8005ba4 <__ieee754_atan2f+0x58>
 8005b92:	2c02      	cmp	r4, #2
 8005b94:	d05e      	beq.n	8005c54 <__ieee754_atan2f+0x108>
 8005b96:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005c68 <__ieee754_atan2f+0x11c>
 8005b9a:	2c03      	cmp	r4, #3
 8005b9c:	bf08      	it	eq
 8005b9e:	eef0 7a47 	vmoveq.f32	s15, s14
 8005ba2:	e7e6      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005ba4:	b941      	cbnz	r1, 8005bb8 <__ieee754_atan2f+0x6c>
 8005ba6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8005c6c <__ieee754_atan2f+0x120>
 8005baa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005c70 <__ieee754_atan2f+0x124>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	bfa8      	it	ge
 8005bb2:	eef0 7a47 	vmovge.f32	s15, s14
 8005bb6:	e7dc      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005bb8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005bbc:	d110      	bne.n	8005be0 <__ieee754_atan2f+0x94>
 8005bbe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bc6:	d107      	bne.n	8005bd8 <__ieee754_atan2f+0x8c>
 8005bc8:	2c02      	cmp	r4, #2
 8005bca:	d846      	bhi.n	8005c5a <__ieee754_atan2f+0x10e>
 8005bcc:	4b29      	ldr	r3, [pc, #164]	@ (8005c74 <__ieee754_atan2f+0x128>)
 8005bce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005bd2:	edd3 7a00 	vldr	s15, [r3]
 8005bd6:	e7cc      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005bd8:	2c02      	cmp	r4, #2
 8005bda:	d841      	bhi.n	8005c60 <__ieee754_atan2f+0x114>
 8005bdc:	4b26      	ldr	r3, [pc, #152]	@ (8005c78 <__ieee754_atan2f+0x12c>)
 8005bde:	e7f6      	b.n	8005bce <__ieee754_atan2f+0x82>
 8005be0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005be4:	d0df      	beq.n	8005ba6 <__ieee754_atan2f+0x5a>
 8005be6:	1a5b      	subs	r3, r3, r1
 8005be8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8005bec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8005bf0:	da1a      	bge.n	8005c28 <__ieee754_atan2f+0xdc>
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	da01      	bge.n	8005bfa <__ieee754_atan2f+0xae>
 8005bf6:	313c      	adds	r1, #60	@ 0x3c
 8005bf8:	db19      	blt.n	8005c2e <__ieee754_atan2f+0xe2>
 8005bfa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8005bfe:	f000 f919 	bl	8005e34 <fabsf>
 8005c02:	f000 f843 	bl	8005c8c <atanf>
 8005c06:	eef0 7a40 	vmov.f32	s15, s0
 8005c0a:	2c01      	cmp	r4, #1
 8005c0c:	d012      	beq.n	8005c34 <__ieee754_atan2f+0xe8>
 8005c0e:	2c02      	cmp	r4, #2
 8005c10:	d017      	beq.n	8005c42 <__ieee754_atan2f+0xf6>
 8005c12:	2c00      	cmp	r4, #0
 8005c14:	d0ad      	beq.n	8005b72 <__ieee754_atan2f+0x26>
 8005c16:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8005c7c <__ieee754_atan2f+0x130>
 8005c1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c1e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005c80 <__ieee754_atan2f+0x134>
 8005c22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c26:	e7a4      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c28:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005c70 <__ieee754_atan2f+0x124>
 8005c2c:	e7ed      	b.n	8005c0a <__ieee754_atan2f+0xbe>
 8005c2e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005c84 <__ieee754_atan2f+0x138>
 8005c32:	e7ea      	b.n	8005c0a <__ieee754_atan2f+0xbe>
 8005c34:	ee17 3a90 	vmov	r3, s15
 8005c38:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c3c:	ee07 3a90 	vmov	s15, r3
 8005c40:	e797      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c42:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8005c7c <__ieee754_atan2f+0x130>
 8005c46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c4a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005c80 <__ieee754_atan2f+0x134>
 8005c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c52:	e78e      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c54:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005c80 <__ieee754_atan2f+0x134>
 8005c58:	e78b      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c5a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005c88 <__ieee754_atan2f+0x13c>
 8005c5e:	e788      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c60:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005c84 <__ieee754_atan2f+0x138>
 8005c64:	e785      	b.n	8005b72 <__ieee754_atan2f+0x26>
 8005c66:	bf00      	nop
 8005c68:	c0490fdb 	.word	0xc0490fdb
 8005c6c:	bfc90fdb 	.word	0xbfc90fdb
 8005c70:	3fc90fdb 	.word	0x3fc90fdb
 8005c74:	08008814 	.word	0x08008814
 8005c78:	08008808 	.word	0x08008808
 8005c7c:	33bbbd2e 	.word	0x33bbbd2e
 8005c80:	40490fdb 	.word	0x40490fdb
 8005c84:	00000000 	.word	0x00000000
 8005c88:	3f490fdb 	.word	0x3f490fdb

08005c8c <atanf>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	ee10 5a10 	vmov	r5, s0
 8005c92:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8005c96:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8005c9a:	eef0 7a40 	vmov.f32	s15, s0
 8005c9e:	d310      	bcc.n	8005cc2 <atanf+0x36>
 8005ca0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8005ca4:	d904      	bls.n	8005cb0 <atanf+0x24>
 8005ca6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005caa:	eeb0 0a67 	vmov.f32	s0, s15
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8005de8 <atanf+0x15c>
 8005cb4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8005dec <atanf+0x160>
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	bfc8      	it	gt
 8005cbc:	eef0 7a47 	vmovgt.f32	s15, s14
 8005cc0:	e7f3      	b.n	8005caa <atanf+0x1e>
 8005cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8005df0 <atanf+0x164>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	d810      	bhi.n	8005cea <atanf+0x5e>
 8005cc8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8005ccc:	d20a      	bcs.n	8005ce4 <atanf+0x58>
 8005cce:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8005df4 <atanf+0x168>
 8005cd2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cda:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	dce2      	bgt.n	8005caa <atanf+0x1e>
 8005ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce8:	e013      	b.n	8005d12 <atanf+0x86>
 8005cea:	f000 f8a3 	bl	8005e34 <fabsf>
 8005cee:	4b42      	ldr	r3, [pc, #264]	@ (8005df8 <atanf+0x16c>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	d84f      	bhi.n	8005d94 <atanf+0x108>
 8005cf4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	d841      	bhi.n	8005d80 <atanf+0xf4>
 8005cfc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8005d00:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d04:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005d08:	2300      	movs	r3, #0
 8005d0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005d18:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005dfc <atanf+0x170>
 8005d1c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8005e00 <atanf+0x174>
 8005d20:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8005e04 <atanf+0x178>
 8005d24:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005d28:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005d2c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005e08 <atanf+0x17c>
 8005d30:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005d34:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8005e0c <atanf+0x180>
 8005d38:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005d3c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005e10 <atanf+0x184>
 8005d40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005d44:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005e14 <atanf+0x188>
 8005d48:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005d4c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8005e18 <atanf+0x18c>
 8005d50:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005d54:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005e1c <atanf+0x190>
 8005d58:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005d5c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8005e20 <atanf+0x194>
 8005d60:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005d64:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8005e24 <atanf+0x198>
 8005d68:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005d6c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d70:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005d74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005d78:	d121      	bne.n	8005dbe <atanf+0x132>
 8005d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d7e:	e794      	b.n	8005caa <atanf+0x1e>
 8005d80:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005d84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005d88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005d92:	e7be      	b.n	8005d12 <atanf+0x86>
 8005d94:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <atanf+0x19c>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d80b      	bhi.n	8005db2 <atanf+0x126>
 8005d9a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8005d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005da2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005da6:	2302      	movs	r3, #2
 8005da8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005db0:	e7af      	b.n	8005d12 <atanf+0x86>
 8005db2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005db6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e7a9      	b.n	8005d12 <atanf+0x86>
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005e2c <atanf+0x1a0>)
 8005dc0:	491b      	ldr	r1, [pc, #108]	@ (8005e30 <atanf+0x1a4>)
 8005dc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005dc6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005dca:	edd3 6a00 	vldr	s13, [r3]
 8005dce:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005dd2:	2d00      	cmp	r5, #0
 8005dd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dd8:	edd2 7a00 	vldr	s15, [r2]
 8005ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005de0:	bfb8      	it	lt
 8005de2:	eef1 7a67 	vneglt.f32	s15, s15
 8005de6:	e760      	b.n	8005caa <atanf+0x1e>
 8005de8:	bfc90fdb 	.word	0xbfc90fdb
 8005dec:	3fc90fdb 	.word	0x3fc90fdb
 8005df0:	3edfffff 	.word	0x3edfffff
 8005df4:	7149f2ca 	.word	0x7149f2ca
 8005df8:	3f97ffff 	.word	0x3f97ffff
 8005dfc:	3c8569d7 	.word	0x3c8569d7
 8005e00:	3d4bda59 	.word	0x3d4bda59
 8005e04:	bd6ef16b 	.word	0xbd6ef16b
 8005e08:	3d886b35 	.word	0x3d886b35
 8005e0c:	3dba2e6e 	.word	0x3dba2e6e
 8005e10:	3e124925 	.word	0x3e124925
 8005e14:	3eaaaaab 	.word	0x3eaaaaab
 8005e18:	bd15a221 	.word	0xbd15a221
 8005e1c:	bd9d8795 	.word	0xbd9d8795
 8005e20:	bde38e38 	.word	0xbde38e38
 8005e24:	be4ccccd 	.word	0xbe4ccccd
 8005e28:	401bffff 	.word	0x401bffff
 8005e2c:	08008830 	.word	0x08008830
 8005e30:	08008820 	.word	0x08008820

08005e34 <fabsf>:
 8005e34:	ee10 3a10 	vmov	r3, s0
 8005e38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	ee00 3a10 	vmov	s0, r3
 8005e40:	4770      	bx	lr

08005e42 <__cvt>:
 8005e42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e46:	ec57 6b10 	vmov	r6, r7, d0
 8005e4a:	2f00      	cmp	r7, #0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	4619      	mov	r1, r3
 8005e50:	463b      	mov	r3, r7
 8005e52:	bfbb      	ittet	lt
 8005e54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e58:	461f      	movlt	r7, r3
 8005e5a:	2300      	movge	r3, #0
 8005e5c:	232d      	movlt	r3, #45	@ 0x2d
 8005e5e:	700b      	strb	r3, [r1, #0]
 8005e60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e66:	4691      	mov	r9, r2
 8005e68:	f023 0820 	bic.w	r8, r3, #32
 8005e6c:	bfbc      	itt	lt
 8005e6e:	4632      	movlt	r2, r6
 8005e70:	4616      	movlt	r6, r2
 8005e72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e76:	d005      	beq.n	8005e84 <__cvt+0x42>
 8005e78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e7c:	d100      	bne.n	8005e80 <__cvt+0x3e>
 8005e7e:	3401      	adds	r4, #1
 8005e80:	2102      	movs	r1, #2
 8005e82:	e000      	b.n	8005e86 <__cvt+0x44>
 8005e84:	2103      	movs	r1, #3
 8005e86:	ab03      	add	r3, sp, #12
 8005e88:	9301      	str	r3, [sp, #4]
 8005e8a:	ab02      	add	r3, sp, #8
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	ec47 6b10 	vmov	d0, r6, r7
 8005e92:	4653      	mov	r3, sl
 8005e94:	4622      	mov	r2, r4
 8005e96:	f000 fe4b 	bl	8006b30 <_dtoa_r>
 8005e9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	d119      	bne.n	8005ed6 <__cvt+0x94>
 8005ea2:	f019 0f01 	tst.w	r9, #1
 8005ea6:	d00e      	beq.n	8005ec6 <__cvt+0x84>
 8005ea8:	eb00 0904 	add.w	r9, r0, r4
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fe10 	bl	8000ad8 <__aeabi_dcmpeq>
 8005eb8:	b108      	cbz	r0, 8005ebe <__cvt+0x7c>
 8005eba:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ebe:	2230      	movs	r2, #48	@ 0x30
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	454b      	cmp	r3, r9
 8005ec4:	d31e      	bcc.n	8005f04 <__cvt+0xc2>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005eca:	1b5b      	subs	r3, r3, r5
 8005ecc:	4628      	mov	r0, r5
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	b004      	add	sp, #16
 8005ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ed6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005eda:	eb00 0904 	add.w	r9, r0, r4
 8005ede:	d1e5      	bne.n	8005eac <__cvt+0x6a>
 8005ee0:	7803      	ldrb	r3, [r0, #0]
 8005ee2:	2b30      	cmp	r3, #48	@ 0x30
 8005ee4:	d10a      	bne.n	8005efc <__cvt+0xba>
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4630      	mov	r0, r6
 8005eec:	4639      	mov	r1, r7
 8005eee:	f7fa fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ef2:	b918      	cbnz	r0, 8005efc <__cvt+0xba>
 8005ef4:	f1c4 0401 	rsb	r4, r4, #1
 8005ef8:	f8ca 4000 	str.w	r4, [sl]
 8005efc:	f8da 3000 	ldr.w	r3, [sl]
 8005f00:	4499      	add	r9, r3
 8005f02:	e7d3      	b.n	8005eac <__cvt+0x6a>
 8005f04:	1c59      	adds	r1, r3, #1
 8005f06:	9103      	str	r1, [sp, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e7d9      	b.n	8005ec0 <__cvt+0x7e>

08005f0c <__exponent>:
 8005f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	bfba      	itte	lt
 8005f12:	4249      	neglt	r1, r1
 8005f14:	232d      	movlt	r3, #45	@ 0x2d
 8005f16:	232b      	movge	r3, #43	@ 0x2b
 8005f18:	2909      	cmp	r1, #9
 8005f1a:	7002      	strb	r2, [r0, #0]
 8005f1c:	7043      	strb	r3, [r0, #1]
 8005f1e:	dd29      	ble.n	8005f74 <__exponent+0x68>
 8005f20:	f10d 0307 	add.w	r3, sp, #7
 8005f24:	461d      	mov	r5, r3
 8005f26:	270a      	movs	r7, #10
 8005f28:	461a      	mov	r2, r3
 8005f2a:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f2e:	fb07 1416 	mls	r4, r7, r6, r1
 8005f32:	3430      	adds	r4, #48	@ 0x30
 8005f34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f38:	460c      	mov	r4, r1
 8005f3a:	2c63      	cmp	r4, #99	@ 0x63
 8005f3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f40:	4631      	mov	r1, r6
 8005f42:	dcf1      	bgt.n	8005f28 <__exponent+0x1c>
 8005f44:	3130      	adds	r1, #48	@ 0x30
 8005f46:	1e94      	subs	r4, r2, #2
 8005f48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f4c:	1c41      	adds	r1, r0, #1
 8005f4e:	4623      	mov	r3, r4
 8005f50:	42ab      	cmp	r3, r5
 8005f52:	d30a      	bcc.n	8005f6a <__exponent+0x5e>
 8005f54:	f10d 0309 	add.w	r3, sp, #9
 8005f58:	1a9b      	subs	r3, r3, r2
 8005f5a:	42ac      	cmp	r4, r5
 8005f5c:	bf88      	it	hi
 8005f5e:	2300      	movhi	r3, #0
 8005f60:	3302      	adds	r3, #2
 8005f62:	4403      	add	r3, r0
 8005f64:	1a18      	subs	r0, r3, r0
 8005f66:	b003      	add	sp, #12
 8005f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f72:	e7ed      	b.n	8005f50 <__exponent+0x44>
 8005f74:	2330      	movs	r3, #48	@ 0x30
 8005f76:	3130      	adds	r1, #48	@ 0x30
 8005f78:	7083      	strb	r3, [r0, #2]
 8005f7a:	70c1      	strb	r1, [r0, #3]
 8005f7c:	1d03      	adds	r3, r0, #4
 8005f7e:	e7f1      	b.n	8005f64 <__exponent+0x58>

08005f80 <_printf_float>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b08d      	sub	sp, #52	@ 0x34
 8005f86:	460c      	mov	r4, r1
 8005f88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	461f      	mov	r7, r3
 8005f90:	4605      	mov	r5, r0
 8005f92:	f000 fccb 	bl	800692c <_localeconv_r>
 8005f96:	6803      	ldr	r3, [r0, #0]
 8005f98:	9304      	str	r3, [sp, #16]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7fa f970 	bl	8000280 <strlen>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8005fa8:	9005      	str	r0, [sp, #20]
 8005faa:	3307      	adds	r3, #7
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	f103 0208 	add.w	r2, r3, #8
 8005fb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005fb8:	f8d4 b000 	ldr.w	fp, [r4]
 8005fbc:	f8c8 2000 	str.w	r2, [r8]
 8005fc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fc8:	9307      	str	r3, [sp, #28]
 8005fca:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005fd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fd6:	4b9c      	ldr	r3, [pc, #624]	@ (8006248 <_printf_float+0x2c8>)
 8005fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fdc:	f7fa fdae 	bl	8000b3c <__aeabi_dcmpun>
 8005fe0:	bb70      	cbnz	r0, 8006040 <_printf_float+0xc0>
 8005fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe6:	4b98      	ldr	r3, [pc, #608]	@ (8006248 <_printf_float+0x2c8>)
 8005fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fec:	f7fa fd88 	bl	8000b00 <__aeabi_dcmple>
 8005ff0:	bb30      	cbnz	r0, 8006040 <_printf_float+0xc0>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	4649      	mov	r1, r9
 8005ffa:	f7fa fd77 	bl	8000aec <__aeabi_dcmplt>
 8005ffe:	b110      	cbz	r0, 8006006 <_printf_float+0x86>
 8006000:	232d      	movs	r3, #45	@ 0x2d
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006006:	4a91      	ldr	r2, [pc, #580]	@ (800624c <_printf_float+0x2cc>)
 8006008:	4b91      	ldr	r3, [pc, #580]	@ (8006250 <_printf_float+0x2d0>)
 800600a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800600e:	bf8c      	ite	hi
 8006010:	4690      	movhi	r8, r2
 8006012:	4698      	movls	r8, r3
 8006014:	2303      	movs	r3, #3
 8006016:	6123      	str	r3, [r4, #16]
 8006018:	f02b 0304 	bic.w	r3, fp, #4
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	f04f 0900 	mov.w	r9, #0
 8006022:	9700      	str	r7, [sp, #0]
 8006024:	4633      	mov	r3, r6
 8006026:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006028:	4621      	mov	r1, r4
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f9d2 	bl	80063d4 <_printf_common>
 8006030:	3001      	adds	r0, #1
 8006032:	f040 808d 	bne.w	8006150 <_printf_float+0x1d0>
 8006036:	f04f 30ff 	mov.w	r0, #4294967295
 800603a:	b00d      	add	sp, #52	@ 0x34
 800603c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006040:	4642      	mov	r2, r8
 8006042:	464b      	mov	r3, r9
 8006044:	4640      	mov	r0, r8
 8006046:	4649      	mov	r1, r9
 8006048:	f7fa fd78 	bl	8000b3c <__aeabi_dcmpun>
 800604c:	b140      	cbz	r0, 8006060 <_printf_float+0xe0>
 800604e:	464b      	mov	r3, r9
 8006050:	2b00      	cmp	r3, #0
 8006052:	bfbc      	itt	lt
 8006054:	232d      	movlt	r3, #45	@ 0x2d
 8006056:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800605a:	4a7e      	ldr	r2, [pc, #504]	@ (8006254 <_printf_float+0x2d4>)
 800605c:	4b7e      	ldr	r3, [pc, #504]	@ (8006258 <_printf_float+0x2d8>)
 800605e:	e7d4      	b.n	800600a <_printf_float+0x8a>
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006066:	9206      	str	r2, [sp, #24]
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	d13b      	bne.n	80060e4 <_printf_float+0x164>
 800606c:	2306      	movs	r3, #6
 800606e:	6063      	str	r3, [r4, #4]
 8006070:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006074:	2300      	movs	r3, #0
 8006076:	6022      	str	r2, [r4, #0]
 8006078:	9303      	str	r3, [sp, #12]
 800607a:	ab0a      	add	r3, sp, #40	@ 0x28
 800607c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006080:	ab09      	add	r3, sp, #36	@ 0x24
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	6861      	ldr	r1, [r4, #4]
 8006086:	ec49 8b10 	vmov	d0, r8, r9
 800608a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800608e:	4628      	mov	r0, r5
 8006090:	f7ff fed7 	bl	8005e42 <__cvt>
 8006094:	9b06      	ldr	r3, [sp, #24]
 8006096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006098:	2b47      	cmp	r3, #71	@ 0x47
 800609a:	4680      	mov	r8, r0
 800609c:	d129      	bne.n	80060f2 <_printf_float+0x172>
 800609e:	1cc8      	adds	r0, r1, #3
 80060a0:	db02      	blt.n	80060a8 <_printf_float+0x128>
 80060a2:	6863      	ldr	r3, [r4, #4]
 80060a4:	4299      	cmp	r1, r3
 80060a6:	dd41      	ble.n	800612c <_printf_float+0x1ac>
 80060a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80060ac:	fa5f fa8a 	uxtb.w	sl, sl
 80060b0:	3901      	subs	r1, #1
 80060b2:	4652      	mov	r2, sl
 80060b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80060b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80060ba:	f7ff ff27 	bl	8005f0c <__exponent>
 80060be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060c0:	1813      	adds	r3, r2, r0
 80060c2:	2a01      	cmp	r2, #1
 80060c4:	4681      	mov	r9, r0
 80060c6:	6123      	str	r3, [r4, #16]
 80060c8:	dc02      	bgt.n	80060d0 <_printf_float+0x150>
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	07d2      	lsls	r2, r2, #31
 80060ce:	d501      	bpl.n	80060d4 <_printf_float+0x154>
 80060d0:	3301      	adds	r3, #1
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0a2      	beq.n	8006022 <_printf_float+0xa2>
 80060dc:	232d      	movs	r3, #45	@ 0x2d
 80060de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060e2:	e79e      	b.n	8006022 <_printf_float+0xa2>
 80060e4:	9a06      	ldr	r2, [sp, #24]
 80060e6:	2a47      	cmp	r2, #71	@ 0x47
 80060e8:	d1c2      	bne.n	8006070 <_printf_float+0xf0>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1c0      	bne.n	8006070 <_printf_float+0xf0>
 80060ee:	2301      	movs	r3, #1
 80060f0:	e7bd      	b.n	800606e <_printf_float+0xee>
 80060f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060f6:	d9db      	bls.n	80060b0 <_printf_float+0x130>
 80060f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060fc:	d118      	bne.n	8006130 <_printf_float+0x1b0>
 80060fe:	2900      	cmp	r1, #0
 8006100:	6863      	ldr	r3, [r4, #4]
 8006102:	dd0b      	ble.n	800611c <_printf_float+0x19c>
 8006104:	6121      	str	r1, [r4, #16]
 8006106:	b913      	cbnz	r3, 800610e <_printf_float+0x18e>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	07d0      	lsls	r0, r2, #31
 800610c:	d502      	bpl.n	8006114 <_printf_float+0x194>
 800610e:	3301      	adds	r3, #1
 8006110:	440b      	add	r3, r1
 8006112:	6123      	str	r3, [r4, #16]
 8006114:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	e7db      	b.n	80060d4 <_printf_float+0x154>
 800611c:	b913      	cbnz	r3, 8006124 <_printf_float+0x1a4>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	07d2      	lsls	r2, r2, #31
 8006122:	d501      	bpl.n	8006128 <_printf_float+0x1a8>
 8006124:	3302      	adds	r3, #2
 8006126:	e7f4      	b.n	8006112 <_printf_float+0x192>
 8006128:	2301      	movs	r3, #1
 800612a:	e7f2      	b.n	8006112 <_printf_float+0x192>
 800612c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006132:	4299      	cmp	r1, r3
 8006134:	db05      	blt.n	8006142 <_printf_float+0x1c2>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	6121      	str	r1, [r4, #16]
 800613a:	07d8      	lsls	r0, r3, #31
 800613c:	d5ea      	bpl.n	8006114 <_printf_float+0x194>
 800613e:	1c4b      	adds	r3, r1, #1
 8006140:	e7e7      	b.n	8006112 <_printf_float+0x192>
 8006142:	2900      	cmp	r1, #0
 8006144:	bfd4      	ite	le
 8006146:	f1c1 0202 	rsble	r2, r1, #2
 800614a:	2201      	movgt	r2, #1
 800614c:	4413      	add	r3, r2
 800614e:	e7e0      	b.n	8006112 <_printf_float+0x192>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	055a      	lsls	r2, r3, #21
 8006154:	d407      	bmi.n	8006166 <_printf_float+0x1e6>
 8006156:	6923      	ldr	r3, [r4, #16]
 8006158:	4642      	mov	r2, r8
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	d12b      	bne.n	80061bc <_printf_float+0x23c>
 8006164:	e767      	b.n	8006036 <_printf_float+0xb6>
 8006166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800616a:	f240 80dd 	bls.w	8006328 <_printf_float+0x3a8>
 800616e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006172:	2200      	movs	r2, #0
 8006174:	2300      	movs	r3, #0
 8006176:	f7fa fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800617a:	2800      	cmp	r0, #0
 800617c:	d033      	beq.n	80061e6 <_printf_float+0x266>
 800617e:	4a37      	ldr	r2, [pc, #220]	@ (800625c <_printf_float+0x2dc>)
 8006180:	2301      	movs	r3, #1
 8006182:	4631      	mov	r1, r6
 8006184:	4628      	mov	r0, r5
 8006186:	47b8      	blx	r7
 8006188:	3001      	adds	r0, #1
 800618a:	f43f af54 	beq.w	8006036 <_printf_float+0xb6>
 800618e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006192:	4543      	cmp	r3, r8
 8006194:	db02      	blt.n	800619c <_printf_float+0x21c>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	07d8      	lsls	r0, r3, #31
 800619a:	d50f      	bpl.n	80061bc <_printf_float+0x23c>
 800619c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af45 	beq.w	8006036 <_printf_float+0xb6>
 80061ac:	f04f 0900 	mov.w	r9, #0
 80061b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80061b4:	f104 0a1a 	add.w	sl, r4, #26
 80061b8:	45c8      	cmp	r8, r9
 80061ba:	dc09      	bgt.n	80061d0 <_printf_float+0x250>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	079b      	lsls	r3, r3, #30
 80061c0:	f100 8103 	bmi.w	80063ca <_printf_float+0x44a>
 80061c4:	68e0      	ldr	r0, [r4, #12]
 80061c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c8:	4298      	cmp	r0, r3
 80061ca:	bfb8      	it	lt
 80061cc:	4618      	movlt	r0, r3
 80061ce:	e734      	b.n	800603a <_printf_float+0xba>
 80061d0:	2301      	movs	r3, #1
 80061d2:	4652      	mov	r2, sl
 80061d4:	4631      	mov	r1, r6
 80061d6:	4628      	mov	r0, r5
 80061d8:	47b8      	blx	r7
 80061da:	3001      	adds	r0, #1
 80061dc:	f43f af2b 	beq.w	8006036 <_printf_float+0xb6>
 80061e0:	f109 0901 	add.w	r9, r9, #1
 80061e4:	e7e8      	b.n	80061b8 <_printf_float+0x238>
 80061e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dc39      	bgt.n	8006260 <_printf_float+0x2e0>
 80061ec:	4a1b      	ldr	r2, [pc, #108]	@ (800625c <_printf_float+0x2dc>)
 80061ee:	2301      	movs	r3, #1
 80061f0:	4631      	mov	r1, r6
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b8      	blx	r7
 80061f6:	3001      	adds	r0, #1
 80061f8:	f43f af1d 	beq.w	8006036 <_printf_float+0xb6>
 80061fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006200:	ea59 0303 	orrs.w	r3, r9, r3
 8006204:	d102      	bne.n	800620c <_printf_float+0x28c>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	07d9      	lsls	r1, r3, #31
 800620a:	d5d7      	bpl.n	80061bc <_printf_float+0x23c>
 800620c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006210:	4631      	mov	r1, r6
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	f43f af0d 	beq.w	8006036 <_printf_float+0xb6>
 800621c:	f04f 0a00 	mov.w	sl, #0
 8006220:	f104 0b1a 	add.w	fp, r4, #26
 8006224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006226:	425b      	negs	r3, r3
 8006228:	4553      	cmp	r3, sl
 800622a:	dc01      	bgt.n	8006230 <_printf_float+0x2b0>
 800622c:	464b      	mov	r3, r9
 800622e:	e793      	b.n	8006158 <_printf_float+0x1d8>
 8006230:	2301      	movs	r3, #1
 8006232:	465a      	mov	r2, fp
 8006234:	4631      	mov	r1, r6
 8006236:	4628      	mov	r0, r5
 8006238:	47b8      	blx	r7
 800623a:	3001      	adds	r0, #1
 800623c:	f43f aefb 	beq.w	8006036 <_printf_float+0xb6>
 8006240:	f10a 0a01 	add.w	sl, sl, #1
 8006244:	e7ee      	b.n	8006224 <_printf_float+0x2a4>
 8006246:	bf00      	nop
 8006248:	7fefffff 	.word	0x7fefffff
 800624c:	08008844 	.word	0x08008844
 8006250:	08008840 	.word	0x08008840
 8006254:	0800884c 	.word	0x0800884c
 8006258:	08008848 	.word	0x08008848
 800625c:	08008850 	.word	0x08008850
 8006260:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006262:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006266:	4553      	cmp	r3, sl
 8006268:	bfa8      	it	ge
 800626a:	4653      	movge	r3, sl
 800626c:	2b00      	cmp	r3, #0
 800626e:	4699      	mov	r9, r3
 8006270:	dc36      	bgt.n	80062e0 <_printf_float+0x360>
 8006272:	f04f 0b00 	mov.w	fp, #0
 8006276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800627a:	f104 021a 	add.w	r2, r4, #26
 800627e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006280:	9306      	str	r3, [sp, #24]
 8006282:	eba3 0309 	sub.w	r3, r3, r9
 8006286:	455b      	cmp	r3, fp
 8006288:	dc31      	bgt.n	80062ee <_printf_float+0x36e>
 800628a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800628c:	459a      	cmp	sl, r3
 800628e:	dc3a      	bgt.n	8006306 <_printf_float+0x386>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07da      	lsls	r2, r3, #31
 8006294:	d437      	bmi.n	8006306 <_printf_float+0x386>
 8006296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006298:	ebaa 0903 	sub.w	r9, sl, r3
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	ebaa 0303 	sub.w	r3, sl, r3
 80062a2:	4599      	cmp	r9, r3
 80062a4:	bfa8      	it	ge
 80062a6:	4699      	movge	r9, r3
 80062a8:	f1b9 0f00 	cmp.w	r9, #0
 80062ac:	dc33      	bgt.n	8006316 <_printf_float+0x396>
 80062ae:	f04f 0800 	mov.w	r8, #0
 80062b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062b6:	f104 0b1a 	add.w	fp, r4, #26
 80062ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062bc:	ebaa 0303 	sub.w	r3, sl, r3
 80062c0:	eba3 0309 	sub.w	r3, r3, r9
 80062c4:	4543      	cmp	r3, r8
 80062c6:	f77f af79 	ble.w	80061bc <_printf_float+0x23c>
 80062ca:	2301      	movs	r3, #1
 80062cc:	465a      	mov	r2, fp
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f aeae 	beq.w	8006036 <_printf_float+0xb6>
 80062da:	f108 0801 	add.w	r8, r8, #1
 80062de:	e7ec      	b.n	80062ba <_printf_float+0x33a>
 80062e0:	4642      	mov	r2, r8
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1c2      	bne.n	8006272 <_printf_float+0x2f2>
 80062ec:	e6a3      	b.n	8006036 <_printf_float+0xb6>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	9206      	str	r2, [sp, #24]
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae9c 	beq.w	8006036 <_printf_float+0xb6>
 80062fe:	9a06      	ldr	r2, [sp, #24]
 8006300:	f10b 0b01 	add.w	fp, fp, #1
 8006304:	e7bb      	b.n	800627e <_printf_float+0x2fe>
 8006306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	47b8      	blx	r7
 8006310:	3001      	adds	r0, #1
 8006312:	d1c0      	bne.n	8006296 <_printf_float+0x316>
 8006314:	e68f      	b.n	8006036 <_printf_float+0xb6>
 8006316:	9a06      	ldr	r2, [sp, #24]
 8006318:	464b      	mov	r3, r9
 800631a:	4442      	add	r2, r8
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	47b8      	blx	r7
 8006322:	3001      	adds	r0, #1
 8006324:	d1c3      	bne.n	80062ae <_printf_float+0x32e>
 8006326:	e686      	b.n	8006036 <_printf_float+0xb6>
 8006328:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800632c:	f1ba 0f01 	cmp.w	sl, #1
 8006330:	dc01      	bgt.n	8006336 <_printf_float+0x3b6>
 8006332:	07db      	lsls	r3, r3, #31
 8006334:	d536      	bpl.n	80063a4 <_printf_float+0x424>
 8006336:	2301      	movs	r3, #1
 8006338:	4642      	mov	r2, r8
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f ae78 	beq.w	8006036 <_printf_float+0xb6>
 8006346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800634a:	4631      	mov	r1, r6
 800634c:	4628      	mov	r0, r5
 800634e:	47b8      	blx	r7
 8006350:	3001      	adds	r0, #1
 8006352:	f43f ae70 	beq.w	8006036 <_printf_float+0xb6>
 8006356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800635a:	2200      	movs	r2, #0
 800635c:	2300      	movs	r3, #0
 800635e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006362:	f7fa fbb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006366:	b9c0      	cbnz	r0, 800639a <_printf_float+0x41a>
 8006368:	4653      	mov	r3, sl
 800636a:	f108 0201 	add.w	r2, r8, #1
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	d10c      	bne.n	8006392 <_printf_float+0x412>
 8006378:	e65d      	b.n	8006036 <_printf_float+0xb6>
 800637a:	2301      	movs	r3, #1
 800637c:	465a      	mov	r2, fp
 800637e:	4631      	mov	r1, r6
 8006380:	4628      	mov	r0, r5
 8006382:	47b8      	blx	r7
 8006384:	3001      	adds	r0, #1
 8006386:	f43f ae56 	beq.w	8006036 <_printf_float+0xb6>
 800638a:	f108 0801 	add.w	r8, r8, #1
 800638e:	45d0      	cmp	r8, sl
 8006390:	dbf3      	blt.n	800637a <_printf_float+0x3fa>
 8006392:	464b      	mov	r3, r9
 8006394:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006398:	e6df      	b.n	800615a <_printf_float+0x1da>
 800639a:	f04f 0800 	mov.w	r8, #0
 800639e:	f104 0b1a 	add.w	fp, r4, #26
 80063a2:	e7f4      	b.n	800638e <_printf_float+0x40e>
 80063a4:	2301      	movs	r3, #1
 80063a6:	4642      	mov	r2, r8
 80063a8:	e7e1      	b.n	800636e <_printf_float+0x3ee>
 80063aa:	2301      	movs	r3, #1
 80063ac:	464a      	mov	r2, r9
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b8      	blx	r7
 80063b4:	3001      	adds	r0, #1
 80063b6:	f43f ae3e 	beq.w	8006036 <_printf_float+0xb6>
 80063ba:	f108 0801 	add.w	r8, r8, #1
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80063c2:	1a5b      	subs	r3, r3, r1
 80063c4:	4543      	cmp	r3, r8
 80063c6:	dcf0      	bgt.n	80063aa <_printf_float+0x42a>
 80063c8:	e6fc      	b.n	80061c4 <_printf_float+0x244>
 80063ca:	f04f 0800 	mov.w	r8, #0
 80063ce:	f104 0919 	add.w	r9, r4, #25
 80063d2:	e7f4      	b.n	80063be <_printf_float+0x43e>

080063d4 <_printf_common>:
 80063d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	4616      	mov	r6, r2
 80063da:	4698      	mov	r8, r3
 80063dc:	688a      	ldr	r2, [r1, #8]
 80063de:	690b      	ldr	r3, [r1, #16]
 80063e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063e4:	4293      	cmp	r3, r2
 80063e6:	bfb8      	it	lt
 80063e8:	4613      	movlt	r3, r2
 80063ea:	6033      	str	r3, [r6, #0]
 80063ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063f0:	4607      	mov	r7, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	b10a      	cbz	r2, 80063fa <_printf_common+0x26>
 80063f6:	3301      	adds	r3, #1
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	0699      	lsls	r1, r3, #26
 80063fe:	bf42      	ittt	mi
 8006400:	6833      	ldrmi	r3, [r6, #0]
 8006402:	3302      	addmi	r3, #2
 8006404:	6033      	strmi	r3, [r6, #0]
 8006406:	6825      	ldr	r5, [r4, #0]
 8006408:	f015 0506 	ands.w	r5, r5, #6
 800640c:	d106      	bne.n	800641c <_printf_common+0x48>
 800640e:	f104 0a19 	add.w	sl, r4, #25
 8006412:	68e3      	ldr	r3, [r4, #12]
 8006414:	6832      	ldr	r2, [r6, #0]
 8006416:	1a9b      	subs	r3, r3, r2
 8006418:	42ab      	cmp	r3, r5
 800641a:	dc26      	bgt.n	800646a <_printf_common+0x96>
 800641c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	3b00      	subs	r3, #0
 8006424:	bf18      	it	ne
 8006426:	2301      	movne	r3, #1
 8006428:	0692      	lsls	r2, r2, #26
 800642a:	d42b      	bmi.n	8006484 <_printf_common+0xb0>
 800642c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006430:	4641      	mov	r1, r8
 8006432:	4638      	mov	r0, r7
 8006434:	47c8      	blx	r9
 8006436:	3001      	adds	r0, #1
 8006438:	d01e      	beq.n	8006478 <_printf_common+0xa4>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	6922      	ldr	r2, [r4, #16]
 800643e:	f003 0306 	and.w	r3, r3, #6
 8006442:	2b04      	cmp	r3, #4
 8006444:	bf02      	ittt	eq
 8006446:	68e5      	ldreq	r5, [r4, #12]
 8006448:	6833      	ldreq	r3, [r6, #0]
 800644a:	1aed      	subeq	r5, r5, r3
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	bf0c      	ite	eq
 8006450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006454:	2500      	movne	r5, #0
 8006456:	4293      	cmp	r3, r2
 8006458:	bfc4      	itt	gt
 800645a:	1a9b      	subgt	r3, r3, r2
 800645c:	18ed      	addgt	r5, r5, r3
 800645e:	2600      	movs	r6, #0
 8006460:	341a      	adds	r4, #26
 8006462:	42b5      	cmp	r5, r6
 8006464:	d11a      	bne.n	800649c <_printf_common+0xc8>
 8006466:	2000      	movs	r0, #0
 8006468:	e008      	b.n	800647c <_printf_common+0xa8>
 800646a:	2301      	movs	r3, #1
 800646c:	4652      	mov	r2, sl
 800646e:	4641      	mov	r1, r8
 8006470:	4638      	mov	r0, r7
 8006472:	47c8      	blx	r9
 8006474:	3001      	adds	r0, #1
 8006476:	d103      	bne.n	8006480 <_printf_common+0xac>
 8006478:	f04f 30ff 	mov.w	r0, #4294967295
 800647c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006480:	3501      	adds	r5, #1
 8006482:	e7c6      	b.n	8006412 <_printf_common+0x3e>
 8006484:	18e1      	adds	r1, r4, r3
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	2030      	movs	r0, #48	@ 0x30
 800648a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800648e:	4422      	add	r2, r4
 8006490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006498:	3302      	adds	r3, #2
 800649a:	e7c7      	b.n	800642c <_printf_common+0x58>
 800649c:	2301      	movs	r3, #1
 800649e:	4622      	mov	r2, r4
 80064a0:	4641      	mov	r1, r8
 80064a2:	4638      	mov	r0, r7
 80064a4:	47c8      	blx	r9
 80064a6:	3001      	adds	r0, #1
 80064a8:	d0e6      	beq.n	8006478 <_printf_common+0xa4>
 80064aa:	3601      	adds	r6, #1
 80064ac:	e7d9      	b.n	8006462 <_printf_common+0x8e>
	...

080064b0 <_printf_i>:
 80064b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	7e0f      	ldrb	r7, [r1, #24]
 80064b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80064b8:	2f78      	cmp	r7, #120	@ 0x78
 80064ba:	4691      	mov	r9, r2
 80064bc:	4680      	mov	r8, r0
 80064be:	460c      	mov	r4, r1
 80064c0:	469a      	mov	sl, r3
 80064c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80064c6:	d807      	bhi.n	80064d8 <_printf_i+0x28>
 80064c8:	2f62      	cmp	r7, #98	@ 0x62
 80064ca:	d80a      	bhi.n	80064e2 <_printf_i+0x32>
 80064cc:	2f00      	cmp	r7, #0
 80064ce:	f000 80d1 	beq.w	8006674 <_printf_i+0x1c4>
 80064d2:	2f58      	cmp	r7, #88	@ 0x58
 80064d4:	f000 80b8 	beq.w	8006648 <_printf_i+0x198>
 80064d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064e0:	e03a      	b.n	8006558 <_printf_i+0xa8>
 80064e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064e6:	2b15      	cmp	r3, #21
 80064e8:	d8f6      	bhi.n	80064d8 <_printf_i+0x28>
 80064ea:	a101      	add	r1, pc, #4	@ (adr r1, 80064f0 <_printf_i+0x40>)
 80064ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064f0:	08006549 	.word	0x08006549
 80064f4:	0800655d 	.word	0x0800655d
 80064f8:	080064d9 	.word	0x080064d9
 80064fc:	080064d9 	.word	0x080064d9
 8006500:	080064d9 	.word	0x080064d9
 8006504:	080064d9 	.word	0x080064d9
 8006508:	0800655d 	.word	0x0800655d
 800650c:	080064d9 	.word	0x080064d9
 8006510:	080064d9 	.word	0x080064d9
 8006514:	080064d9 	.word	0x080064d9
 8006518:	080064d9 	.word	0x080064d9
 800651c:	0800665b 	.word	0x0800665b
 8006520:	08006587 	.word	0x08006587
 8006524:	08006615 	.word	0x08006615
 8006528:	080064d9 	.word	0x080064d9
 800652c:	080064d9 	.word	0x080064d9
 8006530:	0800667d 	.word	0x0800667d
 8006534:	080064d9 	.word	0x080064d9
 8006538:	08006587 	.word	0x08006587
 800653c:	080064d9 	.word	0x080064d9
 8006540:	080064d9 	.word	0x080064d9
 8006544:	0800661d 	.word	0x0800661d
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	1d1a      	adds	r2, r3, #4
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6032      	str	r2, [r6, #0]
 8006550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006558:	2301      	movs	r3, #1
 800655a:	e09c      	b.n	8006696 <_printf_i+0x1e6>
 800655c:	6833      	ldr	r3, [r6, #0]
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	1d19      	adds	r1, r3, #4
 8006562:	6031      	str	r1, [r6, #0]
 8006564:	0606      	lsls	r6, r0, #24
 8006566:	d501      	bpl.n	800656c <_printf_i+0xbc>
 8006568:	681d      	ldr	r5, [r3, #0]
 800656a:	e003      	b.n	8006574 <_printf_i+0xc4>
 800656c:	0645      	lsls	r5, r0, #25
 800656e:	d5fb      	bpl.n	8006568 <_printf_i+0xb8>
 8006570:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006574:	2d00      	cmp	r5, #0
 8006576:	da03      	bge.n	8006580 <_printf_i+0xd0>
 8006578:	232d      	movs	r3, #45	@ 0x2d
 800657a:	426d      	negs	r5, r5
 800657c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006580:	4858      	ldr	r0, [pc, #352]	@ (80066e4 <_printf_i+0x234>)
 8006582:	230a      	movs	r3, #10
 8006584:	e011      	b.n	80065aa <_printf_i+0xfa>
 8006586:	6821      	ldr	r1, [r4, #0]
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	0608      	lsls	r0, r1, #24
 800658c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006590:	d402      	bmi.n	8006598 <_printf_i+0xe8>
 8006592:	0649      	lsls	r1, r1, #25
 8006594:	bf48      	it	mi
 8006596:	b2ad      	uxthmi	r5, r5
 8006598:	2f6f      	cmp	r7, #111	@ 0x6f
 800659a:	4852      	ldr	r0, [pc, #328]	@ (80066e4 <_printf_i+0x234>)
 800659c:	6033      	str	r3, [r6, #0]
 800659e:	bf14      	ite	ne
 80065a0:	230a      	movne	r3, #10
 80065a2:	2308      	moveq	r3, #8
 80065a4:	2100      	movs	r1, #0
 80065a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80065aa:	6866      	ldr	r6, [r4, #4]
 80065ac:	60a6      	str	r6, [r4, #8]
 80065ae:	2e00      	cmp	r6, #0
 80065b0:	db05      	blt.n	80065be <_printf_i+0x10e>
 80065b2:	6821      	ldr	r1, [r4, #0]
 80065b4:	432e      	orrs	r6, r5
 80065b6:	f021 0104 	bic.w	r1, r1, #4
 80065ba:	6021      	str	r1, [r4, #0]
 80065bc:	d04b      	beq.n	8006656 <_printf_i+0x1a6>
 80065be:	4616      	mov	r6, r2
 80065c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80065c4:	fb03 5711 	mls	r7, r3, r1, r5
 80065c8:	5dc7      	ldrb	r7, [r0, r7]
 80065ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065ce:	462f      	mov	r7, r5
 80065d0:	42bb      	cmp	r3, r7
 80065d2:	460d      	mov	r5, r1
 80065d4:	d9f4      	bls.n	80065c0 <_printf_i+0x110>
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d10b      	bne.n	80065f2 <_printf_i+0x142>
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	07df      	lsls	r7, r3, #31
 80065de:	d508      	bpl.n	80065f2 <_printf_i+0x142>
 80065e0:	6923      	ldr	r3, [r4, #16]
 80065e2:	6861      	ldr	r1, [r4, #4]
 80065e4:	4299      	cmp	r1, r3
 80065e6:	bfde      	ittt	le
 80065e8:	2330      	movle	r3, #48	@ 0x30
 80065ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065f2:	1b92      	subs	r2, r2, r6
 80065f4:	6122      	str	r2, [r4, #16]
 80065f6:	f8cd a000 	str.w	sl, [sp]
 80065fa:	464b      	mov	r3, r9
 80065fc:	aa03      	add	r2, sp, #12
 80065fe:	4621      	mov	r1, r4
 8006600:	4640      	mov	r0, r8
 8006602:	f7ff fee7 	bl	80063d4 <_printf_common>
 8006606:	3001      	adds	r0, #1
 8006608:	d14a      	bne.n	80066a0 <_printf_i+0x1f0>
 800660a:	f04f 30ff 	mov.w	r0, #4294967295
 800660e:	b004      	add	sp, #16
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f043 0320 	orr.w	r3, r3, #32
 800661a:	6023      	str	r3, [r4, #0]
 800661c:	4832      	ldr	r0, [pc, #200]	@ (80066e8 <_printf_i+0x238>)
 800661e:	2778      	movs	r7, #120	@ 0x78
 8006620:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	6831      	ldr	r1, [r6, #0]
 8006628:	061f      	lsls	r7, r3, #24
 800662a:	f851 5b04 	ldr.w	r5, [r1], #4
 800662e:	d402      	bmi.n	8006636 <_printf_i+0x186>
 8006630:	065f      	lsls	r7, r3, #25
 8006632:	bf48      	it	mi
 8006634:	b2ad      	uxthmi	r5, r5
 8006636:	6031      	str	r1, [r6, #0]
 8006638:	07d9      	lsls	r1, r3, #31
 800663a:	bf44      	itt	mi
 800663c:	f043 0320 	orrmi.w	r3, r3, #32
 8006640:	6023      	strmi	r3, [r4, #0]
 8006642:	b11d      	cbz	r5, 800664c <_printf_i+0x19c>
 8006644:	2310      	movs	r3, #16
 8006646:	e7ad      	b.n	80065a4 <_printf_i+0xf4>
 8006648:	4826      	ldr	r0, [pc, #152]	@ (80066e4 <_printf_i+0x234>)
 800664a:	e7e9      	b.n	8006620 <_printf_i+0x170>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	f023 0320 	bic.w	r3, r3, #32
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	e7f6      	b.n	8006644 <_printf_i+0x194>
 8006656:	4616      	mov	r6, r2
 8006658:	e7bd      	b.n	80065d6 <_printf_i+0x126>
 800665a:	6833      	ldr	r3, [r6, #0]
 800665c:	6825      	ldr	r5, [r4, #0]
 800665e:	6961      	ldr	r1, [r4, #20]
 8006660:	1d18      	adds	r0, r3, #4
 8006662:	6030      	str	r0, [r6, #0]
 8006664:	062e      	lsls	r6, r5, #24
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	d501      	bpl.n	800666e <_printf_i+0x1be>
 800666a:	6019      	str	r1, [r3, #0]
 800666c:	e002      	b.n	8006674 <_printf_i+0x1c4>
 800666e:	0668      	lsls	r0, r5, #25
 8006670:	d5fb      	bpl.n	800666a <_printf_i+0x1ba>
 8006672:	8019      	strh	r1, [r3, #0]
 8006674:	2300      	movs	r3, #0
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	4616      	mov	r6, r2
 800667a:	e7bc      	b.n	80065f6 <_printf_i+0x146>
 800667c:	6833      	ldr	r3, [r6, #0]
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	6032      	str	r2, [r6, #0]
 8006682:	681e      	ldr	r6, [r3, #0]
 8006684:	6862      	ldr	r2, [r4, #4]
 8006686:	2100      	movs	r1, #0
 8006688:	4630      	mov	r0, r6
 800668a:	f7f9 fda9 	bl	80001e0 <memchr>
 800668e:	b108      	cbz	r0, 8006694 <_printf_i+0x1e4>
 8006690:	1b80      	subs	r0, r0, r6
 8006692:	6060      	str	r0, [r4, #4]
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	6123      	str	r3, [r4, #16]
 8006698:	2300      	movs	r3, #0
 800669a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800669e:	e7aa      	b.n	80065f6 <_printf_i+0x146>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	4632      	mov	r2, r6
 80066a4:	4649      	mov	r1, r9
 80066a6:	4640      	mov	r0, r8
 80066a8:	47d0      	blx	sl
 80066aa:	3001      	adds	r0, #1
 80066ac:	d0ad      	beq.n	800660a <_printf_i+0x15a>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	079b      	lsls	r3, r3, #30
 80066b2:	d413      	bmi.n	80066dc <_printf_i+0x22c>
 80066b4:	68e0      	ldr	r0, [r4, #12]
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	4298      	cmp	r0, r3
 80066ba:	bfb8      	it	lt
 80066bc:	4618      	movlt	r0, r3
 80066be:	e7a6      	b.n	800660e <_printf_i+0x15e>
 80066c0:	2301      	movs	r3, #1
 80066c2:	4632      	mov	r2, r6
 80066c4:	4649      	mov	r1, r9
 80066c6:	4640      	mov	r0, r8
 80066c8:	47d0      	blx	sl
 80066ca:	3001      	adds	r0, #1
 80066cc:	d09d      	beq.n	800660a <_printf_i+0x15a>
 80066ce:	3501      	adds	r5, #1
 80066d0:	68e3      	ldr	r3, [r4, #12]
 80066d2:	9903      	ldr	r1, [sp, #12]
 80066d4:	1a5b      	subs	r3, r3, r1
 80066d6:	42ab      	cmp	r3, r5
 80066d8:	dcf2      	bgt.n	80066c0 <_printf_i+0x210>
 80066da:	e7eb      	b.n	80066b4 <_printf_i+0x204>
 80066dc:	2500      	movs	r5, #0
 80066de:	f104 0619 	add.w	r6, r4, #25
 80066e2:	e7f5      	b.n	80066d0 <_printf_i+0x220>
 80066e4:	08008852 	.word	0x08008852
 80066e8:	08008863 	.word	0x08008863

080066ec <std>:
 80066ec:	2300      	movs	r3, #0
 80066ee:	b510      	push	{r4, lr}
 80066f0:	4604      	mov	r4, r0
 80066f2:	e9c0 3300 	strd	r3, r3, [r0]
 80066f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066fa:	6083      	str	r3, [r0, #8]
 80066fc:	8181      	strh	r1, [r0, #12]
 80066fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006700:	81c2      	strh	r2, [r0, #14]
 8006702:	6183      	str	r3, [r0, #24]
 8006704:	4619      	mov	r1, r3
 8006706:	2208      	movs	r2, #8
 8006708:	305c      	adds	r0, #92	@ 0x5c
 800670a:	f000 f906 	bl	800691a <memset>
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <std+0x58>)
 8006710:	6263      	str	r3, [r4, #36]	@ 0x24
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <std+0x5c>)
 8006714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <std+0x60>)
 8006718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800671a:	4b0d      	ldr	r3, [pc, #52]	@ (8006750 <std+0x64>)
 800671c:	6323      	str	r3, [r4, #48]	@ 0x30
 800671e:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <std+0x68>)
 8006720:	6224      	str	r4, [r4, #32]
 8006722:	429c      	cmp	r4, r3
 8006724:	d006      	beq.n	8006734 <std+0x48>
 8006726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800672a:	4294      	cmp	r4, r2
 800672c:	d002      	beq.n	8006734 <std+0x48>
 800672e:	33d0      	adds	r3, #208	@ 0xd0
 8006730:	429c      	cmp	r4, r3
 8006732:	d105      	bne.n	8006740 <std+0x54>
 8006734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f000 b96a 	b.w	8006a14 <__retarget_lock_init_recursive>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	08006895 	.word	0x08006895
 8006748:	080068b7 	.word	0x080068b7
 800674c:	080068ef 	.word	0x080068ef
 8006750:	08006913 	.word	0x08006913
 8006754:	20000328 	.word	0x20000328

08006758 <stdio_exit_handler>:
 8006758:	4a02      	ldr	r2, [pc, #8]	@ (8006764 <stdio_exit_handler+0xc>)
 800675a:	4903      	ldr	r1, [pc, #12]	@ (8006768 <stdio_exit_handler+0x10>)
 800675c:	4803      	ldr	r0, [pc, #12]	@ (800676c <stdio_exit_handler+0x14>)
 800675e:	f000 b869 	b.w	8006834 <_fwalk_sglue>
 8006762:	bf00      	nop
 8006764:	20000014 	.word	0x20000014
 8006768:	08008351 	.word	0x08008351
 800676c:	20000024 	.word	0x20000024

08006770 <cleanup_stdio>:
 8006770:	6841      	ldr	r1, [r0, #4]
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <cleanup_stdio+0x34>)
 8006774:	4299      	cmp	r1, r3
 8006776:	b510      	push	{r4, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	d001      	beq.n	8006780 <cleanup_stdio+0x10>
 800677c:	f001 fde8 	bl	8008350 <_fflush_r>
 8006780:	68a1      	ldr	r1, [r4, #8]
 8006782:	4b09      	ldr	r3, [pc, #36]	@ (80067a8 <cleanup_stdio+0x38>)
 8006784:	4299      	cmp	r1, r3
 8006786:	d002      	beq.n	800678e <cleanup_stdio+0x1e>
 8006788:	4620      	mov	r0, r4
 800678a:	f001 fde1 	bl	8008350 <_fflush_r>
 800678e:	68e1      	ldr	r1, [r4, #12]
 8006790:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <cleanup_stdio+0x3c>)
 8006792:	4299      	cmp	r1, r3
 8006794:	d004      	beq.n	80067a0 <cleanup_stdio+0x30>
 8006796:	4620      	mov	r0, r4
 8006798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800679c:	f001 bdd8 	b.w	8008350 <_fflush_r>
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	bf00      	nop
 80067a4:	20000328 	.word	0x20000328
 80067a8:	20000390 	.word	0x20000390
 80067ac:	200003f8 	.word	0x200003f8

080067b0 <global_stdio_init.part.0>:
 80067b0:	b510      	push	{r4, lr}
 80067b2:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <global_stdio_init.part.0+0x30>)
 80067b4:	4c0b      	ldr	r4, [pc, #44]	@ (80067e4 <global_stdio_init.part.0+0x34>)
 80067b6:	4a0c      	ldr	r2, [pc, #48]	@ (80067e8 <global_stdio_init.part.0+0x38>)
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	4620      	mov	r0, r4
 80067bc:	2200      	movs	r2, #0
 80067be:	2104      	movs	r1, #4
 80067c0:	f7ff ff94 	bl	80066ec <std>
 80067c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80067c8:	2201      	movs	r2, #1
 80067ca:	2109      	movs	r1, #9
 80067cc:	f7ff ff8e 	bl	80066ec <std>
 80067d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80067d4:	2202      	movs	r2, #2
 80067d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067da:	2112      	movs	r1, #18
 80067dc:	f7ff bf86 	b.w	80066ec <std>
 80067e0:	20000460 	.word	0x20000460
 80067e4:	20000328 	.word	0x20000328
 80067e8:	08006759 	.word	0x08006759

080067ec <__sfp_lock_acquire>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__sfp_lock_acquire+0x8>)
 80067ee:	f000 b912 	b.w	8006a16 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	20000469 	.word	0x20000469

080067f8 <__sfp_lock_release>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__sfp_lock_release+0x8>)
 80067fa:	f000 b90d 	b.w	8006a18 <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	20000469 	.word	0x20000469

08006804 <__sinit>:
 8006804:	b510      	push	{r4, lr}
 8006806:	4604      	mov	r4, r0
 8006808:	f7ff fff0 	bl	80067ec <__sfp_lock_acquire>
 800680c:	6a23      	ldr	r3, [r4, #32]
 800680e:	b11b      	cbz	r3, 8006818 <__sinit+0x14>
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	f7ff bff0 	b.w	80067f8 <__sfp_lock_release>
 8006818:	4b04      	ldr	r3, [pc, #16]	@ (800682c <__sinit+0x28>)
 800681a:	6223      	str	r3, [r4, #32]
 800681c:	4b04      	ldr	r3, [pc, #16]	@ (8006830 <__sinit+0x2c>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1f5      	bne.n	8006810 <__sinit+0xc>
 8006824:	f7ff ffc4 	bl	80067b0 <global_stdio_init.part.0>
 8006828:	e7f2      	b.n	8006810 <__sinit+0xc>
 800682a:	bf00      	nop
 800682c:	08006771 	.word	0x08006771
 8006830:	20000460 	.word	0x20000460

08006834 <_fwalk_sglue>:
 8006834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006838:	4607      	mov	r7, r0
 800683a:	4688      	mov	r8, r1
 800683c:	4614      	mov	r4, r2
 800683e:	2600      	movs	r6, #0
 8006840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006844:	f1b9 0901 	subs.w	r9, r9, #1
 8006848:	d505      	bpl.n	8006856 <_fwalk_sglue+0x22>
 800684a:	6824      	ldr	r4, [r4, #0]
 800684c:	2c00      	cmp	r4, #0
 800684e:	d1f7      	bne.n	8006840 <_fwalk_sglue+0xc>
 8006850:	4630      	mov	r0, r6
 8006852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006856:	89ab      	ldrh	r3, [r5, #12]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d907      	bls.n	800686c <_fwalk_sglue+0x38>
 800685c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006860:	3301      	adds	r3, #1
 8006862:	d003      	beq.n	800686c <_fwalk_sglue+0x38>
 8006864:	4629      	mov	r1, r5
 8006866:	4638      	mov	r0, r7
 8006868:	47c0      	blx	r8
 800686a:	4306      	orrs	r6, r0
 800686c:	3568      	adds	r5, #104	@ 0x68
 800686e:	e7e9      	b.n	8006844 <_fwalk_sglue+0x10>

08006870 <iprintf>:
 8006870:	b40f      	push	{r0, r1, r2, r3}
 8006872:	b507      	push	{r0, r1, r2, lr}
 8006874:	4906      	ldr	r1, [pc, #24]	@ (8006890 <iprintf+0x20>)
 8006876:	ab04      	add	r3, sp, #16
 8006878:	6808      	ldr	r0, [r1, #0]
 800687a:	f853 2b04 	ldr.w	r2, [r3], #4
 800687e:	6881      	ldr	r1, [r0, #8]
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	f001 fbc9 	bl	8008018 <_vfiprintf_r>
 8006886:	b003      	add	sp, #12
 8006888:	f85d eb04 	ldr.w	lr, [sp], #4
 800688c:	b004      	add	sp, #16
 800688e:	4770      	bx	lr
 8006890:	20000020 	.word	0x20000020

08006894 <__sread>:
 8006894:	b510      	push	{r4, lr}
 8006896:	460c      	mov	r4, r1
 8006898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800689c:	f000 f86c 	bl	8006978 <_read_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	bfab      	itete	ge
 80068a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068a6:	89a3      	ldrhlt	r3, [r4, #12]
 80068a8:	181b      	addge	r3, r3, r0
 80068aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ae:	bfac      	ite	ge
 80068b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068b2:	81a3      	strhlt	r3, [r4, #12]
 80068b4:	bd10      	pop	{r4, pc}

080068b6 <__swrite>:
 80068b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ba:	461f      	mov	r7, r3
 80068bc:	898b      	ldrh	r3, [r1, #12]
 80068be:	05db      	lsls	r3, r3, #23
 80068c0:	4605      	mov	r5, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	4616      	mov	r6, r2
 80068c6:	d505      	bpl.n	80068d4 <__swrite+0x1e>
 80068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068cc:	2302      	movs	r3, #2
 80068ce:	2200      	movs	r2, #0
 80068d0:	f000 f840 	bl	8006954 <_lseek_r>
 80068d4:	89a3      	ldrh	r3, [r4, #12]
 80068d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068de:	81a3      	strh	r3, [r4, #12]
 80068e0:	4632      	mov	r2, r6
 80068e2:	463b      	mov	r3, r7
 80068e4:	4628      	mov	r0, r5
 80068e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	f000 b857 	b.w	800699c <_write_r>

080068ee <__sseek>:
 80068ee:	b510      	push	{r4, lr}
 80068f0:	460c      	mov	r4, r1
 80068f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f6:	f000 f82d 	bl	8006954 <_lseek_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	bf15      	itete	ne
 8006900:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006902:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006906:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800690a:	81a3      	strheq	r3, [r4, #12]
 800690c:	bf18      	it	ne
 800690e:	81a3      	strhne	r3, [r4, #12]
 8006910:	bd10      	pop	{r4, pc}

08006912 <__sclose>:
 8006912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006916:	f000 b80d 	b.w	8006934 <_close_r>

0800691a <memset>:
 800691a:	4402      	add	r2, r0
 800691c:	4603      	mov	r3, r0
 800691e:	4293      	cmp	r3, r2
 8006920:	d100      	bne.n	8006924 <memset+0xa>
 8006922:	4770      	bx	lr
 8006924:	f803 1b01 	strb.w	r1, [r3], #1
 8006928:	e7f9      	b.n	800691e <memset+0x4>
	...

0800692c <_localeconv_r>:
 800692c:	4800      	ldr	r0, [pc, #0]	@ (8006930 <_localeconv_r+0x4>)
 800692e:	4770      	bx	lr
 8006930:	20000160 	.word	0x20000160

08006934 <_close_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4d06      	ldr	r5, [pc, #24]	@ (8006950 <_close_r+0x1c>)
 8006938:	2300      	movs	r3, #0
 800693a:	4604      	mov	r4, r0
 800693c:	4608      	mov	r0, r1
 800693e:	602b      	str	r3, [r5, #0]
 8006940:	f7fc fbf5 	bl	800312e <_close>
 8006944:	1c43      	adds	r3, r0, #1
 8006946:	d102      	bne.n	800694e <_close_r+0x1a>
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	b103      	cbz	r3, 800694e <_close_r+0x1a>
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	bd38      	pop	{r3, r4, r5, pc}
 8006950:	20000464 	.word	0x20000464

08006954 <_lseek_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	4d07      	ldr	r5, [pc, #28]	@ (8006974 <_lseek_r+0x20>)
 8006958:	4604      	mov	r4, r0
 800695a:	4608      	mov	r0, r1
 800695c:	4611      	mov	r1, r2
 800695e:	2200      	movs	r2, #0
 8006960:	602a      	str	r2, [r5, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	f7fc fc0a 	bl	800317c <_lseek>
 8006968:	1c43      	adds	r3, r0, #1
 800696a:	d102      	bne.n	8006972 <_lseek_r+0x1e>
 800696c:	682b      	ldr	r3, [r5, #0]
 800696e:	b103      	cbz	r3, 8006972 <_lseek_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	20000464 	.word	0x20000464

08006978 <_read_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	4d07      	ldr	r5, [pc, #28]	@ (8006998 <_read_r+0x20>)
 800697c:	4604      	mov	r4, r0
 800697e:	4608      	mov	r0, r1
 8006980:	4611      	mov	r1, r2
 8006982:	2200      	movs	r2, #0
 8006984:	602a      	str	r2, [r5, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	f7fc fb98 	bl	80030bc <_read>
 800698c:	1c43      	adds	r3, r0, #1
 800698e:	d102      	bne.n	8006996 <_read_r+0x1e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	b103      	cbz	r3, 8006996 <_read_r+0x1e>
 8006994:	6023      	str	r3, [r4, #0]
 8006996:	bd38      	pop	{r3, r4, r5, pc}
 8006998:	20000464 	.word	0x20000464

0800699c <_write_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d07      	ldr	r5, [pc, #28]	@ (80069bc <_write_r+0x20>)
 80069a0:	4604      	mov	r4, r0
 80069a2:	4608      	mov	r0, r1
 80069a4:	4611      	mov	r1, r2
 80069a6:	2200      	movs	r2, #0
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fc fba3 	bl	80030f6 <_write>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_write_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_write_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000464 	.word	0x20000464

080069c0 <__errno>:
 80069c0:	4b01      	ldr	r3, [pc, #4]	@ (80069c8 <__errno+0x8>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20000020 	.word	0x20000020

080069cc <__libc_init_array>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006a04 <__libc_init_array+0x38>)
 80069d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006a08 <__libc_init_array+0x3c>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	2600      	movs	r6, #0
 80069d8:	42a6      	cmp	r6, r4
 80069da:	d109      	bne.n	80069f0 <__libc_init_array+0x24>
 80069dc:	4d0b      	ldr	r5, [pc, #44]	@ (8006a0c <__libc_init_array+0x40>)
 80069de:	4c0c      	ldr	r4, [pc, #48]	@ (8006a10 <__libc_init_array+0x44>)
 80069e0:	f001 fec4 	bl	800876c <_init>
 80069e4:	1b64      	subs	r4, r4, r5
 80069e6:	10a4      	asrs	r4, r4, #2
 80069e8:	2600      	movs	r6, #0
 80069ea:	42a6      	cmp	r6, r4
 80069ec:	d105      	bne.n	80069fa <__libc_init_array+0x2e>
 80069ee:	bd70      	pop	{r4, r5, r6, pc}
 80069f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069f4:	4798      	blx	r3
 80069f6:	3601      	adds	r6, #1
 80069f8:	e7ee      	b.n	80069d8 <__libc_init_array+0xc>
 80069fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069fe:	4798      	blx	r3
 8006a00:	3601      	adds	r6, #1
 8006a02:	e7f2      	b.n	80069ea <__libc_init_array+0x1e>
 8006a04:	08008bbc 	.word	0x08008bbc
 8006a08:	08008bbc 	.word	0x08008bbc
 8006a0c:	08008bbc 	.word	0x08008bbc
 8006a10:	08008bc0 	.word	0x08008bc0

08006a14 <__retarget_lock_init_recursive>:
 8006a14:	4770      	bx	lr

08006a16 <__retarget_lock_acquire_recursive>:
 8006a16:	4770      	bx	lr

08006a18 <__retarget_lock_release_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <quorem>:
 8006a1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1e:	6903      	ldr	r3, [r0, #16]
 8006a20:	690c      	ldr	r4, [r1, #16]
 8006a22:	42a3      	cmp	r3, r4
 8006a24:	4607      	mov	r7, r0
 8006a26:	db7e      	blt.n	8006b26 <quorem+0x10c>
 8006a28:	3c01      	subs	r4, #1
 8006a2a:	f101 0814 	add.w	r8, r1, #20
 8006a2e:	00a3      	lsls	r3, r4, #2
 8006a30:	f100 0514 	add.w	r5, r0, #20
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a3a:	9301      	str	r3, [sp, #4]
 8006a3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a44:	3301      	adds	r3, #1
 8006a46:	429a      	cmp	r2, r3
 8006a48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a50:	d32e      	bcc.n	8006ab0 <quorem+0x96>
 8006a52:	f04f 0a00 	mov.w	sl, #0
 8006a56:	46c4      	mov	ip, r8
 8006a58:	46ae      	mov	lr, r5
 8006a5a:	46d3      	mov	fp, sl
 8006a5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a60:	b298      	uxth	r0, r3
 8006a62:	fb06 a000 	mla	r0, r6, r0, sl
 8006a66:	0c02      	lsrs	r2, r0, #16
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	fb06 2303 	mla	r3, r6, r3, r2
 8006a6e:	f8de 2000 	ldr.w	r2, [lr]
 8006a72:	b280      	uxth	r0, r0
 8006a74:	b292      	uxth	r2, r2
 8006a76:	1a12      	subs	r2, r2, r0
 8006a78:	445a      	add	r2, fp
 8006a7a:	f8de 0000 	ldr.w	r0, [lr]
 8006a7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a8c:	b292      	uxth	r2, r2
 8006a8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a92:	45e1      	cmp	r9, ip
 8006a94:	f84e 2b04 	str.w	r2, [lr], #4
 8006a98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a9c:	d2de      	bcs.n	8006a5c <quorem+0x42>
 8006a9e:	9b00      	ldr	r3, [sp, #0]
 8006aa0:	58eb      	ldr	r3, [r5, r3]
 8006aa2:	b92b      	cbnz	r3, 8006ab0 <quorem+0x96>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	3b04      	subs	r3, #4
 8006aa8:	429d      	cmp	r5, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	d32f      	bcc.n	8006b0e <quorem+0xf4>
 8006aae:	613c      	str	r4, [r7, #16]
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f001 f97f 	bl	8007db4 <__mcmp>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	db25      	blt.n	8006b06 <quorem+0xec>
 8006aba:	4629      	mov	r1, r5
 8006abc:	2000      	movs	r0, #0
 8006abe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ac2:	f8d1 c000 	ldr.w	ip, [r1]
 8006ac6:	fa1f fe82 	uxth.w	lr, r2
 8006aca:	fa1f f38c 	uxth.w	r3, ip
 8006ace:	eba3 030e 	sub.w	r3, r3, lr
 8006ad2:	4403      	add	r3, r0
 8006ad4:	0c12      	lsrs	r2, r2, #16
 8006ad6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ada:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ae4:	45c1      	cmp	r9, r8
 8006ae6:	f841 3b04 	str.w	r3, [r1], #4
 8006aea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006aee:	d2e6      	bcs.n	8006abe <quorem+0xa4>
 8006af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006af8:	b922      	cbnz	r2, 8006b04 <quorem+0xea>
 8006afa:	3b04      	subs	r3, #4
 8006afc:	429d      	cmp	r5, r3
 8006afe:	461a      	mov	r2, r3
 8006b00:	d30b      	bcc.n	8006b1a <quorem+0x100>
 8006b02:	613c      	str	r4, [r7, #16]
 8006b04:	3601      	adds	r6, #1
 8006b06:	4630      	mov	r0, r6
 8006b08:	b003      	add	sp, #12
 8006b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	3b04      	subs	r3, #4
 8006b12:	2a00      	cmp	r2, #0
 8006b14:	d1cb      	bne.n	8006aae <quorem+0x94>
 8006b16:	3c01      	subs	r4, #1
 8006b18:	e7c6      	b.n	8006aa8 <quorem+0x8e>
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	3b04      	subs	r3, #4
 8006b1e:	2a00      	cmp	r2, #0
 8006b20:	d1ef      	bne.n	8006b02 <quorem+0xe8>
 8006b22:	3c01      	subs	r4, #1
 8006b24:	e7ea      	b.n	8006afc <quorem+0xe2>
 8006b26:	2000      	movs	r0, #0
 8006b28:	e7ee      	b.n	8006b08 <quorem+0xee>
 8006b2a:	0000      	movs	r0, r0
 8006b2c:	0000      	movs	r0, r0
	...

08006b30 <_dtoa_r>:
 8006b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b34:	69c7      	ldr	r7, [r0, #28]
 8006b36:	b097      	sub	sp, #92	@ 0x5c
 8006b38:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006b3c:	ec55 4b10 	vmov	r4, r5, d0
 8006b40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006b42:	9107      	str	r1, [sp, #28]
 8006b44:	4681      	mov	r9, r0
 8006b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b48:	9311      	str	r3, [sp, #68]	@ 0x44
 8006b4a:	b97f      	cbnz	r7, 8006b6c <_dtoa_r+0x3c>
 8006b4c:	2010      	movs	r0, #16
 8006b4e:	f000 fe09 	bl	8007764 <malloc>
 8006b52:	4602      	mov	r2, r0
 8006b54:	f8c9 001c 	str.w	r0, [r9, #28]
 8006b58:	b920      	cbnz	r0, 8006b64 <_dtoa_r+0x34>
 8006b5a:	4ba9      	ldr	r3, [pc, #676]	@ (8006e00 <_dtoa_r+0x2d0>)
 8006b5c:	21ef      	movs	r1, #239	@ 0xef
 8006b5e:	48a9      	ldr	r0, [pc, #676]	@ (8006e04 <_dtoa_r+0x2d4>)
 8006b60:	f001 fcd0 	bl	8008504 <__assert_func>
 8006b64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b68:	6007      	str	r7, [r0, #0]
 8006b6a:	60c7      	str	r7, [r0, #12]
 8006b6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	b159      	cbz	r1, 8006b8c <_dtoa_r+0x5c>
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	604a      	str	r2, [r1, #4]
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4093      	lsls	r3, r2
 8006b7c:	608b      	str	r3, [r1, #8]
 8006b7e:	4648      	mov	r0, r9
 8006b80:	f000 fee6 	bl	8007950 <_Bfree>
 8006b84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	1e2b      	subs	r3, r5, #0
 8006b8e:	bfb9      	ittee	lt
 8006b90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b94:	9305      	strlt	r3, [sp, #20]
 8006b96:	2300      	movge	r3, #0
 8006b98:	6033      	strge	r3, [r6, #0]
 8006b9a:	9f05      	ldr	r7, [sp, #20]
 8006b9c:	4b9a      	ldr	r3, [pc, #616]	@ (8006e08 <_dtoa_r+0x2d8>)
 8006b9e:	bfbc      	itt	lt
 8006ba0:	2201      	movlt	r2, #1
 8006ba2:	6032      	strlt	r2, [r6, #0]
 8006ba4:	43bb      	bics	r3, r7
 8006ba6:	d112      	bne.n	8006bce <_dtoa_r+0x9e>
 8006ba8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006baa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006bae:	6013      	str	r3, [r2, #0]
 8006bb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bb4:	4323      	orrs	r3, r4
 8006bb6:	f000 855a 	beq.w	800766e <_dtoa_r+0xb3e>
 8006bba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bbc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006e1c <_dtoa_r+0x2ec>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 855c 	beq.w	800767e <_dtoa_r+0xb4e>
 8006bc6:	f10a 0303 	add.w	r3, sl, #3
 8006bca:	f000 bd56 	b.w	800767a <_dtoa_r+0xb4a>
 8006bce:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	ec51 0b17 	vmov	r0, r1, d7
 8006bd8:	2300      	movs	r3, #0
 8006bda:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006bde:	f7f9 ff7b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006be2:	4680      	mov	r8, r0
 8006be4:	b158      	cbz	r0, 8006bfe <_dtoa_r+0xce>
 8006be6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006be8:	2301      	movs	r3, #1
 8006bea:	6013      	str	r3, [r2, #0]
 8006bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bee:	b113      	cbz	r3, 8006bf6 <_dtoa_r+0xc6>
 8006bf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006bf2:	4b86      	ldr	r3, [pc, #536]	@ (8006e0c <_dtoa_r+0x2dc>)
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006e20 <_dtoa_r+0x2f0>
 8006bfa:	f000 bd40 	b.w	800767e <_dtoa_r+0xb4e>
 8006bfe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006c02:	aa14      	add	r2, sp, #80	@ 0x50
 8006c04:	a915      	add	r1, sp, #84	@ 0x54
 8006c06:	4648      	mov	r0, r9
 8006c08:	f001 f984 	bl	8007f14 <__d2b>
 8006c0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006c10:	9002      	str	r0, [sp, #8]
 8006c12:	2e00      	cmp	r6, #0
 8006c14:	d078      	beq.n	8006d08 <_dtoa_r+0x1d8>
 8006c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006c28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006c2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006c30:	4619      	mov	r1, r3
 8006c32:	2200      	movs	r2, #0
 8006c34:	4b76      	ldr	r3, [pc, #472]	@ (8006e10 <_dtoa_r+0x2e0>)
 8006c36:	f7f9 fb2f 	bl	8000298 <__aeabi_dsub>
 8006c3a:	a36b      	add	r3, pc, #428	@ (adr r3, 8006de8 <_dtoa_r+0x2b8>)
 8006c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c40:	f7f9 fce2 	bl	8000608 <__aeabi_dmul>
 8006c44:	a36a      	add	r3, pc, #424	@ (adr r3, 8006df0 <_dtoa_r+0x2c0>)
 8006c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4a:	f7f9 fb27 	bl	800029c <__adddf3>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4630      	mov	r0, r6
 8006c52:	460d      	mov	r5, r1
 8006c54:	f7f9 fc6e 	bl	8000534 <__aeabi_i2d>
 8006c58:	a367      	add	r3, pc, #412	@ (adr r3, 8006df8 <_dtoa_r+0x2c8>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fcd3 	bl	8000608 <__aeabi_dmul>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4620      	mov	r0, r4
 8006c68:	4629      	mov	r1, r5
 8006c6a:	f7f9 fb17 	bl	800029c <__adddf3>
 8006c6e:	4604      	mov	r4, r0
 8006c70:	460d      	mov	r5, r1
 8006c72:	f7f9 ff79 	bl	8000b68 <__aeabi_d2iz>
 8006c76:	2200      	movs	r2, #0
 8006c78:	4607      	mov	r7, r0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7f9 ff34 	bl	8000aec <__aeabi_dcmplt>
 8006c84:	b140      	cbz	r0, 8006c98 <_dtoa_r+0x168>
 8006c86:	4638      	mov	r0, r7
 8006c88:	f7f9 fc54 	bl	8000534 <__aeabi_i2d>
 8006c8c:	4622      	mov	r2, r4
 8006c8e:	462b      	mov	r3, r5
 8006c90:	f7f9 ff22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c94:	b900      	cbnz	r0, 8006c98 <_dtoa_r+0x168>
 8006c96:	3f01      	subs	r7, #1
 8006c98:	2f16      	cmp	r7, #22
 8006c9a:	d852      	bhi.n	8006d42 <_dtoa_r+0x212>
 8006c9c:	4b5d      	ldr	r3, [pc, #372]	@ (8006e14 <_dtoa_r+0x2e4>)
 8006c9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006caa:	f7f9 ff1f 	bl	8000aec <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d049      	beq.n	8006d46 <_dtoa_r+0x216>
 8006cb2:	3f01      	subs	r7, #1
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cba:	1b9b      	subs	r3, r3, r6
 8006cbc:	1e5a      	subs	r2, r3, #1
 8006cbe:	bf45      	ittet	mi
 8006cc0:	f1c3 0301 	rsbmi	r3, r3, #1
 8006cc4:	9300      	strmi	r3, [sp, #0]
 8006cc6:	2300      	movpl	r3, #0
 8006cc8:	2300      	movmi	r3, #0
 8006cca:	9206      	str	r2, [sp, #24]
 8006ccc:	bf54      	ite	pl
 8006cce:	9300      	strpl	r3, [sp, #0]
 8006cd0:	9306      	strmi	r3, [sp, #24]
 8006cd2:	2f00      	cmp	r7, #0
 8006cd4:	db39      	blt.n	8006d4a <_dtoa_r+0x21a>
 8006cd6:	9b06      	ldr	r3, [sp, #24]
 8006cd8:	970d      	str	r7, [sp, #52]	@ 0x34
 8006cda:	443b      	add	r3, r7
 8006cdc:	9306      	str	r3, [sp, #24]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9308      	str	r3, [sp, #32]
 8006ce2:	9b07      	ldr	r3, [sp, #28]
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	d863      	bhi.n	8006db0 <_dtoa_r+0x280>
 8006ce8:	2b05      	cmp	r3, #5
 8006cea:	bfc4      	itt	gt
 8006cec:	3b04      	subgt	r3, #4
 8006cee:	9307      	strgt	r3, [sp, #28]
 8006cf0:	9b07      	ldr	r3, [sp, #28]
 8006cf2:	f1a3 0302 	sub.w	r3, r3, #2
 8006cf6:	bfcc      	ite	gt
 8006cf8:	2400      	movgt	r4, #0
 8006cfa:	2401      	movle	r4, #1
 8006cfc:	2b03      	cmp	r3, #3
 8006cfe:	d863      	bhi.n	8006dc8 <_dtoa_r+0x298>
 8006d00:	e8df f003 	tbb	[pc, r3]
 8006d04:	2b375452 	.word	0x2b375452
 8006d08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006d0c:	441e      	add	r6, r3
 8006d0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	bfc1      	itttt	gt
 8006d16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006d1a:	409f      	lslgt	r7, r3
 8006d1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006d20:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006d24:	bfd6      	itet	le
 8006d26:	f1c3 0320 	rsble	r3, r3, #32
 8006d2a:	ea47 0003 	orrgt.w	r0, r7, r3
 8006d2e:	fa04 f003 	lslle.w	r0, r4, r3
 8006d32:	f7f9 fbef 	bl	8000514 <__aeabi_ui2d>
 8006d36:	2201      	movs	r2, #1
 8006d38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006d3c:	3e01      	subs	r6, #1
 8006d3e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d40:	e776      	b.n	8006c30 <_dtoa_r+0x100>
 8006d42:	2301      	movs	r3, #1
 8006d44:	e7b7      	b.n	8006cb6 <_dtoa_r+0x186>
 8006d46:	9010      	str	r0, [sp, #64]	@ 0x40
 8006d48:	e7b6      	b.n	8006cb8 <_dtoa_r+0x188>
 8006d4a:	9b00      	ldr	r3, [sp, #0]
 8006d4c:	1bdb      	subs	r3, r3, r7
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	427b      	negs	r3, r7
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	2300      	movs	r3, #0
 8006d56:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d58:	e7c3      	b.n	8006ce2 <_dtoa_r+0x1b2>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d60:	eb07 0b03 	add.w	fp, r7, r3
 8006d64:	f10b 0301 	add.w	r3, fp, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	9303      	str	r3, [sp, #12]
 8006d6c:	bfb8      	it	lt
 8006d6e:	2301      	movlt	r3, #1
 8006d70:	e006      	b.n	8006d80 <_dtoa_r+0x250>
 8006d72:	2301      	movs	r3, #1
 8006d74:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	dd28      	ble.n	8006dce <_dtoa_r+0x29e>
 8006d7c:	469b      	mov	fp, r3
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006d84:	2100      	movs	r1, #0
 8006d86:	2204      	movs	r2, #4
 8006d88:	f102 0514 	add.w	r5, r2, #20
 8006d8c:	429d      	cmp	r5, r3
 8006d8e:	d926      	bls.n	8006dde <_dtoa_r+0x2ae>
 8006d90:	6041      	str	r1, [r0, #4]
 8006d92:	4648      	mov	r0, r9
 8006d94:	f000 fd9c 	bl	80078d0 <_Balloc>
 8006d98:	4682      	mov	sl, r0
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d142      	bne.n	8006e24 <_dtoa_r+0x2f4>
 8006d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006e18 <_dtoa_r+0x2e8>)
 8006da0:	4602      	mov	r2, r0
 8006da2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006da6:	e6da      	b.n	8006b5e <_dtoa_r+0x2e>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e7e3      	b.n	8006d74 <_dtoa_r+0x244>
 8006dac:	2300      	movs	r3, #0
 8006dae:	e7d5      	b.n	8006d5c <_dtoa_r+0x22c>
 8006db0:	2401      	movs	r4, #1
 8006db2:	2300      	movs	r3, #0
 8006db4:	9307      	str	r3, [sp, #28]
 8006db6:	9409      	str	r4, [sp, #36]	@ 0x24
 8006db8:	f04f 3bff 	mov.w	fp, #4294967295
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006dc2:	2312      	movs	r3, #18
 8006dc4:	920c      	str	r2, [sp, #48]	@ 0x30
 8006dc6:	e7db      	b.n	8006d80 <_dtoa_r+0x250>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dcc:	e7f4      	b.n	8006db8 <_dtoa_r+0x288>
 8006dce:	f04f 0b01 	mov.w	fp, #1
 8006dd2:	f8cd b00c 	str.w	fp, [sp, #12]
 8006dd6:	465b      	mov	r3, fp
 8006dd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006ddc:	e7d0      	b.n	8006d80 <_dtoa_r+0x250>
 8006dde:	3101      	adds	r1, #1
 8006de0:	0052      	lsls	r2, r2, #1
 8006de2:	e7d1      	b.n	8006d88 <_dtoa_r+0x258>
 8006de4:	f3af 8000 	nop.w
 8006de8:	636f4361 	.word	0x636f4361
 8006dec:	3fd287a7 	.word	0x3fd287a7
 8006df0:	8b60c8b3 	.word	0x8b60c8b3
 8006df4:	3fc68a28 	.word	0x3fc68a28
 8006df8:	509f79fb 	.word	0x509f79fb
 8006dfc:	3fd34413 	.word	0x3fd34413
 8006e00:	08008881 	.word	0x08008881
 8006e04:	08008898 	.word	0x08008898
 8006e08:	7ff00000 	.word	0x7ff00000
 8006e0c:	08008851 	.word	0x08008851
 8006e10:	3ff80000 	.word	0x3ff80000
 8006e14:	080089e8 	.word	0x080089e8
 8006e18:	080088f0 	.word	0x080088f0
 8006e1c:	0800887d 	.word	0x0800887d
 8006e20:	08008850 	.word	0x08008850
 8006e24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006e28:	6018      	str	r0, [r3, #0]
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	2b0e      	cmp	r3, #14
 8006e2e:	f200 80a1 	bhi.w	8006f74 <_dtoa_r+0x444>
 8006e32:	2c00      	cmp	r4, #0
 8006e34:	f000 809e 	beq.w	8006f74 <_dtoa_r+0x444>
 8006e38:	2f00      	cmp	r7, #0
 8006e3a:	dd33      	ble.n	8006ea4 <_dtoa_r+0x374>
 8006e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80070b0 <_dtoa_r+0x580>)
 8006e3e:	f007 020f 	and.w	r2, r7, #15
 8006e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e46:	ed93 7b00 	vldr	d7, [r3]
 8006e4a:	05f8      	lsls	r0, r7, #23
 8006e4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006e50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e54:	d516      	bpl.n	8006e84 <_dtoa_r+0x354>
 8006e56:	4b97      	ldr	r3, [pc, #604]	@ (80070b4 <_dtoa_r+0x584>)
 8006e58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e60:	f7f9 fcfc 	bl	800085c <__aeabi_ddiv>
 8006e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e68:	f004 040f 	and.w	r4, r4, #15
 8006e6c:	2603      	movs	r6, #3
 8006e6e:	4d91      	ldr	r5, [pc, #580]	@ (80070b4 <_dtoa_r+0x584>)
 8006e70:	b954      	cbnz	r4, 8006e88 <_dtoa_r+0x358>
 8006e72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e7a:	f7f9 fcef 	bl	800085c <__aeabi_ddiv>
 8006e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e82:	e028      	b.n	8006ed6 <_dtoa_r+0x3a6>
 8006e84:	2602      	movs	r6, #2
 8006e86:	e7f2      	b.n	8006e6e <_dtoa_r+0x33e>
 8006e88:	07e1      	lsls	r1, r4, #31
 8006e8a:	d508      	bpl.n	8006e9e <_dtoa_r+0x36e>
 8006e8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e94:	f7f9 fbb8 	bl	8000608 <__aeabi_dmul>
 8006e98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e9c:	3601      	adds	r6, #1
 8006e9e:	1064      	asrs	r4, r4, #1
 8006ea0:	3508      	adds	r5, #8
 8006ea2:	e7e5      	b.n	8006e70 <_dtoa_r+0x340>
 8006ea4:	f000 80af 	beq.w	8007006 <_dtoa_r+0x4d6>
 8006ea8:	427c      	negs	r4, r7
 8006eaa:	4b81      	ldr	r3, [pc, #516]	@ (80070b0 <_dtoa_r+0x580>)
 8006eac:	4d81      	ldr	r5, [pc, #516]	@ (80070b4 <_dtoa_r+0x584>)
 8006eae:	f004 020f 	and.w	r2, r4, #15
 8006eb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006ebe:	f7f9 fba3 	bl	8000608 <__aeabi_dmul>
 8006ec2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ec6:	1124      	asrs	r4, r4, #4
 8006ec8:	2300      	movs	r3, #0
 8006eca:	2602      	movs	r6, #2
 8006ecc:	2c00      	cmp	r4, #0
 8006ece:	f040 808f 	bne.w	8006ff0 <_dtoa_r+0x4c0>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1d3      	bne.n	8006e7e <_dtoa_r+0x34e>
 8006ed6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ed8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8094 	beq.w	800700a <_dtoa_r+0x4da>
 8006ee2:	4b75      	ldr	r3, [pc, #468]	@ (80070b8 <_dtoa_r+0x588>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fdff 	bl	8000aec <__aeabi_dcmplt>
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f000 808b 	beq.w	800700a <_dtoa_r+0x4da>
 8006ef4:	9b03      	ldr	r3, [sp, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 8087 	beq.w	800700a <_dtoa_r+0x4da>
 8006efc:	f1bb 0f00 	cmp.w	fp, #0
 8006f00:	dd34      	ble.n	8006f6c <_dtoa_r+0x43c>
 8006f02:	4620      	mov	r0, r4
 8006f04:	4b6d      	ldr	r3, [pc, #436]	@ (80070bc <_dtoa_r+0x58c>)
 8006f06:	2200      	movs	r2, #0
 8006f08:	4629      	mov	r1, r5
 8006f0a:	f7f9 fb7d 	bl	8000608 <__aeabi_dmul>
 8006f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f12:	f107 38ff 	add.w	r8, r7, #4294967295
 8006f16:	3601      	adds	r6, #1
 8006f18:	465c      	mov	r4, fp
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7f9 fb0a 	bl	8000534 <__aeabi_i2d>
 8006f20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f24:	f7f9 fb70 	bl	8000608 <__aeabi_dmul>
 8006f28:	4b65      	ldr	r3, [pc, #404]	@ (80070c0 <_dtoa_r+0x590>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f7f9 f9b6 	bl	800029c <__adddf3>
 8006f30:	4605      	mov	r5, r0
 8006f32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d16a      	bne.n	8007010 <_dtoa_r+0x4e0>
 8006f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f3e:	4b61      	ldr	r3, [pc, #388]	@ (80070c4 <_dtoa_r+0x594>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	f7f9 f9a9 	bl	8000298 <__aeabi_dsub>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4633      	mov	r3, r6
 8006f52:	f7f9 fde9 	bl	8000b28 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f040 8298 	bne.w	800748c <_dtoa_r+0x95c>
 8006f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f60:	462a      	mov	r2, r5
 8006f62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f66:	f7f9 fdc1 	bl	8000aec <__aeabi_dcmplt>
 8006f6a:	bb38      	cbnz	r0, 8006fbc <_dtoa_r+0x48c>
 8006f6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006f70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f2c0 8157 	blt.w	800722a <_dtoa_r+0x6fa>
 8006f7c:	2f0e      	cmp	r7, #14
 8006f7e:	f300 8154 	bgt.w	800722a <_dtoa_r+0x6fa>
 8006f82:	4b4b      	ldr	r3, [pc, #300]	@ (80070b0 <_dtoa_r+0x580>)
 8006f84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f88:	ed93 7b00 	vldr	d7, [r3]
 8006f8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	ed8d 7b00 	vstr	d7, [sp]
 8006f94:	f280 80e5 	bge.w	8007162 <_dtoa_r+0x632>
 8006f98:	9b03      	ldr	r3, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f300 80e1 	bgt.w	8007162 <_dtoa_r+0x632>
 8006fa0:	d10c      	bne.n	8006fbc <_dtoa_r+0x48c>
 8006fa2:	4b48      	ldr	r3, [pc, #288]	@ (80070c4 <_dtoa_r+0x594>)
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	ec51 0b17 	vmov	r0, r1, d7
 8006faa:	f7f9 fb2d 	bl	8000608 <__aeabi_dmul>
 8006fae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb2:	f7f9 fdaf 	bl	8000b14 <__aeabi_dcmpge>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	f000 8266 	beq.w	8007488 <_dtoa_r+0x958>
 8006fbc:	2400      	movs	r4, #0
 8006fbe:	4625      	mov	r5, r4
 8006fc0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006fc2:	4656      	mov	r6, sl
 8006fc4:	ea6f 0803 	mvn.w	r8, r3
 8006fc8:	2700      	movs	r7, #0
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f000 fcbf 	bl	8007950 <_Bfree>
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	f000 80bd 	beq.w	8007152 <_dtoa_r+0x622>
 8006fd8:	b12f      	cbz	r7, 8006fe6 <_dtoa_r+0x4b6>
 8006fda:	42af      	cmp	r7, r5
 8006fdc:	d003      	beq.n	8006fe6 <_dtoa_r+0x4b6>
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	f000 fcb5 	bl	8007950 <_Bfree>
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	4648      	mov	r0, r9
 8006fea:	f000 fcb1 	bl	8007950 <_Bfree>
 8006fee:	e0b0      	b.n	8007152 <_dtoa_r+0x622>
 8006ff0:	07e2      	lsls	r2, r4, #31
 8006ff2:	d505      	bpl.n	8007000 <_dtoa_r+0x4d0>
 8006ff4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ff8:	f7f9 fb06 	bl	8000608 <__aeabi_dmul>
 8006ffc:	3601      	adds	r6, #1
 8006ffe:	2301      	movs	r3, #1
 8007000:	1064      	asrs	r4, r4, #1
 8007002:	3508      	adds	r5, #8
 8007004:	e762      	b.n	8006ecc <_dtoa_r+0x39c>
 8007006:	2602      	movs	r6, #2
 8007008:	e765      	b.n	8006ed6 <_dtoa_r+0x3a6>
 800700a:	9c03      	ldr	r4, [sp, #12]
 800700c:	46b8      	mov	r8, r7
 800700e:	e784      	b.n	8006f1a <_dtoa_r+0x3ea>
 8007010:	4b27      	ldr	r3, [pc, #156]	@ (80070b0 <_dtoa_r+0x580>)
 8007012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007014:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007018:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800701c:	4454      	add	r4, sl
 800701e:	2900      	cmp	r1, #0
 8007020:	d054      	beq.n	80070cc <_dtoa_r+0x59c>
 8007022:	4929      	ldr	r1, [pc, #164]	@ (80070c8 <_dtoa_r+0x598>)
 8007024:	2000      	movs	r0, #0
 8007026:	f7f9 fc19 	bl	800085c <__aeabi_ddiv>
 800702a:	4633      	mov	r3, r6
 800702c:	462a      	mov	r2, r5
 800702e:	f7f9 f933 	bl	8000298 <__aeabi_dsub>
 8007032:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007036:	4656      	mov	r6, sl
 8007038:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800703c:	f7f9 fd94 	bl	8000b68 <__aeabi_d2iz>
 8007040:	4605      	mov	r5, r0
 8007042:	f7f9 fa77 	bl	8000534 <__aeabi_i2d>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800704e:	f7f9 f923 	bl	8000298 <__aeabi_dsub>
 8007052:	3530      	adds	r5, #48	@ 0x30
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800705c:	f806 5b01 	strb.w	r5, [r6], #1
 8007060:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007064:	f7f9 fd42 	bl	8000aec <__aeabi_dcmplt>
 8007068:	2800      	cmp	r0, #0
 800706a:	d172      	bne.n	8007152 <_dtoa_r+0x622>
 800706c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007070:	4911      	ldr	r1, [pc, #68]	@ (80070b8 <_dtoa_r+0x588>)
 8007072:	2000      	movs	r0, #0
 8007074:	f7f9 f910 	bl	8000298 <__aeabi_dsub>
 8007078:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800707c:	f7f9 fd36 	bl	8000aec <__aeabi_dcmplt>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 80b4 	bne.w	80071ee <_dtoa_r+0x6be>
 8007086:	42a6      	cmp	r6, r4
 8007088:	f43f af70 	beq.w	8006f6c <_dtoa_r+0x43c>
 800708c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007090:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <_dtoa_r+0x58c>)
 8007092:	2200      	movs	r2, #0
 8007094:	f7f9 fab8 	bl	8000608 <__aeabi_dmul>
 8007098:	4b08      	ldr	r3, [pc, #32]	@ (80070bc <_dtoa_r+0x58c>)
 800709a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800709e:	2200      	movs	r2, #0
 80070a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a4:	f7f9 fab0 	bl	8000608 <__aeabi_dmul>
 80070a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070ac:	e7c4      	b.n	8007038 <_dtoa_r+0x508>
 80070ae:	bf00      	nop
 80070b0:	080089e8 	.word	0x080089e8
 80070b4:	080089c0 	.word	0x080089c0
 80070b8:	3ff00000 	.word	0x3ff00000
 80070bc:	40240000 	.word	0x40240000
 80070c0:	401c0000 	.word	0x401c0000
 80070c4:	40140000 	.word	0x40140000
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	f7f9 fa9a 	bl	8000608 <__aeabi_dmul>
 80070d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80070d8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80070da:	4656      	mov	r6, sl
 80070dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e0:	f7f9 fd42 	bl	8000b68 <__aeabi_d2iz>
 80070e4:	4605      	mov	r5, r0
 80070e6:	f7f9 fa25 	bl	8000534 <__aeabi_i2d>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f2:	f7f9 f8d1 	bl	8000298 <__aeabi_dsub>
 80070f6:	3530      	adds	r5, #48	@ 0x30
 80070f8:	f806 5b01 	strb.w	r5, [r6], #1
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	42a6      	cmp	r6, r4
 8007102:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007106:	f04f 0200 	mov.w	r2, #0
 800710a:	d124      	bne.n	8007156 <_dtoa_r+0x626>
 800710c:	4baf      	ldr	r3, [pc, #700]	@ (80073cc <_dtoa_r+0x89c>)
 800710e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007112:	f7f9 f8c3 	bl	800029c <__adddf3>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800711e:	f7f9 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8007122:	2800      	cmp	r0, #0
 8007124:	d163      	bne.n	80071ee <_dtoa_r+0x6be>
 8007126:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800712a:	49a8      	ldr	r1, [pc, #672]	@ (80073cc <_dtoa_r+0x89c>)
 800712c:	2000      	movs	r0, #0
 800712e:	f7f9 f8b3 	bl	8000298 <__aeabi_dsub>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800713a:	f7f9 fcd7 	bl	8000aec <__aeabi_dcmplt>
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f af14 	beq.w	8006f6c <_dtoa_r+0x43c>
 8007144:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007146:	1e73      	subs	r3, r6, #1
 8007148:	9313      	str	r3, [sp, #76]	@ 0x4c
 800714a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800714e:	2b30      	cmp	r3, #48	@ 0x30
 8007150:	d0f8      	beq.n	8007144 <_dtoa_r+0x614>
 8007152:	4647      	mov	r7, r8
 8007154:	e03b      	b.n	80071ce <_dtoa_r+0x69e>
 8007156:	4b9e      	ldr	r3, [pc, #632]	@ (80073d0 <_dtoa_r+0x8a0>)
 8007158:	f7f9 fa56 	bl	8000608 <__aeabi_dmul>
 800715c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007160:	e7bc      	b.n	80070dc <_dtoa_r+0x5ac>
 8007162:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007166:	4656      	mov	r6, sl
 8007168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f7f9 fb74 	bl	800085c <__aeabi_ddiv>
 8007174:	f7f9 fcf8 	bl	8000b68 <__aeabi_d2iz>
 8007178:	4680      	mov	r8, r0
 800717a:	f7f9 f9db 	bl	8000534 <__aeabi_i2d>
 800717e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007182:	f7f9 fa41 	bl	8000608 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007192:	f7f9 f881 	bl	8000298 <__aeabi_dsub>
 8007196:	f806 4b01 	strb.w	r4, [r6], #1
 800719a:	9d03      	ldr	r5, [sp, #12]
 800719c:	eba6 040a 	sub.w	r4, r6, sl
 80071a0:	42a5      	cmp	r5, r4
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	d133      	bne.n	8007210 <_dtoa_r+0x6e0>
 80071a8:	f7f9 f878 	bl	800029c <__adddf3>
 80071ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b0:	4604      	mov	r4, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	f7f9 fcb8 	bl	8000b28 <__aeabi_dcmpgt>
 80071b8:	b9c0      	cbnz	r0, 80071ec <_dtoa_r+0x6bc>
 80071ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 80071c6:	b110      	cbz	r0, 80071ce <_dtoa_r+0x69e>
 80071c8:	f018 0f01 	tst.w	r8, #1
 80071cc:	d10e      	bne.n	80071ec <_dtoa_r+0x6bc>
 80071ce:	9902      	ldr	r1, [sp, #8]
 80071d0:	4648      	mov	r0, r9
 80071d2:	f000 fbbd 	bl	8007950 <_Bfree>
 80071d6:	2300      	movs	r3, #0
 80071d8:	7033      	strb	r3, [r6, #0]
 80071da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071dc:	3701      	adds	r7, #1
 80071de:	601f      	str	r7, [r3, #0]
 80071e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 824b 	beq.w	800767e <_dtoa_r+0xb4e>
 80071e8:	601e      	str	r6, [r3, #0]
 80071ea:	e248      	b.n	800767e <_dtoa_r+0xb4e>
 80071ec:	46b8      	mov	r8, r7
 80071ee:	4633      	mov	r3, r6
 80071f0:	461e      	mov	r6, r3
 80071f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071f6:	2a39      	cmp	r2, #57	@ 0x39
 80071f8:	d106      	bne.n	8007208 <_dtoa_r+0x6d8>
 80071fa:	459a      	cmp	sl, r3
 80071fc:	d1f8      	bne.n	80071f0 <_dtoa_r+0x6c0>
 80071fe:	2230      	movs	r2, #48	@ 0x30
 8007200:	f108 0801 	add.w	r8, r8, #1
 8007204:	f88a 2000 	strb.w	r2, [sl]
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	3201      	adds	r2, #1
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	e7a0      	b.n	8007152 <_dtoa_r+0x622>
 8007210:	4b6f      	ldr	r3, [pc, #444]	@ (80073d0 <_dtoa_r+0x8a0>)
 8007212:	2200      	movs	r2, #0
 8007214:	f7f9 f9f8 	bl	8000608 <__aeabi_dmul>
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	4604      	mov	r4, r0
 800721e:	460d      	mov	r5, r1
 8007220:	f7f9 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007224:	2800      	cmp	r0, #0
 8007226:	d09f      	beq.n	8007168 <_dtoa_r+0x638>
 8007228:	e7d1      	b.n	80071ce <_dtoa_r+0x69e>
 800722a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800722c:	2a00      	cmp	r2, #0
 800722e:	f000 80ea 	beq.w	8007406 <_dtoa_r+0x8d6>
 8007232:	9a07      	ldr	r2, [sp, #28]
 8007234:	2a01      	cmp	r2, #1
 8007236:	f300 80cd 	bgt.w	80073d4 <_dtoa_r+0x8a4>
 800723a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800723c:	2a00      	cmp	r2, #0
 800723e:	f000 80c1 	beq.w	80073c4 <_dtoa_r+0x894>
 8007242:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007246:	9c08      	ldr	r4, [sp, #32]
 8007248:	9e00      	ldr	r6, [sp, #0]
 800724a:	9a00      	ldr	r2, [sp, #0]
 800724c:	441a      	add	r2, r3
 800724e:	9200      	str	r2, [sp, #0]
 8007250:	9a06      	ldr	r2, [sp, #24]
 8007252:	2101      	movs	r1, #1
 8007254:	441a      	add	r2, r3
 8007256:	4648      	mov	r0, r9
 8007258:	9206      	str	r2, [sp, #24]
 800725a:	f000 fc2d 	bl	8007ab8 <__i2b>
 800725e:	4605      	mov	r5, r0
 8007260:	b166      	cbz	r6, 800727c <_dtoa_r+0x74c>
 8007262:	9b06      	ldr	r3, [sp, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dd09      	ble.n	800727c <_dtoa_r+0x74c>
 8007268:	42b3      	cmp	r3, r6
 800726a:	9a00      	ldr	r2, [sp, #0]
 800726c:	bfa8      	it	ge
 800726e:	4633      	movge	r3, r6
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	9200      	str	r2, [sp, #0]
 8007274:	9a06      	ldr	r2, [sp, #24]
 8007276:	1af6      	subs	r6, r6, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	9b08      	ldr	r3, [sp, #32]
 800727e:	b30b      	cbz	r3, 80072c4 <_dtoa_r+0x794>
 8007280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 80c6 	beq.w	8007414 <_dtoa_r+0x8e4>
 8007288:	2c00      	cmp	r4, #0
 800728a:	f000 80c0 	beq.w	800740e <_dtoa_r+0x8de>
 800728e:	4629      	mov	r1, r5
 8007290:	4622      	mov	r2, r4
 8007292:	4648      	mov	r0, r9
 8007294:	f000 fcc8 	bl	8007c28 <__pow5mult>
 8007298:	9a02      	ldr	r2, [sp, #8]
 800729a:	4601      	mov	r1, r0
 800729c:	4605      	mov	r5, r0
 800729e:	4648      	mov	r0, r9
 80072a0:	f000 fc20 	bl	8007ae4 <__multiply>
 80072a4:	9902      	ldr	r1, [sp, #8]
 80072a6:	4680      	mov	r8, r0
 80072a8:	4648      	mov	r0, r9
 80072aa:	f000 fb51 	bl	8007950 <_Bfree>
 80072ae:	9b08      	ldr	r3, [sp, #32]
 80072b0:	1b1b      	subs	r3, r3, r4
 80072b2:	9308      	str	r3, [sp, #32]
 80072b4:	f000 80b1 	beq.w	800741a <_dtoa_r+0x8ea>
 80072b8:	9a08      	ldr	r2, [sp, #32]
 80072ba:	4641      	mov	r1, r8
 80072bc:	4648      	mov	r0, r9
 80072be:	f000 fcb3 	bl	8007c28 <__pow5mult>
 80072c2:	9002      	str	r0, [sp, #8]
 80072c4:	2101      	movs	r1, #1
 80072c6:	4648      	mov	r0, r9
 80072c8:	f000 fbf6 	bl	8007ab8 <__i2b>
 80072cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072ce:	4604      	mov	r4, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f000 81d8 	beq.w	8007686 <_dtoa_r+0xb56>
 80072d6:	461a      	mov	r2, r3
 80072d8:	4601      	mov	r1, r0
 80072da:	4648      	mov	r0, r9
 80072dc:	f000 fca4 	bl	8007c28 <__pow5mult>
 80072e0:	9b07      	ldr	r3, [sp, #28]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	4604      	mov	r4, r0
 80072e6:	f300 809f 	bgt.w	8007428 <_dtoa_r+0x8f8>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8097 	bne.w	8007420 <_dtoa_r+0x8f0>
 80072f2:	9b05      	ldr	r3, [sp, #20]
 80072f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f040 8093 	bne.w	8007424 <_dtoa_r+0x8f4>
 80072fe:	9b05      	ldr	r3, [sp, #20]
 8007300:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007304:	0d1b      	lsrs	r3, r3, #20
 8007306:	051b      	lsls	r3, r3, #20
 8007308:	b133      	cbz	r3, 8007318 <_dtoa_r+0x7e8>
 800730a:	9b00      	ldr	r3, [sp, #0]
 800730c:	3301      	adds	r3, #1
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	9b06      	ldr	r3, [sp, #24]
 8007312:	3301      	adds	r3, #1
 8007314:	9306      	str	r3, [sp, #24]
 8007316:	2301      	movs	r3, #1
 8007318:	9308      	str	r3, [sp, #32]
 800731a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 81b8 	beq.w	8007692 <_dtoa_r+0xb62>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007328:	6918      	ldr	r0, [r3, #16]
 800732a:	f000 fb79 	bl	8007a20 <__hi0bits>
 800732e:	f1c0 0020 	rsb	r0, r0, #32
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	4418      	add	r0, r3
 8007336:	f010 001f 	ands.w	r0, r0, #31
 800733a:	f000 8082 	beq.w	8007442 <_dtoa_r+0x912>
 800733e:	f1c0 0320 	rsb	r3, r0, #32
 8007342:	2b04      	cmp	r3, #4
 8007344:	dd73      	ble.n	800742e <_dtoa_r+0x8fe>
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	f1c0 001c 	rsb	r0, r0, #28
 800734c:	4403      	add	r3, r0
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	4403      	add	r3, r0
 8007354:	4406      	add	r6, r0
 8007356:	9306      	str	r3, [sp, #24]
 8007358:	9b00      	ldr	r3, [sp, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	dd05      	ble.n	800736a <_dtoa_r+0x83a>
 800735e:	9902      	ldr	r1, [sp, #8]
 8007360:	461a      	mov	r2, r3
 8007362:	4648      	mov	r0, r9
 8007364:	f000 fcba 	bl	8007cdc <__lshift>
 8007368:	9002      	str	r0, [sp, #8]
 800736a:	9b06      	ldr	r3, [sp, #24]
 800736c:	2b00      	cmp	r3, #0
 800736e:	dd05      	ble.n	800737c <_dtoa_r+0x84c>
 8007370:	4621      	mov	r1, r4
 8007372:	461a      	mov	r2, r3
 8007374:	4648      	mov	r0, r9
 8007376:	f000 fcb1 	bl	8007cdc <__lshift>
 800737a:	4604      	mov	r4, r0
 800737c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800737e:	2b00      	cmp	r3, #0
 8007380:	d061      	beq.n	8007446 <_dtoa_r+0x916>
 8007382:	9802      	ldr	r0, [sp, #8]
 8007384:	4621      	mov	r1, r4
 8007386:	f000 fd15 	bl	8007db4 <__mcmp>
 800738a:	2800      	cmp	r0, #0
 800738c:	da5b      	bge.n	8007446 <_dtoa_r+0x916>
 800738e:	2300      	movs	r3, #0
 8007390:	9902      	ldr	r1, [sp, #8]
 8007392:	220a      	movs	r2, #10
 8007394:	4648      	mov	r0, r9
 8007396:	f000 fafd 	bl	8007994 <__multadd>
 800739a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739c:	9002      	str	r0, [sp, #8]
 800739e:	f107 38ff 	add.w	r8, r7, #4294967295
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8177 	beq.w	8007696 <_dtoa_r+0xb66>
 80073a8:	4629      	mov	r1, r5
 80073aa:	2300      	movs	r3, #0
 80073ac:	220a      	movs	r2, #10
 80073ae:	4648      	mov	r0, r9
 80073b0:	f000 faf0 	bl	8007994 <__multadd>
 80073b4:	f1bb 0f00 	cmp.w	fp, #0
 80073b8:	4605      	mov	r5, r0
 80073ba:	dc6f      	bgt.n	800749c <_dtoa_r+0x96c>
 80073bc:	9b07      	ldr	r3, [sp, #28]
 80073be:	2b02      	cmp	r3, #2
 80073c0:	dc49      	bgt.n	8007456 <_dtoa_r+0x926>
 80073c2:	e06b      	b.n	800749c <_dtoa_r+0x96c>
 80073c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80073c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80073ca:	e73c      	b.n	8007246 <_dtoa_r+0x716>
 80073cc:	3fe00000 	.word	0x3fe00000
 80073d0:	40240000 	.word	0x40240000
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	1e5c      	subs	r4, r3, #1
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	42a3      	cmp	r3, r4
 80073dc:	db09      	blt.n	80073f2 <_dtoa_r+0x8c2>
 80073de:	1b1c      	subs	r4, r3, r4
 80073e0:	9b03      	ldr	r3, [sp, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f6bf af30 	bge.w	8007248 <_dtoa_r+0x718>
 80073e8:	9b00      	ldr	r3, [sp, #0]
 80073ea:	9a03      	ldr	r2, [sp, #12]
 80073ec:	1a9e      	subs	r6, r3, r2
 80073ee:	2300      	movs	r3, #0
 80073f0:	e72b      	b.n	800724a <_dtoa_r+0x71a>
 80073f2:	9b08      	ldr	r3, [sp, #32]
 80073f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073f6:	9408      	str	r4, [sp, #32]
 80073f8:	1ae3      	subs	r3, r4, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	9e00      	ldr	r6, [sp, #0]
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	920d      	str	r2, [sp, #52]	@ 0x34
 8007402:	2400      	movs	r4, #0
 8007404:	e721      	b.n	800724a <_dtoa_r+0x71a>
 8007406:	9c08      	ldr	r4, [sp, #32]
 8007408:	9e00      	ldr	r6, [sp, #0]
 800740a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800740c:	e728      	b.n	8007260 <_dtoa_r+0x730>
 800740e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007412:	e751      	b.n	80072b8 <_dtoa_r+0x788>
 8007414:	9a08      	ldr	r2, [sp, #32]
 8007416:	9902      	ldr	r1, [sp, #8]
 8007418:	e750      	b.n	80072bc <_dtoa_r+0x78c>
 800741a:	f8cd 8008 	str.w	r8, [sp, #8]
 800741e:	e751      	b.n	80072c4 <_dtoa_r+0x794>
 8007420:	2300      	movs	r3, #0
 8007422:	e779      	b.n	8007318 <_dtoa_r+0x7e8>
 8007424:	9b04      	ldr	r3, [sp, #16]
 8007426:	e777      	b.n	8007318 <_dtoa_r+0x7e8>
 8007428:	2300      	movs	r3, #0
 800742a:	9308      	str	r3, [sp, #32]
 800742c:	e779      	b.n	8007322 <_dtoa_r+0x7f2>
 800742e:	d093      	beq.n	8007358 <_dtoa_r+0x828>
 8007430:	9a00      	ldr	r2, [sp, #0]
 8007432:	331c      	adds	r3, #28
 8007434:	441a      	add	r2, r3
 8007436:	9200      	str	r2, [sp, #0]
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	441a      	add	r2, r3
 800743c:	441e      	add	r6, r3
 800743e:	9206      	str	r2, [sp, #24]
 8007440:	e78a      	b.n	8007358 <_dtoa_r+0x828>
 8007442:	4603      	mov	r3, r0
 8007444:	e7f4      	b.n	8007430 <_dtoa_r+0x900>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	46b8      	mov	r8, r7
 800744c:	dc20      	bgt.n	8007490 <_dtoa_r+0x960>
 800744e:	469b      	mov	fp, r3
 8007450:	9b07      	ldr	r3, [sp, #28]
 8007452:	2b02      	cmp	r3, #2
 8007454:	dd1e      	ble.n	8007494 <_dtoa_r+0x964>
 8007456:	f1bb 0f00 	cmp.w	fp, #0
 800745a:	f47f adb1 	bne.w	8006fc0 <_dtoa_r+0x490>
 800745e:	4621      	mov	r1, r4
 8007460:	465b      	mov	r3, fp
 8007462:	2205      	movs	r2, #5
 8007464:	4648      	mov	r0, r9
 8007466:	f000 fa95 	bl	8007994 <__multadd>
 800746a:	4601      	mov	r1, r0
 800746c:	4604      	mov	r4, r0
 800746e:	9802      	ldr	r0, [sp, #8]
 8007470:	f000 fca0 	bl	8007db4 <__mcmp>
 8007474:	2800      	cmp	r0, #0
 8007476:	f77f ada3 	ble.w	8006fc0 <_dtoa_r+0x490>
 800747a:	4656      	mov	r6, sl
 800747c:	2331      	movs	r3, #49	@ 0x31
 800747e:	f806 3b01 	strb.w	r3, [r6], #1
 8007482:	f108 0801 	add.w	r8, r8, #1
 8007486:	e59f      	b.n	8006fc8 <_dtoa_r+0x498>
 8007488:	9c03      	ldr	r4, [sp, #12]
 800748a:	46b8      	mov	r8, r7
 800748c:	4625      	mov	r5, r4
 800748e:	e7f4      	b.n	800747a <_dtoa_r+0x94a>
 8007490:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8101 	beq.w	800769e <_dtoa_r+0xb6e>
 800749c:	2e00      	cmp	r6, #0
 800749e:	dd05      	ble.n	80074ac <_dtoa_r+0x97c>
 80074a0:	4629      	mov	r1, r5
 80074a2:	4632      	mov	r2, r6
 80074a4:	4648      	mov	r0, r9
 80074a6:	f000 fc19 	bl	8007cdc <__lshift>
 80074aa:	4605      	mov	r5, r0
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d05c      	beq.n	800756c <_dtoa_r+0xa3c>
 80074b2:	6869      	ldr	r1, [r5, #4]
 80074b4:	4648      	mov	r0, r9
 80074b6:	f000 fa0b 	bl	80078d0 <_Balloc>
 80074ba:	4606      	mov	r6, r0
 80074bc:	b928      	cbnz	r0, 80074ca <_dtoa_r+0x99a>
 80074be:	4b82      	ldr	r3, [pc, #520]	@ (80076c8 <_dtoa_r+0xb98>)
 80074c0:	4602      	mov	r2, r0
 80074c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80074c6:	f7ff bb4a 	b.w	8006b5e <_dtoa_r+0x2e>
 80074ca:	692a      	ldr	r2, [r5, #16]
 80074cc:	3202      	adds	r2, #2
 80074ce:	0092      	lsls	r2, r2, #2
 80074d0:	f105 010c 	add.w	r1, r5, #12
 80074d4:	300c      	adds	r0, #12
 80074d6:	f001 f807 	bl	80084e8 <memcpy>
 80074da:	2201      	movs	r2, #1
 80074dc:	4631      	mov	r1, r6
 80074de:	4648      	mov	r0, r9
 80074e0:	f000 fbfc 	bl	8007cdc <__lshift>
 80074e4:	f10a 0301 	add.w	r3, sl, #1
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	eb0a 030b 	add.w	r3, sl, fp
 80074ee:	9308      	str	r3, [sp, #32]
 80074f0:	9b04      	ldr	r3, [sp, #16]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	462f      	mov	r7, r5
 80074f8:	9306      	str	r3, [sp, #24]
 80074fa:	4605      	mov	r5, r0
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	9802      	ldr	r0, [sp, #8]
 8007500:	4621      	mov	r1, r4
 8007502:	f103 3bff 	add.w	fp, r3, #4294967295
 8007506:	f7ff fa88 	bl	8006a1a <quorem>
 800750a:	4603      	mov	r3, r0
 800750c:	3330      	adds	r3, #48	@ 0x30
 800750e:	9003      	str	r0, [sp, #12]
 8007510:	4639      	mov	r1, r7
 8007512:	9802      	ldr	r0, [sp, #8]
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	f000 fc4d 	bl	8007db4 <__mcmp>
 800751a:	462a      	mov	r2, r5
 800751c:	9004      	str	r0, [sp, #16]
 800751e:	4621      	mov	r1, r4
 8007520:	4648      	mov	r0, r9
 8007522:	f000 fc63 	bl	8007dec <__mdiff>
 8007526:	68c2      	ldr	r2, [r0, #12]
 8007528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800752a:	4606      	mov	r6, r0
 800752c:	bb02      	cbnz	r2, 8007570 <_dtoa_r+0xa40>
 800752e:	4601      	mov	r1, r0
 8007530:	9802      	ldr	r0, [sp, #8]
 8007532:	f000 fc3f 	bl	8007db4 <__mcmp>
 8007536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007538:	4602      	mov	r2, r0
 800753a:	4631      	mov	r1, r6
 800753c:	4648      	mov	r0, r9
 800753e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007540:	9309      	str	r3, [sp, #36]	@ 0x24
 8007542:	f000 fa05 	bl	8007950 <_Bfree>
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800754a:	9e00      	ldr	r6, [sp, #0]
 800754c:	ea42 0103 	orr.w	r1, r2, r3
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	4319      	orrs	r1, r3
 8007554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007556:	d10d      	bne.n	8007574 <_dtoa_r+0xa44>
 8007558:	2b39      	cmp	r3, #57	@ 0x39
 800755a:	d027      	beq.n	80075ac <_dtoa_r+0xa7c>
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	2a00      	cmp	r2, #0
 8007560:	dd01      	ble.n	8007566 <_dtoa_r+0xa36>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	3331      	adds	r3, #49	@ 0x31
 8007566:	f88b 3000 	strb.w	r3, [fp]
 800756a:	e52e      	b.n	8006fca <_dtoa_r+0x49a>
 800756c:	4628      	mov	r0, r5
 800756e:	e7b9      	b.n	80074e4 <_dtoa_r+0x9b4>
 8007570:	2201      	movs	r2, #1
 8007572:	e7e2      	b.n	800753a <_dtoa_r+0xa0a>
 8007574:	9904      	ldr	r1, [sp, #16]
 8007576:	2900      	cmp	r1, #0
 8007578:	db04      	blt.n	8007584 <_dtoa_r+0xa54>
 800757a:	9807      	ldr	r0, [sp, #28]
 800757c:	4301      	orrs	r1, r0
 800757e:	9806      	ldr	r0, [sp, #24]
 8007580:	4301      	orrs	r1, r0
 8007582:	d120      	bne.n	80075c6 <_dtoa_r+0xa96>
 8007584:	2a00      	cmp	r2, #0
 8007586:	ddee      	ble.n	8007566 <_dtoa_r+0xa36>
 8007588:	9902      	ldr	r1, [sp, #8]
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2201      	movs	r2, #1
 800758e:	4648      	mov	r0, r9
 8007590:	f000 fba4 	bl	8007cdc <__lshift>
 8007594:	4621      	mov	r1, r4
 8007596:	9002      	str	r0, [sp, #8]
 8007598:	f000 fc0c 	bl	8007db4 <__mcmp>
 800759c:	2800      	cmp	r0, #0
 800759e:	9b00      	ldr	r3, [sp, #0]
 80075a0:	dc02      	bgt.n	80075a8 <_dtoa_r+0xa78>
 80075a2:	d1e0      	bne.n	8007566 <_dtoa_r+0xa36>
 80075a4:	07da      	lsls	r2, r3, #31
 80075a6:	d5de      	bpl.n	8007566 <_dtoa_r+0xa36>
 80075a8:	2b39      	cmp	r3, #57	@ 0x39
 80075aa:	d1da      	bne.n	8007562 <_dtoa_r+0xa32>
 80075ac:	2339      	movs	r3, #57	@ 0x39
 80075ae:	f88b 3000 	strb.w	r3, [fp]
 80075b2:	4633      	mov	r3, r6
 80075b4:	461e      	mov	r6, r3
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80075bc:	2a39      	cmp	r2, #57	@ 0x39
 80075be:	d04e      	beq.n	800765e <_dtoa_r+0xb2e>
 80075c0:	3201      	adds	r2, #1
 80075c2:	701a      	strb	r2, [r3, #0]
 80075c4:	e501      	b.n	8006fca <_dtoa_r+0x49a>
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	dd03      	ble.n	80075d2 <_dtoa_r+0xaa2>
 80075ca:	2b39      	cmp	r3, #57	@ 0x39
 80075cc:	d0ee      	beq.n	80075ac <_dtoa_r+0xa7c>
 80075ce:	3301      	adds	r3, #1
 80075d0:	e7c9      	b.n	8007566 <_dtoa_r+0xa36>
 80075d2:	9a00      	ldr	r2, [sp, #0]
 80075d4:	9908      	ldr	r1, [sp, #32]
 80075d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80075da:	428a      	cmp	r2, r1
 80075dc:	d028      	beq.n	8007630 <_dtoa_r+0xb00>
 80075de:	9902      	ldr	r1, [sp, #8]
 80075e0:	2300      	movs	r3, #0
 80075e2:	220a      	movs	r2, #10
 80075e4:	4648      	mov	r0, r9
 80075e6:	f000 f9d5 	bl	8007994 <__multadd>
 80075ea:	42af      	cmp	r7, r5
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	f04f 020a 	mov.w	r2, #10
 80075f6:	4639      	mov	r1, r7
 80075f8:	4648      	mov	r0, r9
 80075fa:	d107      	bne.n	800760c <_dtoa_r+0xadc>
 80075fc:	f000 f9ca 	bl	8007994 <__multadd>
 8007600:	4607      	mov	r7, r0
 8007602:	4605      	mov	r5, r0
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	3301      	adds	r3, #1
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	e777      	b.n	80074fc <_dtoa_r+0x9cc>
 800760c:	f000 f9c2 	bl	8007994 <__multadd>
 8007610:	4629      	mov	r1, r5
 8007612:	4607      	mov	r7, r0
 8007614:	2300      	movs	r3, #0
 8007616:	220a      	movs	r2, #10
 8007618:	4648      	mov	r0, r9
 800761a:	f000 f9bb 	bl	8007994 <__multadd>
 800761e:	4605      	mov	r5, r0
 8007620:	e7f0      	b.n	8007604 <_dtoa_r+0xad4>
 8007622:	f1bb 0f00 	cmp.w	fp, #0
 8007626:	bfcc      	ite	gt
 8007628:	465e      	movgt	r6, fp
 800762a:	2601      	movle	r6, #1
 800762c:	4456      	add	r6, sl
 800762e:	2700      	movs	r7, #0
 8007630:	9902      	ldr	r1, [sp, #8]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2201      	movs	r2, #1
 8007636:	4648      	mov	r0, r9
 8007638:	f000 fb50 	bl	8007cdc <__lshift>
 800763c:	4621      	mov	r1, r4
 800763e:	9002      	str	r0, [sp, #8]
 8007640:	f000 fbb8 	bl	8007db4 <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	dcb4      	bgt.n	80075b2 <_dtoa_r+0xa82>
 8007648:	d102      	bne.n	8007650 <_dtoa_r+0xb20>
 800764a:	9b00      	ldr	r3, [sp, #0]
 800764c:	07db      	lsls	r3, r3, #31
 800764e:	d4b0      	bmi.n	80075b2 <_dtoa_r+0xa82>
 8007650:	4633      	mov	r3, r6
 8007652:	461e      	mov	r6, r3
 8007654:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007658:	2a30      	cmp	r2, #48	@ 0x30
 800765a:	d0fa      	beq.n	8007652 <_dtoa_r+0xb22>
 800765c:	e4b5      	b.n	8006fca <_dtoa_r+0x49a>
 800765e:	459a      	cmp	sl, r3
 8007660:	d1a8      	bne.n	80075b4 <_dtoa_r+0xa84>
 8007662:	2331      	movs	r3, #49	@ 0x31
 8007664:	f108 0801 	add.w	r8, r8, #1
 8007668:	f88a 3000 	strb.w	r3, [sl]
 800766c:	e4ad      	b.n	8006fca <_dtoa_r+0x49a>
 800766e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007670:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80076cc <_dtoa_r+0xb9c>
 8007674:	b11b      	cbz	r3, 800767e <_dtoa_r+0xb4e>
 8007676:	f10a 0308 	add.w	r3, sl, #8
 800767a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4650      	mov	r0, sl
 8007680:	b017      	add	sp, #92	@ 0x5c
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	9b07      	ldr	r3, [sp, #28]
 8007688:	2b01      	cmp	r3, #1
 800768a:	f77f ae2e 	ble.w	80072ea <_dtoa_r+0x7ba>
 800768e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007690:	9308      	str	r3, [sp, #32]
 8007692:	2001      	movs	r0, #1
 8007694:	e64d      	b.n	8007332 <_dtoa_r+0x802>
 8007696:	f1bb 0f00 	cmp.w	fp, #0
 800769a:	f77f aed9 	ble.w	8007450 <_dtoa_r+0x920>
 800769e:	4656      	mov	r6, sl
 80076a0:	9802      	ldr	r0, [sp, #8]
 80076a2:	4621      	mov	r1, r4
 80076a4:	f7ff f9b9 	bl	8006a1a <quorem>
 80076a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80076ac:	f806 3b01 	strb.w	r3, [r6], #1
 80076b0:	eba6 020a 	sub.w	r2, r6, sl
 80076b4:	4593      	cmp	fp, r2
 80076b6:	ddb4      	ble.n	8007622 <_dtoa_r+0xaf2>
 80076b8:	9902      	ldr	r1, [sp, #8]
 80076ba:	2300      	movs	r3, #0
 80076bc:	220a      	movs	r2, #10
 80076be:	4648      	mov	r0, r9
 80076c0:	f000 f968 	bl	8007994 <__multadd>
 80076c4:	9002      	str	r0, [sp, #8]
 80076c6:	e7eb      	b.n	80076a0 <_dtoa_r+0xb70>
 80076c8:	080088f0 	.word	0x080088f0
 80076cc:	08008874 	.word	0x08008874

080076d0 <_free_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4605      	mov	r5, r0
 80076d4:	2900      	cmp	r1, #0
 80076d6:	d041      	beq.n	800775c <_free_r+0x8c>
 80076d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076dc:	1f0c      	subs	r4, r1, #4
 80076de:	2b00      	cmp	r3, #0
 80076e0:	bfb8      	it	lt
 80076e2:	18e4      	addlt	r4, r4, r3
 80076e4:	f000 f8e8 	bl	80078b8 <__malloc_lock>
 80076e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007760 <_free_r+0x90>)
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	b933      	cbnz	r3, 80076fc <_free_r+0x2c>
 80076ee:	6063      	str	r3, [r4, #4]
 80076f0:	6014      	str	r4, [r2, #0]
 80076f2:	4628      	mov	r0, r5
 80076f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f8:	f000 b8e4 	b.w	80078c4 <__malloc_unlock>
 80076fc:	42a3      	cmp	r3, r4
 80076fe:	d908      	bls.n	8007712 <_free_r+0x42>
 8007700:	6820      	ldr	r0, [r4, #0]
 8007702:	1821      	adds	r1, r4, r0
 8007704:	428b      	cmp	r3, r1
 8007706:	bf01      	itttt	eq
 8007708:	6819      	ldreq	r1, [r3, #0]
 800770a:	685b      	ldreq	r3, [r3, #4]
 800770c:	1809      	addeq	r1, r1, r0
 800770e:	6021      	streq	r1, [r4, #0]
 8007710:	e7ed      	b.n	80076ee <_free_r+0x1e>
 8007712:	461a      	mov	r2, r3
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	b10b      	cbz	r3, 800771c <_free_r+0x4c>
 8007718:	42a3      	cmp	r3, r4
 800771a:	d9fa      	bls.n	8007712 <_free_r+0x42>
 800771c:	6811      	ldr	r1, [r2, #0]
 800771e:	1850      	adds	r0, r2, r1
 8007720:	42a0      	cmp	r0, r4
 8007722:	d10b      	bne.n	800773c <_free_r+0x6c>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	4401      	add	r1, r0
 8007728:	1850      	adds	r0, r2, r1
 800772a:	4283      	cmp	r3, r0
 800772c:	6011      	str	r1, [r2, #0]
 800772e:	d1e0      	bne.n	80076f2 <_free_r+0x22>
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	6053      	str	r3, [r2, #4]
 8007736:	4408      	add	r0, r1
 8007738:	6010      	str	r0, [r2, #0]
 800773a:	e7da      	b.n	80076f2 <_free_r+0x22>
 800773c:	d902      	bls.n	8007744 <_free_r+0x74>
 800773e:	230c      	movs	r3, #12
 8007740:	602b      	str	r3, [r5, #0]
 8007742:	e7d6      	b.n	80076f2 <_free_r+0x22>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	1821      	adds	r1, r4, r0
 8007748:	428b      	cmp	r3, r1
 800774a:	bf04      	itt	eq
 800774c:	6819      	ldreq	r1, [r3, #0]
 800774e:	685b      	ldreq	r3, [r3, #4]
 8007750:	6063      	str	r3, [r4, #4]
 8007752:	bf04      	itt	eq
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	6054      	str	r4, [r2, #4]
 800775a:	e7ca      	b.n	80076f2 <_free_r+0x22>
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	bf00      	nop
 8007760:	20000470 	.word	0x20000470

08007764 <malloc>:
 8007764:	4b02      	ldr	r3, [pc, #8]	@ (8007770 <malloc+0xc>)
 8007766:	4601      	mov	r1, r0
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f000 b825 	b.w	80077b8 <_malloc_r>
 800776e:	bf00      	nop
 8007770:	20000020 	.word	0x20000020

08007774 <sbrk_aligned>:
 8007774:	b570      	push	{r4, r5, r6, lr}
 8007776:	4e0f      	ldr	r6, [pc, #60]	@ (80077b4 <sbrk_aligned+0x40>)
 8007778:	460c      	mov	r4, r1
 800777a:	6831      	ldr	r1, [r6, #0]
 800777c:	4605      	mov	r5, r0
 800777e:	b911      	cbnz	r1, 8007786 <sbrk_aligned+0x12>
 8007780:	f000 fea2 	bl	80084c8 <_sbrk_r>
 8007784:	6030      	str	r0, [r6, #0]
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f000 fe9d 	bl	80084c8 <_sbrk_r>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	d103      	bne.n	800779a <sbrk_aligned+0x26>
 8007792:	f04f 34ff 	mov.w	r4, #4294967295
 8007796:	4620      	mov	r0, r4
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	1cc4      	adds	r4, r0, #3
 800779c:	f024 0403 	bic.w	r4, r4, #3
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d0f8      	beq.n	8007796 <sbrk_aligned+0x22>
 80077a4:	1a21      	subs	r1, r4, r0
 80077a6:	4628      	mov	r0, r5
 80077a8:	f000 fe8e 	bl	80084c8 <_sbrk_r>
 80077ac:	3001      	adds	r0, #1
 80077ae:	d1f2      	bne.n	8007796 <sbrk_aligned+0x22>
 80077b0:	e7ef      	b.n	8007792 <sbrk_aligned+0x1e>
 80077b2:	bf00      	nop
 80077b4:	2000046c 	.word	0x2000046c

080077b8 <_malloc_r>:
 80077b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077bc:	1ccd      	adds	r5, r1, #3
 80077be:	f025 0503 	bic.w	r5, r5, #3
 80077c2:	3508      	adds	r5, #8
 80077c4:	2d0c      	cmp	r5, #12
 80077c6:	bf38      	it	cc
 80077c8:	250c      	movcc	r5, #12
 80077ca:	2d00      	cmp	r5, #0
 80077cc:	4606      	mov	r6, r0
 80077ce:	db01      	blt.n	80077d4 <_malloc_r+0x1c>
 80077d0:	42a9      	cmp	r1, r5
 80077d2:	d904      	bls.n	80077de <_malloc_r+0x26>
 80077d4:	230c      	movs	r3, #12
 80077d6:	6033      	str	r3, [r6, #0]
 80077d8:	2000      	movs	r0, #0
 80077da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078b4 <_malloc_r+0xfc>
 80077e2:	f000 f869 	bl	80078b8 <__malloc_lock>
 80077e6:	f8d8 3000 	ldr.w	r3, [r8]
 80077ea:	461c      	mov	r4, r3
 80077ec:	bb44      	cbnz	r4, 8007840 <_malloc_r+0x88>
 80077ee:	4629      	mov	r1, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	f7ff ffbf 	bl	8007774 <sbrk_aligned>
 80077f6:	1c43      	adds	r3, r0, #1
 80077f8:	4604      	mov	r4, r0
 80077fa:	d158      	bne.n	80078ae <_malloc_r+0xf6>
 80077fc:	f8d8 4000 	ldr.w	r4, [r8]
 8007800:	4627      	mov	r7, r4
 8007802:	2f00      	cmp	r7, #0
 8007804:	d143      	bne.n	800788e <_malloc_r+0xd6>
 8007806:	2c00      	cmp	r4, #0
 8007808:	d04b      	beq.n	80078a2 <_malloc_r+0xea>
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	4639      	mov	r1, r7
 800780e:	4630      	mov	r0, r6
 8007810:	eb04 0903 	add.w	r9, r4, r3
 8007814:	f000 fe58 	bl	80084c8 <_sbrk_r>
 8007818:	4581      	cmp	r9, r0
 800781a:	d142      	bne.n	80078a2 <_malloc_r+0xea>
 800781c:	6821      	ldr	r1, [r4, #0]
 800781e:	1a6d      	subs	r5, r5, r1
 8007820:	4629      	mov	r1, r5
 8007822:	4630      	mov	r0, r6
 8007824:	f7ff ffa6 	bl	8007774 <sbrk_aligned>
 8007828:	3001      	adds	r0, #1
 800782a:	d03a      	beq.n	80078a2 <_malloc_r+0xea>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	442b      	add	r3, r5
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	f8d8 3000 	ldr.w	r3, [r8]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	bb62      	cbnz	r2, 8007894 <_malloc_r+0xdc>
 800783a:	f8c8 7000 	str.w	r7, [r8]
 800783e:	e00f      	b.n	8007860 <_malloc_r+0xa8>
 8007840:	6822      	ldr	r2, [r4, #0]
 8007842:	1b52      	subs	r2, r2, r5
 8007844:	d420      	bmi.n	8007888 <_malloc_r+0xd0>
 8007846:	2a0b      	cmp	r2, #11
 8007848:	d917      	bls.n	800787a <_malloc_r+0xc2>
 800784a:	1961      	adds	r1, r4, r5
 800784c:	42a3      	cmp	r3, r4
 800784e:	6025      	str	r5, [r4, #0]
 8007850:	bf18      	it	ne
 8007852:	6059      	strne	r1, [r3, #4]
 8007854:	6863      	ldr	r3, [r4, #4]
 8007856:	bf08      	it	eq
 8007858:	f8c8 1000 	streq.w	r1, [r8]
 800785c:	5162      	str	r2, [r4, r5]
 800785e:	604b      	str	r3, [r1, #4]
 8007860:	4630      	mov	r0, r6
 8007862:	f000 f82f 	bl	80078c4 <__malloc_unlock>
 8007866:	f104 000b 	add.w	r0, r4, #11
 800786a:	1d23      	adds	r3, r4, #4
 800786c:	f020 0007 	bic.w	r0, r0, #7
 8007870:	1ac2      	subs	r2, r0, r3
 8007872:	bf1c      	itt	ne
 8007874:	1a1b      	subne	r3, r3, r0
 8007876:	50a3      	strne	r3, [r4, r2]
 8007878:	e7af      	b.n	80077da <_malloc_r+0x22>
 800787a:	6862      	ldr	r2, [r4, #4]
 800787c:	42a3      	cmp	r3, r4
 800787e:	bf0c      	ite	eq
 8007880:	f8c8 2000 	streq.w	r2, [r8]
 8007884:	605a      	strne	r2, [r3, #4]
 8007886:	e7eb      	b.n	8007860 <_malloc_r+0xa8>
 8007888:	4623      	mov	r3, r4
 800788a:	6864      	ldr	r4, [r4, #4]
 800788c:	e7ae      	b.n	80077ec <_malloc_r+0x34>
 800788e:	463c      	mov	r4, r7
 8007890:	687f      	ldr	r7, [r7, #4]
 8007892:	e7b6      	b.n	8007802 <_malloc_r+0x4a>
 8007894:	461a      	mov	r2, r3
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	42a3      	cmp	r3, r4
 800789a:	d1fb      	bne.n	8007894 <_malloc_r+0xdc>
 800789c:	2300      	movs	r3, #0
 800789e:	6053      	str	r3, [r2, #4]
 80078a0:	e7de      	b.n	8007860 <_malloc_r+0xa8>
 80078a2:	230c      	movs	r3, #12
 80078a4:	6033      	str	r3, [r6, #0]
 80078a6:	4630      	mov	r0, r6
 80078a8:	f000 f80c 	bl	80078c4 <__malloc_unlock>
 80078ac:	e794      	b.n	80077d8 <_malloc_r+0x20>
 80078ae:	6005      	str	r5, [r0, #0]
 80078b0:	e7d6      	b.n	8007860 <_malloc_r+0xa8>
 80078b2:	bf00      	nop
 80078b4:	20000470 	.word	0x20000470

080078b8 <__malloc_lock>:
 80078b8:	4801      	ldr	r0, [pc, #4]	@ (80078c0 <__malloc_lock+0x8>)
 80078ba:	f7ff b8ac 	b.w	8006a16 <__retarget_lock_acquire_recursive>
 80078be:	bf00      	nop
 80078c0:	20000468 	.word	0x20000468

080078c4 <__malloc_unlock>:
 80078c4:	4801      	ldr	r0, [pc, #4]	@ (80078cc <__malloc_unlock+0x8>)
 80078c6:	f7ff b8a7 	b.w	8006a18 <__retarget_lock_release_recursive>
 80078ca:	bf00      	nop
 80078cc:	20000468 	.word	0x20000468

080078d0 <_Balloc>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	69c6      	ldr	r6, [r0, #28]
 80078d4:	4604      	mov	r4, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	b976      	cbnz	r6, 80078f8 <_Balloc+0x28>
 80078da:	2010      	movs	r0, #16
 80078dc:	f7ff ff42 	bl	8007764 <malloc>
 80078e0:	4602      	mov	r2, r0
 80078e2:	61e0      	str	r0, [r4, #28]
 80078e4:	b920      	cbnz	r0, 80078f0 <_Balloc+0x20>
 80078e6:	4b18      	ldr	r3, [pc, #96]	@ (8007948 <_Balloc+0x78>)
 80078e8:	4818      	ldr	r0, [pc, #96]	@ (800794c <_Balloc+0x7c>)
 80078ea:	216b      	movs	r1, #107	@ 0x6b
 80078ec:	f000 fe0a 	bl	8008504 <__assert_func>
 80078f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078f4:	6006      	str	r6, [r0, #0]
 80078f6:	60c6      	str	r6, [r0, #12]
 80078f8:	69e6      	ldr	r6, [r4, #28]
 80078fa:	68f3      	ldr	r3, [r6, #12]
 80078fc:	b183      	cbz	r3, 8007920 <_Balloc+0x50>
 80078fe:	69e3      	ldr	r3, [r4, #28]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007906:	b9b8      	cbnz	r0, 8007938 <_Balloc+0x68>
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f605 	lsl.w	r6, r1, r5
 800790e:	1d72      	adds	r2, r6, #5
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fe14 	bl	8008540 <_calloc_r>
 8007918:	b160      	cbz	r0, 8007934 <_Balloc+0x64>
 800791a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800791e:	e00e      	b.n	800793e <_Balloc+0x6e>
 8007920:	2221      	movs	r2, #33	@ 0x21
 8007922:	2104      	movs	r1, #4
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fe0b 	bl	8008540 <_calloc_r>
 800792a:	69e3      	ldr	r3, [r4, #28]
 800792c:	60f0      	str	r0, [r6, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <_Balloc+0x2e>
 8007934:	2000      	movs	r0, #0
 8007936:	bd70      	pop	{r4, r5, r6, pc}
 8007938:	6802      	ldr	r2, [r0, #0]
 800793a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800793e:	2300      	movs	r3, #0
 8007940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007944:	e7f7      	b.n	8007936 <_Balloc+0x66>
 8007946:	bf00      	nop
 8007948:	08008881 	.word	0x08008881
 800794c:	08008901 	.word	0x08008901

08007950 <_Bfree>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	69c6      	ldr	r6, [r0, #28]
 8007954:	4605      	mov	r5, r0
 8007956:	460c      	mov	r4, r1
 8007958:	b976      	cbnz	r6, 8007978 <_Bfree+0x28>
 800795a:	2010      	movs	r0, #16
 800795c:	f7ff ff02 	bl	8007764 <malloc>
 8007960:	4602      	mov	r2, r0
 8007962:	61e8      	str	r0, [r5, #28]
 8007964:	b920      	cbnz	r0, 8007970 <_Bfree+0x20>
 8007966:	4b09      	ldr	r3, [pc, #36]	@ (800798c <_Bfree+0x3c>)
 8007968:	4809      	ldr	r0, [pc, #36]	@ (8007990 <_Bfree+0x40>)
 800796a:	218f      	movs	r1, #143	@ 0x8f
 800796c:	f000 fdca 	bl	8008504 <__assert_func>
 8007970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007974:	6006      	str	r6, [r0, #0]
 8007976:	60c6      	str	r6, [r0, #12]
 8007978:	b13c      	cbz	r4, 800798a <_Bfree+0x3a>
 800797a:	69eb      	ldr	r3, [r5, #28]
 800797c:	6862      	ldr	r2, [r4, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007984:	6021      	str	r1, [r4, #0]
 8007986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800798a:	bd70      	pop	{r4, r5, r6, pc}
 800798c:	08008881 	.word	0x08008881
 8007990:	08008901 	.word	0x08008901

08007994 <__multadd>:
 8007994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007998:	690d      	ldr	r5, [r1, #16]
 800799a:	4607      	mov	r7, r0
 800799c:	460c      	mov	r4, r1
 800799e:	461e      	mov	r6, r3
 80079a0:	f101 0c14 	add.w	ip, r1, #20
 80079a4:	2000      	movs	r0, #0
 80079a6:	f8dc 3000 	ldr.w	r3, [ip]
 80079aa:	b299      	uxth	r1, r3
 80079ac:	fb02 6101 	mla	r1, r2, r1, r6
 80079b0:	0c1e      	lsrs	r6, r3, #16
 80079b2:	0c0b      	lsrs	r3, r1, #16
 80079b4:	fb02 3306 	mla	r3, r2, r6, r3
 80079b8:	b289      	uxth	r1, r1
 80079ba:	3001      	adds	r0, #1
 80079bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80079c0:	4285      	cmp	r5, r0
 80079c2:	f84c 1b04 	str.w	r1, [ip], #4
 80079c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80079ca:	dcec      	bgt.n	80079a6 <__multadd+0x12>
 80079cc:	b30e      	cbz	r6, 8007a12 <__multadd+0x7e>
 80079ce:	68a3      	ldr	r3, [r4, #8]
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	dc19      	bgt.n	8007a08 <__multadd+0x74>
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4638      	mov	r0, r7
 80079d8:	3101      	adds	r1, #1
 80079da:	f7ff ff79 	bl	80078d0 <_Balloc>
 80079de:	4680      	mov	r8, r0
 80079e0:	b928      	cbnz	r0, 80079ee <__multadd+0x5a>
 80079e2:	4602      	mov	r2, r0
 80079e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a18 <__multadd+0x84>)
 80079e6:	480d      	ldr	r0, [pc, #52]	@ (8007a1c <__multadd+0x88>)
 80079e8:	21ba      	movs	r1, #186	@ 0xba
 80079ea:	f000 fd8b 	bl	8008504 <__assert_func>
 80079ee:	6922      	ldr	r2, [r4, #16]
 80079f0:	3202      	adds	r2, #2
 80079f2:	f104 010c 	add.w	r1, r4, #12
 80079f6:	0092      	lsls	r2, r2, #2
 80079f8:	300c      	adds	r0, #12
 80079fa:	f000 fd75 	bl	80084e8 <memcpy>
 80079fe:	4621      	mov	r1, r4
 8007a00:	4638      	mov	r0, r7
 8007a02:	f7ff ffa5 	bl	8007950 <_Bfree>
 8007a06:	4644      	mov	r4, r8
 8007a08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	615e      	str	r6, [r3, #20]
 8007a10:	6125      	str	r5, [r4, #16]
 8007a12:	4620      	mov	r0, r4
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	080088f0 	.word	0x080088f0
 8007a1c:	08008901 	.word	0x08008901

08007a20 <__hi0bits>:
 8007a20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007a24:	4603      	mov	r3, r0
 8007a26:	bf36      	itet	cc
 8007a28:	0403      	lslcc	r3, r0, #16
 8007a2a:	2000      	movcs	r0, #0
 8007a2c:	2010      	movcc	r0, #16
 8007a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007a32:	bf3c      	itt	cc
 8007a34:	021b      	lslcc	r3, r3, #8
 8007a36:	3008      	addcc	r0, #8
 8007a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a3c:	bf3c      	itt	cc
 8007a3e:	011b      	lslcc	r3, r3, #4
 8007a40:	3004      	addcc	r0, #4
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a46:	bf3c      	itt	cc
 8007a48:	009b      	lslcc	r3, r3, #2
 8007a4a:	3002      	addcc	r0, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	db05      	blt.n	8007a5c <__hi0bits+0x3c>
 8007a50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a54:	f100 0001 	add.w	r0, r0, #1
 8007a58:	bf08      	it	eq
 8007a5a:	2020      	moveq	r0, #32
 8007a5c:	4770      	bx	lr

08007a5e <__lo0bits>:
 8007a5e:	6803      	ldr	r3, [r0, #0]
 8007a60:	4602      	mov	r2, r0
 8007a62:	f013 0007 	ands.w	r0, r3, #7
 8007a66:	d00b      	beq.n	8007a80 <__lo0bits+0x22>
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d421      	bmi.n	8007ab0 <__lo0bits+0x52>
 8007a6c:	0798      	lsls	r0, r3, #30
 8007a6e:	bf49      	itett	mi
 8007a70:	085b      	lsrmi	r3, r3, #1
 8007a72:	089b      	lsrpl	r3, r3, #2
 8007a74:	2001      	movmi	r0, #1
 8007a76:	6013      	strmi	r3, [r2, #0]
 8007a78:	bf5c      	itt	pl
 8007a7a:	6013      	strpl	r3, [r2, #0]
 8007a7c:	2002      	movpl	r0, #2
 8007a7e:	4770      	bx	lr
 8007a80:	b299      	uxth	r1, r3
 8007a82:	b909      	cbnz	r1, 8007a88 <__lo0bits+0x2a>
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	2010      	movs	r0, #16
 8007a88:	b2d9      	uxtb	r1, r3
 8007a8a:	b909      	cbnz	r1, 8007a90 <__lo0bits+0x32>
 8007a8c:	3008      	adds	r0, #8
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	0719      	lsls	r1, r3, #28
 8007a92:	bf04      	itt	eq
 8007a94:	091b      	lsreq	r3, r3, #4
 8007a96:	3004      	addeq	r0, #4
 8007a98:	0799      	lsls	r1, r3, #30
 8007a9a:	bf04      	itt	eq
 8007a9c:	089b      	lsreq	r3, r3, #2
 8007a9e:	3002      	addeq	r0, #2
 8007aa0:	07d9      	lsls	r1, r3, #31
 8007aa2:	d403      	bmi.n	8007aac <__lo0bits+0x4e>
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	f100 0001 	add.w	r0, r0, #1
 8007aaa:	d003      	beq.n	8007ab4 <__lo0bits+0x56>
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	4770      	bx	lr
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr
 8007ab4:	2020      	movs	r0, #32
 8007ab6:	4770      	bx	lr

08007ab8 <__i2b>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	460c      	mov	r4, r1
 8007abc:	2101      	movs	r1, #1
 8007abe:	f7ff ff07 	bl	80078d0 <_Balloc>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	b928      	cbnz	r0, 8007ad2 <__i2b+0x1a>
 8007ac6:	4b05      	ldr	r3, [pc, #20]	@ (8007adc <__i2b+0x24>)
 8007ac8:	4805      	ldr	r0, [pc, #20]	@ (8007ae0 <__i2b+0x28>)
 8007aca:	f240 1145 	movw	r1, #325	@ 0x145
 8007ace:	f000 fd19 	bl	8008504 <__assert_func>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	6144      	str	r4, [r0, #20]
 8007ad6:	6103      	str	r3, [r0, #16]
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	080088f0 	.word	0x080088f0
 8007ae0:	08008901 	.word	0x08008901

08007ae4 <__multiply>:
 8007ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae8:	4617      	mov	r7, r2
 8007aea:	690a      	ldr	r2, [r1, #16]
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	bfa8      	it	ge
 8007af2:	463b      	movge	r3, r7
 8007af4:	4689      	mov	r9, r1
 8007af6:	bfa4      	itt	ge
 8007af8:	460f      	movge	r7, r1
 8007afa:	4699      	movge	r9, r3
 8007afc:	693d      	ldr	r5, [r7, #16]
 8007afe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6879      	ldr	r1, [r7, #4]
 8007b06:	eb05 060a 	add.w	r6, r5, sl
 8007b0a:	42b3      	cmp	r3, r6
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	bfb8      	it	lt
 8007b10:	3101      	addlt	r1, #1
 8007b12:	f7ff fedd 	bl	80078d0 <_Balloc>
 8007b16:	b930      	cbnz	r0, 8007b26 <__multiply+0x42>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	4b41      	ldr	r3, [pc, #260]	@ (8007c20 <__multiply+0x13c>)
 8007b1c:	4841      	ldr	r0, [pc, #260]	@ (8007c24 <__multiply+0x140>)
 8007b1e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007b22:	f000 fcef 	bl	8008504 <__assert_func>
 8007b26:	f100 0414 	add.w	r4, r0, #20
 8007b2a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007b2e:	4623      	mov	r3, r4
 8007b30:	2200      	movs	r2, #0
 8007b32:	4573      	cmp	r3, lr
 8007b34:	d320      	bcc.n	8007b78 <__multiply+0x94>
 8007b36:	f107 0814 	add.w	r8, r7, #20
 8007b3a:	f109 0114 	add.w	r1, r9, #20
 8007b3e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b42:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b46:	9302      	str	r3, [sp, #8]
 8007b48:	1beb      	subs	r3, r5, r7
 8007b4a:	3b15      	subs	r3, #21
 8007b4c:	f023 0303 	bic.w	r3, r3, #3
 8007b50:	3304      	adds	r3, #4
 8007b52:	3715      	adds	r7, #21
 8007b54:	42bd      	cmp	r5, r7
 8007b56:	bf38      	it	cc
 8007b58:	2304      	movcc	r3, #4
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	9b02      	ldr	r3, [sp, #8]
 8007b5e:	9103      	str	r1, [sp, #12]
 8007b60:	428b      	cmp	r3, r1
 8007b62:	d80c      	bhi.n	8007b7e <__multiply+0x9a>
 8007b64:	2e00      	cmp	r6, #0
 8007b66:	dd03      	ble.n	8007b70 <__multiply+0x8c>
 8007b68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d055      	beq.n	8007c1c <__multiply+0x138>
 8007b70:	6106      	str	r6, [r0, #16]
 8007b72:	b005      	add	sp, #20
 8007b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b78:	f843 2b04 	str.w	r2, [r3], #4
 8007b7c:	e7d9      	b.n	8007b32 <__multiply+0x4e>
 8007b7e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b82:	f1ba 0f00 	cmp.w	sl, #0
 8007b86:	d01f      	beq.n	8007bc8 <__multiply+0xe4>
 8007b88:	46c4      	mov	ip, r8
 8007b8a:	46a1      	mov	r9, r4
 8007b8c:	2700      	movs	r7, #0
 8007b8e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b92:	f8d9 3000 	ldr.w	r3, [r9]
 8007b96:	fa1f fb82 	uxth.w	fp, r2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ba0:	443b      	add	r3, r7
 8007ba2:	f8d9 7000 	ldr.w	r7, [r9]
 8007ba6:	0c12      	lsrs	r2, r2, #16
 8007ba8:	0c3f      	lsrs	r7, r7, #16
 8007baa:	fb0a 7202 	mla	r2, sl, r2, r7
 8007bae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bb8:	4565      	cmp	r5, ip
 8007bba:	f849 3b04 	str.w	r3, [r9], #4
 8007bbe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007bc2:	d8e4      	bhi.n	8007b8e <__multiply+0xaa>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	50e7      	str	r7, [r4, r3]
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007bce:	3104      	adds	r1, #4
 8007bd0:	f1b9 0f00 	cmp.w	r9, #0
 8007bd4:	d020      	beq.n	8007c18 <__multiply+0x134>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	4647      	mov	r7, r8
 8007bda:	46a4      	mov	ip, r4
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007be4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007be8:	fb09 220b 	mla	r2, r9, fp, r2
 8007bec:	4452      	add	r2, sl
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf4:	f84c 3b04 	str.w	r3, [ip], #4
 8007bf8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007bfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c00:	f8bc 3000 	ldrh.w	r3, [ip]
 8007c04:	fb09 330a 	mla	r3, r9, sl, r3
 8007c08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007c0c:	42bd      	cmp	r5, r7
 8007c0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c12:	d8e5      	bhi.n	8007be0 <__multiply+0xfc>
 8007c14:	9a01      	ldr	r2, [sp, #4]
 8007c16:	50a3      	str	r3, [r4, r2]
 8007c18:	3404      	adds	r4, #4
 8007c1a:	e79f      	b.n	8007b5c <__multiply+0x78>
 8007c1c:	3e01      	subs	r6, #1
 8007c1e:	e7a1      	b.n	8007b64 <__multiply+0x80>
 8007c20:	080088f0 	.word	0x080088f0
 8007c24:	08008901 	.word	0x08008901

08007c28 <__pow5mult>:
 8007c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2c:	4615      	mov	r5, r2
 8007c2e:	f012 0203 	ands.w	r2, r2, #3
 8007c32:	4607      	mov	r7, r0
 8007c34:	460e      	mov	r6, r1
 8007c36:	d007      	beq.n	8007c48 <__pow5mult+0x20>
 8007c38:	4c25      	ldr	r4, [pc, #148]	@ (8007cd0 <__pow5mult+0xa8>)
 8007c3a:	3a01      	subs	r2, #1
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c42:	f7ff fea7 	bl	8007994 <__multadd>
 8007c46:	4606      	mov	r6, r0
 8007c48:	10ad      	asrs	r5, r5, #2
 8007c4a:	d03d      	beq.n	8007cc8 <__pow5mult+0xa0>
 8007c4c:	69fc      	ldr	r4, [r7, #28]
 8007c4e:	b97c      	cbnz	r4, 8007c70 <__pow5mult+0x48>
 8007c50:	2010      	movs	r0, #16
 8007c52:	f7ff fd87 	bl	8007764 <malloc>
 8007c56:	4602      	mov	r2, r0
 8007c58:	61f8      	str	r0, [r7, #28]
 8007c5a:	b928      	cbnz	r0, 8007c68 <__pow5mult+0x40>
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd4 <__pow5mult+0xac>)
 8007c5e:	481e      	ldr	r0, [pc, #120]	@ (8007cd8 <__pow5mult+0xb0>)
 8007c60:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c64:	f000 fc4e 	bl	8008504 <__assert_func>
 8007c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c6c:	6004      	str	r4, [r0, #0]
 8007c6e:	60c4      	str	r4, [r0, #12]
 8007c70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c78:	b94c      	cbnz	r4, 8007c8e <__pow5mult+0x66>
 8007c7a:	f240 2171 	movw	r1, #625	@ 0x271
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f7ff ff1a 	bl	8007ab8 <__i2b>
 8007c84:	2300      	movs	r3, #0
 8007c86:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c8a:	4604      	mov	r4, r0
 8007c8c:	6003      	str	r3, [r0, #0]
 8007c8e:	f04f 0900 	mov.w	r9, #0
 8007c92:	07eb      	lsls	r3, r5, #31
 8007c94:	d50a      	bpl.n	8007cac <__pow5mult+0x84>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4622      	mov	r2, r4
 8007c9a:	4638      	mov	r0, r7
 8007c9c:	f7ff ff22 	bl	8007ae4 <__multiply>
 8007ca0:	4631      	mov	r1, r6
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff fe53 	bl	8007950 <_Bfree>
 8007caa:	4646      	mov	r6, r8
 8007cac:	106d      	asrs	r5, r5, #1
 8007cae:	d00b      	beq.n	8007cc8 <__pow5mult+0xa0>
 8007cb0:	6820      	ldr	r0, [r4, #0]
 8007cb2:	b938      	cbnz	r0, 8007cc4 <__pow5mult+0x9c>
 8007cb4:	4622      	mov	r2, r4
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f7ff ff13 	bl	8007ae4 <__multiply>
 8007cbe:	6020      	str	r0, [r4, #0]
 8007cc0:	f8c0 9000 	str.w	r9, [r0]
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	e7e4      	b.n	8007c92 <__pow5mult+0x6a>
 8007cc8:	4630      	mov	r0, r6
 8007cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cce:	bf00      	nop
 8007cd0:	080089b4 	.word	0x080089b4
 8007cd4:	08008881 	.word	0x08008881
 8007cd8:	08008901 	.word	0x08008901

08007cdc <__lshift>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	6849      	ldr	r1, [r1, #4]
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cea:	68a3      	ldr	r3, [r4, #8]
 8007cec:	4607      	mov	r7, r0
 8007cee:	4691      	mov	r9, r2
 8007cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cf4:	f108 0601 	add.w	r6, r8, #1
 8007cf8:	42b3      	cmp	r3, r6
 8007cfa:	db0b      	blt.n	8007d14 <__lshift+0x38>
 8007cfc:	4638      	mov	r0, r7
 8007cfe:	f7ff fde7 	bl	80078d0 <_Balloc>
 8007d02:	4605      	mov	r5, r0
 8007d04:	b948      	cbnz	r0, 8007d1a <__lshift+0x3e>
 8007d06:	4602      	mov	r2, r0
 8007d08:	4b28      	ldr	r3, [pc, #160]	@ (8007dac <__lshift+0xd0>)
 8007d0a:	4829      	ldr	r0, [pc, #164]	@ (8007db0 <__lshift+0xd4>)
 8007d0c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007d10:	f000 fbf8 	bl	8008504 <__assert_func>
 8007d14:	3101      	adds	r1, #1
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	e7ee      	b.n	8007cf8 <__lshift+0x1c>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f100 0114 	add.w	r1, r0, #20
 8007d20:	f100 0210 	add.w	r2, r0, #16
 8007d24:	4618      	mov	r0, r3
 8007d26:	4553      	cmp	r3, sl
 8007d28:	db33      	blt.n	8007d92 <__lshift+0xb6>
 8007d2a:	6920      	ldr	r0, [r4, #16]
 8007d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d30:	f104 0314 	add.w	r3, r4, #20
 8007d34:	f019 091f 	ands.w	r9, r9, #31
 8007d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d40:	d02b      	beq.n	8007d9a <__lshift+0xbe>
 8007d42:	f1c9 0e20 	rsb	lr, r9, #32
 8007d46:	468a      	mov	sl, r1
 8007d48:	2200      	movs	r2, #0
 8007d4a:	6818      	ldr	r0, [r3, #0]
 8007d4c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d50:	4310      	orrs	r0, r2
 8007d52:	f84a 0b04 	str.w	r0, [sl], #4
 8007d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5a:	459c      	cmp	ip, r3
 8007d5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d60:	d8f3      	bhi.n	8007d4a <__lshift+0x6e>
 8007d62:	ebac 0304 	sub.w	r3, ip, r4
 8007d66:	3b15      	subs	r3, #21
 8007d68:	f023 0303 	bic.w	r3, r3, #3
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	f104 0015 	add.w	r0, r4, #21
 8007d72:	4560      	cmp	r0, ip
 8007d74:	bf88      	it	hi
 8007d76:	2304      	movhi	r3, #4
 8007d78:	50ca      	str	r2, [r1, r3]
 8007d7a:	b10a      	cbz	r2, 8007d80 <__lshift+0xa4>
 8007d7c:	f108 0602 	add.w	r6, r8, #2
 8007d80:	3e01      	subs	r6, #1
 8007d82:	4638      	mov	r0, r7
 8007d84:	612e      	str	r6, [r5, #16]
 8007d86:	4621      	mov	r1, r4
 8007d88:	f7ff fde2 	bl	8007950 <_Bfree>
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d96:	3301      	adds	r3, #1
 8007d98:	e7c5      	b.n	8007d26 <__lshift+0x4a>
 8007d9a:	3904      	subs	r1, #4
 8007d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007da4:	459c      	cmp	ip, r3
 8007da6:	d8f9      	bhi.n	8007d9c <__lshift+0xc0>
 8007da8:	e7ea      	b.n	8007d80 <__lshift+0xa4>
 8007daa:	bf00      	nop
 8007dac:	080088f0 	.word	0x080088f0
 8007db0:	08008901 	.word	0x08008901

08007db4 <__mcmp>:
 8007db4:	690a      	ldr	r2, [r1, #16]
 8007db6:	4603      	mov	r3, r0
 8007db8:	6900      	ldr	r0, [r0, #16]
 8007dba:	1a80      	subs	r0, r0, r2
 8007dbc:	b530      	push	{r4, r5, lr}
 8007dbe:	d10e      	bne.n	8007dde <__mcmp+0x2a>
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	3114      	adds	r1, #20
 8007dc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007dc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007dcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007dd4:	4295      	cmp	r5, r2
 8007dd6:	d003      	beq.n	8007de0 <__mcmp+0x2c>
 8007dd8:	d205      	bcs.n	8007de6 <__mcmp+0x32>
 8007dda:	f04f 30ff 	mov.w	r0, #4294967295
 8007dde:	bd30      	pop	{r4, r5, pc}
 8007de0:	42a3      	cmp	r3, r4
 8007de2:	d3f3      	bcc.n	8007dcc <__mcmp+0x18>
 8007de4:	e7fb      	b.n	8007dde <__mcmp+0x2a>
 8007de6:	2001      	movs	r0, #1
 8007de8:	e7f9      	b.n	8007dde <__mcmp+0x2a>
	...

08007dec <__mdiff>:
 8007dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	4689      	mov	r9, r1
 8007df2:	4606      	mov	r6, r0
 8007df4:	4611      	mov	r1, r2
 8007df6:	4648      	mov	r0, r9
 8007df8:	4614      	mov	r4, r2
 8007dfa:	f7ff ffdb 	bl	8007db4 <__mcmp>
 8007dfe:	1e05      	subs	r5, r0, #0
 8007e00:	d112      	bne.n	8007e28 <__mdiff+0x3c>
 8007e02:	4629      	mov	r1, r5
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff fd63 	bl	80078d0 <_Balloc>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	b928      	cbnz	r0, 8007e1a <__mdiff+0x2e>
 8007e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8007f0c <__mdiff+0x120>)
 8007e10:	f240 2137 	movw	r1, #567	@ 0x237
 8007e14:	483e      	ldr	r0, [pc, #248]	@ (8007f10 <__mdiff+0x124>)
 8007e16:	f000 fb75 	bl	8008504 <__assert_func>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007e20:	4610      	mov	r0, r2
 8007e22:	b003      	add	sp, #12
 8007e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e28:	bfbc      	itt	lt
 8007e2a:	464b      	movlt	r3, r9
 8007e2c:	46a1      	movlt	r9, r4
 8007e2e:	4630      	mov	r0, r6
 8007e30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e34:	bfba      	itte	lt
 8007e36:	461c      	movlt	r4, r3
 8007e38:	2501      	movlt	r5, #1
 8007e3a:	2500      	movge	r5, #0
 8007e3c:	f7ff fd48 	bl	80078d0 <_Balloc>
 8007e40:	4602      	mov	r2, r0
 8007e42:	b918      	cbnz	r0, 8007e4c <__mdiff+0x60>
 8007e44:	4b31      	ldr	r3, [pc, #196]	@ (8007f0c <__mdiff+0x120>)
 8007e46:	f240 2145 	movw	r1, #581	@ 0x245
 8007e4a:	e7e3      	b.n	8007e14 <__mdiff+0x28>
 8007e4c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e50:	6926      	ldr	r6, [r4, #16]
 8007e52:	60c5      	str	r5, [r0, #12]
 8007e54:	f109 0310 	add.w	r3, r9, #16
 8007e58:	f109 0514 	add.w	r5, r9, #20
 8007e5c:	f104 0e14 	add.w	lr, r4, #20
 8007e60:	f100 0b14 	add.w	fp, r0, #20
 8007e64:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e68:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	46d9      	mov	r9, fp
 8007e70:	f04f 0c00 	mov.w	ip, #0
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	fa1f f38a 	uxth.w	r3, sl
 8007e84:	4619      	mov	r1, r3
 8007e86:	b283      	uxth	r3, r0
 8007e88:	1acb      	subs	r3, r1, r3
 8007e8a:	0c00      	lsrs	r0, r0, #16
 8007e8c:	4463      	add	r3, ip
 8007e8e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e9c:	4576      	cmp	r6, lr
 8007e9e:	f849 3b04 	str.w	r3, [r9], #4
 8007ea2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ea6:	d8e5      	bhi.n	8007e74 <__mdiff+0x88>
 8007ea8:	1b33      	subs	r3, r6, r4
 8007eaa:	3b15      	subs	r3, #21
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	3415      	adds	r4, #21
 8007eb2:	3304      	adds	r3, #4
 8007eb4:	42a6      	cmp	r6, r4
 8007eb6:	bf38      	it	cc
 8007eb8:	2304      	movcc	r3, #4
 8007eba:	441d      	add	r5, r3
 8007ebc:	445b      	add	r3, fp
 8007ebe:	461e      	mov	r6, r3
 8007ec0:	462c      	mov	r4, r5
 8007ec2:	4544      	cmp	r4, r8
 8007ec4:	d30e      	bcc.n	8007ee4 <__mdiff+0xf8>
 8007ec6:	f108 0103 	add.w	r1, r8, #3
 8007eca:	1b49      	subs	r1, r1, r5
 8007ecc:	f021 0103 	bic.w	r1, r1, #3
 8007ed0:	3d03      	subs	r5, #3
 8007ed2:	45a8      	cmp	r8, r5
 8007ed4:	bf38      	it	cc
 8007ed6:	2100      	movcc	r1, #0
 8007ed8:	440b      	add	r3, r1
 8007eda:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ede:	b191      	cbz	r1, 8007f06 <__mdiff+0x11a>
 8007ee0:	6117      	str	r7, [r2, #16]
 8007ee2:	e79d      	b.n	8007e20 <__mdiff+0x34>
 8007ee4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ee8:	46e6      	mov	lr, ip
 8007eea:	0c08      	lsrs	r0, r1, #16
 8007eec:	fa1c fc81 	uxtah	ip, ip, r1
 8007ef0:	4471      	add	r1, lr
 8007ef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ef6:	b289      	uxth	r1, r1
 8007ef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007efc:	f846 1b04 	str.w	r1, [r6], #4
 8007f00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f04:	e7dd      	b.n	8007ec2 <__mdiff+0xd6>
 8007f06:	3f01      	subs	r7, #1
 8007f08:	e7e7      	b.n	8007eda <__mdiff+0xee>
 8007f0a:	bf00      	nop
 8007f0c:	080088f0 	.word	0x080088f0
 8007f10:	08008901 	.word	0x08008901

08007f14 <__d2b>:
 8007f14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f18:	460f      	mov	r7, r1
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	ec59 8b10 	vmov	r8, r9, d0
 8007f20:	4616      	mov	r6, r2
 8007f22:	f7ff fcd5 	bl	80078d0 <_Balloc>
 8007f26:	4604      	mov	r4, r0
 8007f28:	b930      	cbnz	r0, 8007f38 <__d2b+0x24>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	4b23      	ldr	r3, [pc, #140]	@ (8007fbc <__d2b+0xa8>)
 8007f2e:	4824      	ldr	r0, [pc, #144]	@ (8007fc0 <__d2b+0xac>)
 8007f30:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f34:	f000 fae6 	bl	8008504 <__assert_func>
 8007f38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f40:	b10d      	cbz	r5, 8007f46 <__d2b+0x32>
 8007f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f46:	9301      	str	r3, [sp, #4]
 8007f48:	f1b8 0300 	subs.w	r3, r8, #0
 8007f4c:	d023      	beq.n	8007f96 <__d2b+0x82>
 8007f4e:	4668      	mov	r0, sp
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	f7ff fd84 	bl	8007a5e <__lo0bits>
 8007f56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f5a:	b1d0      	cbz	r0, 8007f92 <__d2b+0x7e>
 8007f5c:	f1c0 0320 	rsb	r3, r0, #32
 8007f60:	fa02 f303 	lsl.w	r3, r2, r3
 8007f64:	430b      	orrs	r3, r1
 8007f66:	40c2      	lsrs	r2, r0
 8007f68:	6163      	str	r3, [r4, #20]
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9b01      	ldr	r3, [sp, #4]
 8007f6e:	61a3      	str	r3, [r4, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	bf0c      	ite	eq
 8007f74:	2201      	moveq	r2, #1
 8007f76:	2202      	movne	r2, #2
 8007f78:	6122      	str	r2, [r4, #16]
 8007f7a:	b1a5      	cbz	r5, 8007fa6 <__d2b+0x92>
 8007f7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f80:	4405      	add	r5, r0
 8007f82:	603d      	str	r5, [r7, #0]
 8007f84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f88:	6030      	str	r0, [r6, #0]
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	b003      	add	sp, #12
 8007f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f92:	6161      	str	r1, [r4, #20]
 8007f94:	e7ea      	b.n	8007f6c <__d2b+0x58>
 8007f96:	a801      	add	r0, sp, #4
 8007f98:	f7ff fd61 	bl	8007a5e <__lo0bits>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	6163      	str	r3, [r4, #20]
 8007fa0:	3020      	adds	r0, #32
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	e7e8      	b.n	8007f78 <__d2b+0x64>
 8007fa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007faa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fae:	6038      	str	r0, [r7, #0]
 8007fb0:	6918      	ldr	r0, [r3, #16]
 8007fb2:	f7ff fd35 	bl	8007a20 <__hi0bits>
 8007fb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fba:	e7e5      	b.n	8007f88 <__d2b+0x74>
 8007fbc:	080088f0 	.word	0x080088f0
 8007fc0:	08008901 	.word	0x08008901

08007fc4 <__sfputc_r>:
 8007fc4:	6893      	ldr	r3, [r2, #8]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	b410      	push	{r4}
 8007fcc:	6093      	str	r3, [r2, #8]
 8007fce:	da08      	bge.n	8007fe2 <__sfputc_r+0x1e>
 8007fd0:	6994      	ldr	r4, [r2, #24]
 8007fd2:	42a3      	cmp	r3, r4
 8007fd4:	db01      	blt.n	8007fda <__sfputc_r+0x16>
 8007fd6:	290a      	cmp	r1, #10
 8007fd8:	d103      	bne.n	8007fe2 <__sfputc_r+0x1e>
 8007fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fde:	f000 b9df 	b.w	80083a0 <__swbuf_r>
 8007fe2:	6813      	ldr	r3, [r2, #0]
 8007fe4:	1c58      	adds	r0, r3, #1
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	7019      	strb	r1, [r3, #0]
 8007fea:	4608      	mov	r0, r1
 8007fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff0:	4770      	bx	lr

08007ff2 <__sfputs_r>:
 8007ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff4:	4606      	mov	r6, r0
 8007ff6:	460f      	mov	r7, r1
 8007ff8:	4614      	mov	r4, r2
 8007ffa:	18d5      	adds	r5, r2, r3
 8007ffc:	42ac      	cmp	r4, r5
 8007ffe:	d101      	bne.n	8008004 <__sfputs_r+0x12>
 8008000:	2000      	movs	r0, #0
 8008002:	e007      	b.n	8008014 <__sfputs_r+0x22>
 8008004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008008:	463a      	mov	r2, r7
 800800a:	4630      	mov	r0, r6
 800800c:	f7ff ffda 	bl	8007fc4 <__sfputc_r>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d1f3      	bne.n	8007ffc <__sfputs_r+0xa>
 8008014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008018 <_vfiprintf_r>:
 8008018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801c:	460d      	mov	r5, r1
 800801e:	b09d      	sub	sp, #116	@ 0x74
 8008020:	4614      	mov	r4, r2
 8008022:	4698      	mov	r8, r3
 8008024:	4606      	mov	r6, r0
 8008026:	b118      	cbz	r0, 8008030 <_vfiprintf_r+0x18>
 8008028:	6a03      	ldr	r3, [r0, #32]
 800802a:	b90b      	cbnz	r3, 8008030 <_vfiprintf_r+0x18>
 800802c:	f7fe fbea 	bl	8006804 <__sinit>
 8008030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008032:	07d9      	lsls	r1, r3, #31
 8008034:	d405      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	059a      	lsls	r2, r3, #22
 800803a:	d402      	bmi.n	8008042 <_vfiprintf_r+0x2a>
 800803c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803e:	f7fe fcea 	bl	8006a16 <__retarget_lock_acquire_recursive>
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	071b      	lsls	r3, r3, #28
 8008046:	d501      	bpl.n	800804c <_vfiprintf_r+0x34>
 8008048:	692b      	ldr	r3, [r5, #16]
 800804a:	b99b      	cbnz	r3, 8008074 <_vfiprintf_r+0x5c>
 800804c:	4629      	mov	r1, r5
 800804e:	4630      	mov	r0, r6
 8008050:	f000 f9e4 	bl	800841c <__swsetup_r>
 8008054:	b170      	cbz	r0, 8008074 <_vfiprintf_r+0x5c>
 8008056:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008058:	07dc      	lsls	r4, r3, #31
 800805a:	d504      	bpl.n	8008066 <_vfiprintf_r+0x4e>
 800805c:	f04f 30ff 	mov.w	r0, #4294967295
 8008060:	b01d      	add	sp, #116	@ 0x74
 8008062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d4f7      	bmi.n	800805c <_vfiprintf_r+0x44>
 800806c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800806e:	f7fe fcd3 	bl	8006a18 <__retarget_lock_release_recursive>
 8008072:	e7f3      	b.n	800805c <_vfiprintf_r+0x44>
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	@ 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800807e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008082:	2330      	movs	r3, #48	@ 0x30
 8008084:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008234 <_vfiprintf_r+0x21c>
 8008088:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800808c:	f04f 0901 	mov.w	r9, #1
 8008090:	4623      	mov	r3, r4
 8008092:	469a      	mov	sl, r3
 8008094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008098:	b10a      	cbz	r2, 800809e <_vfiprintf_r+0x86>
 800809a:	2a25      	cmp	r2, #37	@ 0x25
 800809c:	d1f9      	bne.n	8008092 <_vfiprintf_r+0x7a>
 800809e:	ebba 0b04 	subs.w	fp, sl, r4
 80080a2:	d00b      	beq.n	80080bc <_vfiprintf_r+0xa4>
 80080a4:	465b      	mov	r3, fp
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ffa1 	bl	8007ff2 <__sfputs_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	f000 80a7 	beq.w	8008204 <_vfiprintf_r+0x1ec>
 80080b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b8:	445a      	add	r2, fp
 80080ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 809f 	beq.w	8008204 <_vfiprintf_r+0x1ec>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d0:	f10a 0a01 	add.w	sl, sl, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80080de:	4654      	mov	r4, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4853      	ldr	r0, [pc, #332]	@ (8008234 <_vfiprintf_r+0x21c>)
 80080e8:	f7f8 f87a 	bl	80001e0 <memchr>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	b9d8      	cbnz	r0, 8008128 <_vfiprintf_r+0x110>
 80080f0:	06d1      	lsls	r1, r2, #27
 80080f2:	bf44      	itt	mi
 80080f4:	2320      	movmi	r3, #32
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fa:	0713      	lsls	r3, r2, #28
 80080fc:	bf44      	itt	mi
 80080fe:	232b      	movmi	r3, #43	@ 0x2b
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b2a      	cmp	r3, #42	@ 0x2a
 800810a:	d015      	beq.n	8008138 <_vfiprintf_r+0x120>
 800810c:	9a07      	ldr	r2, [sp, #28]
 800810e:	4654      	mov	r4, sl
 8008110:	2000      	movs	r0, #0
 8008112:	f04f 0c0a 	mov.w	ip, #10
 8008116:	4621      	mov	r1, r4
 8008118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811c:	3b30      	subs	r3, #48	@ 0x30
 800811e:	2b09      	cmp	r3, #9
 8008120:	d94b      	bls.n	80081ba <_vfiprintf_r+0x1a2>
 8008122:	b1b0      	cbz	r0, 8008152 <_vfiprintf_r+0x13a>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	e014      	b.n	8008152 <_vfiprintf_r+0x13a>
 8008128:	eba0 0308 	sub.w	r3, r0, r8
 800812c:	fa09 f303 	lsl.w	r3, r9, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	46a2      	mov	sl, r4
 8008136:	e7d2      	b.n	80080de <_vfiprintf_r+0xc6>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfbb      	ittet	lt
 8008144:	425b      	neglt	r3, r3
 8008146:	f042 0202 	orrlt.w	r2, r2, #2
 800814a:	9307      	strge	r3, [sp, #28]
 800814c:	9307      	strlt	r3, [sp, #28]
 800814e:	bfb8      	it	lt
 8008150:	9204      	strlt	r2, [sp, #16]
 8008152:	7823      	ldrb	r3, [r4, #0]
 8008154:	2b2e      	cmp	r3, #46	@ 0x2e
 8008156:	d10a      	bne.n	800816e <_vfiprintf_r+0x156>
 8008158:	7863      	ldrb	r3, [r4, #1]
 800815a:	2b2a      	cmp	r3, #42	@ 0x2a
 800815c:	d132      	bne.n	80081c4 <_vfiprintf_r+0x1ac>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	1d1a      	adds	r2, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800816a:	3402      	adds	r4, #2
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008244 <_vfiprintf_r+0x22c>
 8008172:	7821      	ldrb	r1, [r4, #0]
 8008174:	2203      	movs	r2, #3
 8008176:	4650      	mov	r0, sl
 8008178:	f7f8 f832 	bl	80001e0 <memchr>
 800817c:	b138      	cbz	r0, 800818e <_vfiprintf_r+0x176>
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	eba0 000a 	sub.w	r0, r0, sl
 8008184:	2240      	movs	r2, #64	@ 0x40
 8008186:	4082      	lsls	r2, r0
 8008188:	4313      	orrs	r3, r2
 800818a:	3401      	adds	r4, #1
 800818c:	9304      	str	r3, [sp, #16]
 800818e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008192:	4829      	ldr	r0, [pc, #164]	@ (8008238 <_vfiprintf_r+0x220>)
 8008194:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008198:	2206      	movs	r2, #6
 800819a:	f7f8 f821 	bl	80001e0 <memchr>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d03f      	beq.n	8008222 <_vfiprintf_r+0x20a>
 80081a2:	4b26      	ldr	r3, [pc, #152]	@ (800823c <_vfiprintf_r+0x224>)
 80081a4:	bb1b      	cbnz	r3, 80081ee <_vfiprintf_r+0x1d6>
 80081a6:	9b03      	ldr	r3, [sp, #12]
 80081a8:	3307      	adds	r3, #7
 80081aa:	f023 0307 	bic.w	r3, r3, #7
 80081ae:	3308      	adds	r3, #8
 80081b0:	9303      	str	r3, [sp, #12]
 80081b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b4:	443b      	add	r3, r7
 80081b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b8:	e76a      	b.n	8008090 <_vfiprintf_r+0x78>
 80081ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80081be:	460c      	mov	r4, r1
 80081c0:	2001      	movs	r0, #1
 80081c2:	e7a8      	b.n	8008116 <_vfiprintf_r+0xfe>
 80081c4:	2300      	movs	r3, #0
 80081c6:	3401      	adds	r4, #1
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	4619      	mov	r1, r3
 80081cc:	f04f 0c0a 	mov.w	ip, #10
 80081d0:	4620      	mov	r0, r4
 80081d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d6:	3a30      	subs	r2, #48	@ 0x30
 80081d8:	2a09      	cmp	r2, #9
 80081da:	d903      	bls.n	80081e4 <_vfiprintf_r+0x1cc>
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0c6      	beq.n	800816e <_vfiprintf_r+0x156>
 80081e0:	9105      	str	r1, [sp, #20]
 80081e2:	e7c4      	b.n	800816e <_vfiprintf_r+0x156>
 80081e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e8:	4604      	mov	r4, r0
 80081ea:	2301      	movs	r3, #1
 80081ec:	e7f0      	b.n	80081d0 <_vfiprintf_r+0x1b8>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b12      	ldr	r3, [pc, #72]	@ (8008240 <_vfiprintf_r+0x228>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4630      	mov	r0, r6
 80081fa:	f7fd fec1 	bl	8005f80 <_printf_float>
 80081fe:	4607      	mov	r7, r0
 8008200:	1c78      	adds	r0, r7, #1
 8008202:	d1d6      	bne.n	80081b2 <_vfiprintf_r+0x19a>
 8008204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x1fe>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x1fe>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7fe fc01 	bl	8006a18 <__retarget_lock_release_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	065b      	lsls	r3, r3, #25
 800821a:	f53f af1f 	bmi.w	800805c <_vfiprintf_r+0x44>
 800821e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008220:	e71e      	b.n	8008060 <_vfiprintf_r+0x48>
 8008222:	ab03      	add	r3, sp, #12
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	462a      	mov	r2, r5
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <_vfiprintf_r+0x228>)
 800822a:	a904      	add	r1, sp, #16
 800822c:	4630      	mov	r0, r6
 800822e:	f7fe f93f 	bl	80064b0 <_printf_i>
 8008232:	e7e4      	b.n	80081fe <_vfiprintf_r+0x1e6>
 8008234:	0800895a 	.word	0x0800895a
 8008238:	08008964 	.word	0x08008964
 800823c:	08005f81 	.word	0x08005f81
 8008240:	08007ff3 	.word	0x08007ff3
 8008244:	08008960 	.word	0x08008960

08008248 <__sflush_r>:
 8008248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800824c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008250:	0716      	lsls	r6, r2, #28
 8008252:	4605      	mov	r5, r0
 8008254:	460c      	mov	r4, r1
 8008256:	d454      	bmi.n	8008302 <__sflush_r+0xba>
 8008258:	684b      	ldr	r3, [r1, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dc02      	bgt.n	8008264 <__sflush_r+0x1c>
 800825e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	dd48      	ble.n	80082f6 <__sflush_r+0xae>
 8008264:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008266:	2e00      	cmp	r6, #0
 8008268:	d045      	beq.n	80082f6 <__sflush_r+0xae>
 800826a:	2300      	movs	r3, #0
 800826c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008270:	682f      	ldr	r7, [r5, #0]
 8008272:	6a21      	ldr	r1, [r4, #32]
 8008274:	602b      	str	r3, [r5, #0]
 8008276:	d030      	beq.n	80082da <__sflush_r+0x92>
 8008278:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	0759      	lsls	r1, r3, #29
 800827e:	d505      	bpl.n	800828c <__sflush_r+0x44>
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	1ad2      	subs	r2, r2, r3
 8008284:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008286:	b10b      	cbz	r3, 800828c <__sflush_r+0x44>
 8008288:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800828a:	1ad2      	subs	r2, r2, r3
 800828c:	2300      	movs	r3, #0
 800828e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008290:	6a21      	ldr	r1, [r4, #32]
 8008292:	4628      	mov	r0, r5
 8008294:	47b0      	blx	r6
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	d106      	bne.n	80082aa <__sflush_r+0x62>
 800829c:	6829      	ldr	r1, [r5, #0]
 800829e:	291d      	cmp	r1, #29
 80082a0:	d82b      	bhi.n	80082fa <__sflush_r+0xb2>
 80082a2:	4a2a      	ldr	r2, [pc, #168]	@ (800834c <__sflush_r+0x104>)
 80082a4:	40ca      	lsrs	r2, r1
 80082a6:	07d6      	lsls	r6, r2, #31
 80082a8:	d527      	bpl.n	80082fa <__sflush_r+0xb2>
 80082aa:	2200      	movs	r2, #0
 80082ac:	6062      	str	r2, [r4, #4]
 80082ae:	04d9      	lsls	r1, r3, #19
 80082b0:	6922      	ldr	r2, [r4, #16]
 80082b2:	6022      	str	r2, [r4, #0]
 80082b4:	d504      	bpl.n	80082c0 <__sflush_r+0x78>
 80082b6:	1c42      	adds	r2, r0, #1
 80082b8:	d101      	bne.n	80082be <__sflush_r+0x76>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	b903      	cbnz	r3, 80082c0 <__sflush_r+0x78>
 80082be:	6560      	str	r0, [r4, #84]	@ 0x54
 80082c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082c2:	602f      	str	r7, [r5, #0]
 80082c4:	b1b9      	cbz	r1, 80082f6 <__sflush_r+0xae>
 80082c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ca:	4299      	cmp	r1, r3
 80082cc:	d002      	beq.n	80082d4 <__sflush_r+0x8c>
 80082ce:	4628      	mov	r0, r5
 80082d0:	f7ff f9fe 	bl	80076d0 <_free_r>
 80082d4:	2300      	movs	r3, #0
 80082d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80082d8:	e00d      	b.n	80082f6 <__sflush_r+0xae>
 80082da:	2301      	movs	r3, #1
 80082dc:	4628      	mov	r0, r5
 80082de:	47b0      	blx	r6
 80082e0:	4602      	mov	r2, r0
 80082e2:	1c50      	adds	r0, r2, #1
 80082e4:	d1c9      	bne.n	800827a <__sflush_r+0x32>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0c6      	beq.n	800827a <__sflush_r+0x32>
 80082ec:	2b1d      	cmp	r3, #29
 80082ee:	d001      	beq.n	80082f4 <__sflush_r+0xac>
 80082f0:	2b16      	cmp	r3, #22
 80082f2:	d11e      	bne.n	8008332 <__sflush_r+0xea>
 80082f4:	602f      	str	r7, [r5, #0]
 80082f6:	2000      	movs	r0, #0
 80082f8:	e022      	b.n	8008340 <__sflush_r+0xf8>
 80082fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082fe:	b21b      	sxth	r3, r3
 8008300:	e01b      	b.n	800833a <__sflush_r+0xf2>
 8008302:	690f      	ldr	r7, [r1, #16]
 8008304:	2f00      	cmp	r7, #0
 8008306:	d0f6      	beq.n	80082f6 <__sflush_r+0xae>
 8008308:	0793      	lsls	r3, r2, #30
 800830a:	680e      	ldr	r6, [r1, #0]
 800830c:	bf08      	it	eq
 800830e:	694b      	ldreq	r3, [r1, #20]
 8008310:	600f      	str	r7, [r1, #0]
 8008312:	bf18      	it	ne
 8008314:	2300      	movne	r3, #0
 8008316:	eba6 0807 	sub.w	r8, r6, r7
 800831a:	608b      	str	r3, [r1, #8]
 800831c:	f1b8 0f00 	cmp.w	r8, #0
 8008320:	dde9      	ble.n	80082f6 <__sflush_r+0xae>
 8008322:	6a21      	ldr	r1, [r4, #32]
 8008324:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008326:	4643      	mov	r3, r8
 8008328:	463a      	mov	r2, r7
 800832a:	4628      	mov	r0, r5
 800832c:	47b0      	blx	r6
 800832e:	2800      	cmp	r0, #0
 8008330:	dc08      	bgt.n	8008344 <__sflush_r+0xfc>
 8008332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	f04f 30ff 	mov.w	r0, #4294967295
 8008340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008344:	4407      	add	r7, r0
 8008346:	eba8 0800 	sub.w	r8, r8, r0
 800834a:	e7e7      	b.n	800831c <__sflush_r+0xd4>
 800834c:	20400001 	.word	0x20400001

08008350 <_fflush_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	4605      	mov	r5, r0
 8008356:	460c      	mov	r4, r1
 8008358:	b913      	cbnz	r3, 8008360 <_fflush_r+0x10>
 800835a:	2500      	movs	r5, #0
 800835c:	4628      	mov	r0, r5
 800835e:	bd38      	pop	{r3, r4, r5, pc}
 8008360:	b118      	cbz	r0, 800836a <_fflush_r+0x1a>
 8008362:	6a03      	ldr	r3, [r0, #32]
 8008364:	b90b      	cbnz	r3, 800836a <_fflush_r+0x1a>
 8008366:	f7fe fa4d 	bl	8006804 <__sinit>
 800836a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f3      	beq.n	800835a <_fflush_r+0xa>
 8008372:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008374:	07d0      	lsls	r0, r2, #31
 8008376:	d404      	bmi.n	8008382 <_fflush_r+0x32>
 8008378:	0599      	lsls	r1, r3, #22
 800837a:	d402      	bmi.n	8008382 <_fflush_r+0x32>
 800837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837e:	f7fe fb4a 	bl	8006a16 <__retarget_lock_acquire_recursive>
 8008382:	4628      	mov	r0, r5
 8008384:	4621      	mov	r1, r4
 8008386:	f7ff ff5f 	bl	8008248 <__sflush_r>
 800838a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800838c:	07da      	lsls	r2, r3, #31
 800838e:	4605      	mov	r5, r0
 8008390:	d4e4      	bmi.n	800835c <_fflush_r+0xc>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	059b      	lsls	r3, r3, #22
 8008396:	d4e1      	bmi.n	800835c <_fflush_r+0xc>
 8008398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800839a:	f7fe fb3d 	bl	8006a18 <__retarget_lock_release_recursive>
 800839e:	e7dd      	b.n	800835c <_fflush_r+0xc>

080083a0 <__swbuf_r>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	460e      	mov	r6, r1
 80083a4:	4614      	mov	r4, r2
 80083a6:	4605      	mov	r5, r0
 80083a8:	b118      	cbz	r0, 80083b2 <__swbuf_r+0x12>
 80083aa:	6a03      	ldr	r3, [r0, #32]
 80083ac:	b90b      	cbnz	r3, 80083b2 <__swbuf_r+0x12>
 80083ae:	f7fe fa29 	bl	8006804 <__sinit>
 80083b2:	69a3      	ldr	r3, [r4, #24]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	89a3      	ldrh	r3, [r4, #12]
 80083b8:	071a      	lsls	r2, r3, #28
 80083ba:	d501      	bpl.n	80083c0 <__swbuf_r+0x20>
 80083bc:	6923      	ldr	r3, [r4, #16]
 80083be:	b943      	cbnz	r3, 80083d2 <__swbuf_r+0x32>
 80083c0:	4621      	mov	r1, r4
 80083c2:	4628      	mov	r0, r5
 80083c4:	f000 f82a 	bl	800841c <__swsetup_r>
 80083c8:	b118      	cbz	r0, 80083d2 <__swbuf_r+0x32>
 80083ca:	f04f 37ff 	mov.w	r7, #4294967295
 80083ce:	4638      	mov	r0, r7
 80083d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	6922      	ldr	r2, [r4, #16]
 80083d6:	1a98      	subs	r0, r3, r2
 80083d8:	6963      	ldr	r3, [r4, #20]
 80083da:	b2f6      	uxtb	r6, r6
 80083dc:	4283      	cmp	r3, r0
 80083de:	4637      	mov	r7, r6
 80083e0:	dc05      	bgt.n	80083ee <__swbuf_r+0x4e>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f7ff ffb3 	bl	8008350 <_fflush_r>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d1ed      	bne.n	80083ca <__swbuf_r+0x2a>
 80083ee:	68a3      	ldr	r3, [r4, #8]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	60a3      	str	r3, [r4, #8]
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	6022      	str	r2, [r4, #0]
 80083fa:	701e      	strb	r6, [r3, #0]
 80083fc:	6962      	ldr	r2, [r4, #20]
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	429a      	cmp	r2, r3
 8008402:	d004      	beq.n	800840e <__swbuf_r+0x6e>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	07db      	lsls	r3, r3, #31
 8008408:	d5e1      	bpl.n	80083ce <__swbuf_r+0x2e>
 800840a:	2e0a      	cmp	r6, #10
 800840c:	d1df      	bne.n	80083ce <__swbuf_r+0x2e>
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f7ff ff9d 	bl	8008350 <_fflush_r>
 8008416:	2800      	cmp	r0, #0
 8008418:	d0d9      	beq.n	80083ce <__swbuf_r+0x2e>
 800841a:	e7d6      	b.n	80083ca <__swbuf_r+0x2a>

0800841c <__swsetup_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4b29      	ldr	r3, [pc, #164]	@ (80084c4 <__swsetup_r+0xa8>)
 8008420:	4605      	mov	r5, r0
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	460c      	mov	r4, r1
 8008426:	b118      	cbz	r0, 8008430 <__swsetup_r+0x14>
 8008428:	6a03      	ldr	r3, [r0, #32]
 800842a:	b90b      	cbnz	r3, 8008430 <__swsetup_r+0x14>
 800842c:	f7fe f9ea 	bl	8006804 <__sinit>
 8008430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008434:	0719      	lsls	r1, r3, #28
 8008436:	d422      	bmi.n	800847e <__swsetup_r+0x62>
 8008438:	06da      	lsls	r2, r3, #27
 800843a:	d407      	bmi.n	800844c <__swsetup_r+0x30>
 800843c:	2209      	movs	r2, #9
 800843e:	602a      	str	r2, [r5, #0]
 8008440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	f04f 30ff 	mov.w	r0, #4294967295
 800844a:	e033      	b.n	80084b4 <__swsetup_r+0x98>
 800844c:	0758      	lsls	r0, r3, #29
 800844e:	d512      	bpl.n	8008476 <__swsetup_r+0x5a>
 8008450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008452:	b141      	cbz	r1, 8008466 <__swsetup_r+0x4a>
 8008454:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008458:	4299      	cmp	r1, r3
 800845a:	d002      	beq.n	8008462 <__swsetup_r+0x46>
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff f937 	bl	80076d0 <_free_r>
 8008462:	2300      	movs	r3, #0
 8008464:	6363      	str	r3, [r4, #52]	@ 0x34
 8008466:	89a3      	ldrh	r3, [r4, #12]
 8008468:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800846c:	81a3      	strh	r3, [r4, #12]
 800846e:	2300      	movs	r3, #0
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	f043 0308 	orr.w	r3, r3, #8
 800847c:	81a3      	strh	r3, [r4, #12]
 800847e:	6923      	ldr	r3, [r4, #16]
 8008480:	b94b      	cbnz	r3, 8008496 <__swsetup_r+0x7a>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800848c:	d003      	beq.n	8008496 <__swsetup_r+0x7a>
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f000 f8c1 	bl	8008618 <__smakebuf_r>
 8008496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849a:	f013 0201 	ands.w	r2, r3, #1
 800849e:	d00a      	beq.n	80084b6 <__swsetup_r+0x9a>
 80084a0:	2200      	movs	r2, #0
 80084a2:	60a2      	str	r2, [r4, #8]
 80084a4:	6962      	ldr	r2, [r4, #20]
 80084a6:	4252      	negs	r2, r2
 80084a8:	61a2      	str	r2, [r4, #24]
 80084aa:	6922      	ldr	r2, [r4, #16]
 80084ac:	b942      	cbnz	r2, 80084c0 <__swsetup_r+0xa4>
 80084ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084b2:	d1c5      	bne.n	8008440 <__swsetup_r+0x24>
 80084b4:	bd38      	pop	{r3, r4, r5, pc}
 80084b6:	0799      	lsls	r1, r3, #30
 80084b8:	bf58      	it	pl
 80084ba:	6962      	ldrpl	r2, [r4, #20]
 80084bc:	60a2      	str	r2, [r4, #8]
 80084be:	e7f4      	b.n	80084aa <__swsetup_r+0x8e>
 80084c0:	2000      	movs	r0, #0
 80084c2:	e7f7      	b.n	80084b4 <__swsetup_r+0x98>
 80084c4:	20000020 	.word	0x20000020

080084c8 <_sbrk_r>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	4d06      	ldr	r5, [pc, #24]	@ (80084e4 <_sbrk_r+0x1c>)
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	4608      	mov	r0, r1
 80084d2:	602b      	str	r3, [r5, #0]
 80084d4:	f7fa fe60 	bl	8003198 <_sbrk>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_sbrk_r+0x1a>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_sbrk_r+0x1a>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000464 	.word	0x20000464

080084e8 <memcpy>:
 80084e8:	440a      	add	r2, r1
 80084ea:	4291      	cmp	r1, r2
 80084ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80084f0:	d100      	bne.n	80084f4 <memcpy+0xc>
 80084f2:	4770      	bx	lr
 80084f4:	b510      	push	{r4, lr}
 80084f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084fe:	4291      	cmp	r1, r2
 8008500:	d1f9      	bne.n	80084f6 <memcpy+0xe>
 8008502:	bd10      	pop	{r4, pc}

08008504 <__assert_func>:
 8008504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008506:	4614      	mov	r4, r2
 8008508:	461a      	mov	r2, r3
 800850a:	4b09      	ldr	r3, [pc, #36]	@ (8008530 <__assert_func+0x2c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4605      	mov	r5, r0
 8008510:	68d8      	ldr	r0, [r3, #12]
 8008512:	b14c      	cbz	r4, 8008528 <__assert_func+0x24>
 8008514:	4b07      	ldr	r3, [pc, #28]	@ (8008534 <__assert_func+0x30>)
 8008516:	9100      	str	r1, [sp, #0]
 8008518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800851c:	4906      	ldr	r1, [pc, #24]	@ (8008538 <__assert_func+0x34>)
 800851e:	462b      	mov	r3, r5
 8008520:	f000 f842 	bl	80085a8 <fiprintf>
 8008524:	f000 f8d6 	bl	80086d4 <abort>
 8008528:	4b04      	ldr	r3, [pc, #16]	@ (800853c <__assert_func+0x38>)
 800852a:	461c      	mov	r4, r3
 800852c:	e7f3      	b.n	8008516 <__assert_func+0x12>
 800852e:	bf00      	nop
 8008530:	20000020 	.word	0x20000020
 8008534:	08008975 	.word	0x08008975
 8008538:	08008982 	.word	0x08008982
 800853c:	080089b0 	.word	0x080089b0

08008540 <_calloc_r>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	fba1 5402 	umull	r5, r4, r1, r2
 8008546:	b934      	cbnz	r4, 8008556 <_calloc_r+0x16>
 8008548:	4629      	mov	r1, r5
 800854a:	f7ff f935 	bl	80077b8 <_malloc_r>
 800854e:	4606      	mov	r6, r0
 8008550:	b928      	cbnz	r0, 800855e <_calloc_r+0x1e>
 8008552:	4630      	mov	r0, r6
 8008554:	bd70      	pop	{r4, r5, r6, pc}
 8008556:	220c      	movs	r2, #12
 8008558:	6002      	str	r2, [r0, #0]
 800855a:	2600      	movs	r6, #0
 800855c:	e7f9      	b.n	8008552 <_calloc_r+0x12>
 800855e:	462a      	mov	r2, r5
 8008560:	4621      	mov	r1, r4
 8008562:	f7fe f9da 	bl	800691a <memset>
 8008566:	e7f4      	b.n	8008552 <_calloc_r+0x12>

08008568 <__ascii_mbtowc>:
 8008568:	b082      	sub	sp, #8
 800856a:	b901      	cbnz	r1, 800856e <__ascii_mbtowc+0x6>
 800856c:	a901      	add	r1, sp, #4
 800856e:	b142      	cbz	r2, 8008582 <__ascii_mbtowc+0x1a>
 8008570:	b14b      	cbz	r3, 8008586 <__ascii_mbtowc+0x1e>
 8008572:	7813      	ldrb	r3, [r2, #0]
 8008574:	600b      	str	r3, [r1, #0]
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	1e10      	subs	r0, r2, #0
 800857a:	bf18      	it	ne
 800857c:	2001      	movne	r0, #1
 800857e:	b002      	add	sp, #8
 8008580:	4770      	bx	lr
 8008582:	4610      	mov	r0, r2
 8008584:	e7fb      	b.n	800857e <__ascii_mbtowc+0x16>
 8008586:	f06f 0001 	mvn.w	r0, #1
 800858a:	e7f8      	b.n	800857e <__ascii_mbtowc+0x16>

0800858c <__ascii_wctomb>:
 800858c:	4603      	mov	r3, r0
 800858e:	4608      	mov	r0, r1
 8008590:	b141      	cbz	r1, 80085a4 <__ascii_wctomb+0x18>
 8008592:	2aff      	cmp	r2, #255	@ 0xff
 8008594:	d904      	bls.n	80085a0 <__ascii_wctomb+0x14>
 8008596:	228a      	movs	r2, #138	@ 0x8a
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	f04f 30ff 	mov.w	r0, #4294967295
 800859e:	4770      	bx	lr
 80085a0:	700a      	strb	r2, [r1, #0]
 80085a2:	2001      	movs	r0, #1
 80085a4:	4770      	bx	lr
	...

080085a8 <fiprintf>:
 80085a8:	b40e      	push	{r1, r2, r3}
 80085aa:	b503      	push	{r0, r1, lr}
 80085ac:	4601      	mov	r1, r0
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	4805      	ldr	r0, [pc, #20]	@ (80085c8 <fiprintf+0x20>)
 80085b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b6:	6800      	ldr	r0, [r0, #0]
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	f7ff fd2d 	bl	8008018 <_vfiprintf_r>
 80085be:	b002      	add	sp, #8
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b003      	add	sp, #12
 80085c6:	4770      	bx	lr
 80085c8:	20000020 	.word	0x20000020

080085cc <__swhatbuf_r>:
 80085cc:	b570      	push	{r4, r5, r6, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	2900      	cmp	r1, #0
 80085d6:	b096      	sub	sp, #88	@ 0x58
 80085d8:	4615      	mov	r5, r2
 80085da:	461e      	mov	r6, r3
 80085dc:	da0d      	bge.n	80085fa <__swhatbuf_r+0x2e>
 80085de:	89a3      	ldrh	r3, [r4, #12]
 80085e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085e4:	f04f 0100 	mov.w	r1, #0
 80085e8:	bf14      	ite	ne
 80085ea:	2340      	movne	r3, #64	@ 0x40
 80085ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80085f0:	2000      	movs	r0, #0
 80085f2:	6031      	str	r1, [r6, #0]
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	b016      	add	sp, #88	@ 0x58
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	466a      	mov	r2, sp
 80085fc:	f000 f848 	bl	8008690 <_fstat_r>
 8008600:	2800      	cmp	r0, #0
 8008602:	dbec      	blt.n	80085de <__swhatbuf_r+0x12>
 8008604:	9901      	ldr	r1, [sp, #4]
 8008606:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800860a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800860e:	4259      	negs	r1, r3
 8008610:	4159      	adcs	r1, r3
 8008612:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008616:	e7eb      	b.n	80085f0 <__swhatbuf_r+0x24>

08008618 <__smakebuf_r>:
 8008618:	898b      	ldrh	r3, [r1, #12]
 800861a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800861c:	079d      	lsls	r5, r3, #30
 800861e:	4606      	mov	r6, r0
 8008620:	460c      	mov	r4, r1
 8008622:	d507      	bpl.n	8008634 <__smakebuf_r+0x1c>
 8008624:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	6123      	str	r3, [r4, #16]
 800862c:	2301      	movs	r3, #1
 800862e:	6163      	str	r3, [r4, #20]
 8008630:	b003      	add	sp, #12
 8008632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008634:	ab01      	add	r3, sp, #4
 8008636:	466a      	mov	r2, sp
 8008638:	f7ff ffc8 	bl	80085cc <__swhatbuf_r>
 800863c:	9f00      	ldr	r7, [sp, #0]
 800863e:	4605      	mov	r5, r0
 8008640:	4639      	mov	r1, r7
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff f8b8 	bl	80077b8 <_malloc_r>
 8008648:	b948      	cbnz	r0, 800865e <__smakebuf_r+0x46>
 800864a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864e:	059a      	lsls	r2, r3, #22
 8008650:	d4ee      	bmi.n	8008630 <__smakebuf_r+0x18>
 8008652:	f023 0303 	bic.w	r3, r3, #3
 8008656:	f043 0302 	orr.w	r3, r3, #2
 800865a:	81a3      	strh	r3, [r4, #12]
 800865c:	e7e2      	b.n	8008624 <__smakebuf_r+0xc>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	6020      	str	r0, [r4, #0]
 8008662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	9b01      	ldr	r3, [sp, #4]
 800866a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800866e:	b15b      	cbz	r3, 8008688 <__smakebuf_r+0x70>
 8008670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008674:	4630      	mov	r0, r6
 8008676:	f000 f81d 	bl	80086b4 <_isatty_r>
 800867a:	b128      	cbz	r0, 8008688 <__smakebuf_r+0x70>
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	f043 0301 	orr.w	r3, r3, #1
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	431d      	orrs	r5, r3
 800868c:	81a5      	strh	r5, [r4, #12]
 800868e:	e7cf      	b.n	8008630 <__smakebuf_r+0x18>

08008690 <_fstat_r>:
 8008690:	b538      	push	{r3, r4, r5, lr}
 8008692:	4d07      	ldr	r5, [pc, #28]	@ (80086b0 <_fstat_r+0x20>)
 8008694:	2300      	movs	r3, #0
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	4611      	mov	r1, r2
 800869c:	602b      	str	r3, [r5, #0]
 800869e:	f7fa fd52 	bl	8003146 <_fstat>
 80086a2:	1c43      	adds	r3, r0, #1
 80086a4:	d102      	bne.n	80086ac <_fstat_r+0x1c>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	b103      	cbz	r3, 80086ac <_fstat_r+0x1c>
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	20000464 	.word	0x20000464

080086b4 <_isatty_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	@ (80086d0 <_isatty_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7fa fd51 	bl	8003166 <_isatty>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_isatty_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_isatty_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20000464 	.word	0x20000464

080086d4 <abort>:
 80086d4:	b508      	push	{r3, lr}
 80086d6:	2006      	movs	r0, #6
 80086d8:	f000 f82c 	bl	8008734 <raise>
 80086dc:	2001      	movs	r0, #1
 80086de:	f7fa fce2 	bl	80030a6 <_exit>

080086e2 <_raise_r>:
 80086e2:	291f      	cmp	r1, #31
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4605      	mov	r5, r0
 80086e8:	460c      	mov	r4, r1
 80086ea:	d904      	bls.n	80086f6 <_raise_r+0x14>
 80086ec:	2316      	movs	r3, #22
 80086ee:	6003      	str	r3, [r0, #0]
 80086f0:	f04f 30ff 	mov.w	r0, #4294967295
 80086f4:	bd38      	pop	{r3, r4, r5, pc}
 80086f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086f8:	b112      	cbz	r2, 8008700 <_raise_r+0x1e>
 80086fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086fe:	b94b      	cbnz	r3, 8008714 <_raise_r+0x32>
 8008700:	4628      	mov	r0, r5
 8008702:	f000 f831 	bl	8008768 <_getpid_r>
 8008706:	4622      	mov	r2, r4
 8008708:	4601      	mov	r1, r0
 800870a:	4628      	mov	r0, r5
 800870c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008710:	f000 b818 	b.w	8008744 <_kill_r>
 8008714:	2b01      	cmp	r3, #1
 8008716:	d00a      	beq.n	800872e <_raise_r+0x4c>
 8008718:	1c59      	adds	r1, r3, #1
 800871a:	d103      	bne.n	8008724 <_raise_r+0x42>
 800871c:	2316      	movs	r3, #22
 800871e:	6003      	str	r3, [r0, #0]
 8008720:	2001      	movs	r0, #1
 8008722:	e7e7      	b.n	80086f4 <_raise_r+0x12>
 8008724:	2100      	movs	r1, #0
 8008726:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800872a:	4620      	mov	r0, r4
 800872c:	4798      	blx	r3
 800872e:	2000      	movs	r0, #0
 8008730:	e7e0      	b.n	80086f4 <_raise_r+0x12>
	...

08008734 <raise>:
 8008734:	4b02      	ldr	r3, [pc, #8]	@ (8008740 <raise+0xc>)
 8008736:	4601      	mov	r1, r0
 8008738:	6818      	ldr	r0, [r3, #0]
 800873a:	f7ff bfd2 	b.w	80086e2 <_raise_r>
 800873e:	bf00      	nop
 8008740:	20000020 	.word	0x20000020

08008744 <_kill_r>:
 8008744:	b538      	push	{r3, r4, r5, lr}
 8008746:	4d07      	ldr	r5, [pc, #28]	@ (8008764 <_kill_r+0x20>)
 8008748:	2300      	movs	r3, #0
 800874a:	4604      	mov	r4, r0
 800874c:	4608      	mov	r0, r1
 800874e:	4611      	mov	r1, r2
 8008750:	602b      	str	r3, [r5, #0]
 8008752:	f7fa fc98 	bl	8003086 <_kill>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d102      	bne.n	8008760 <_kill_r+0x1c>
 800875a:	682b      	ldr	r3, [r5, #0]
 800875c:	b103      	cbz	r3, 8008760 <_kill_r+0x1c>
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	bf00      	nop
 8008764:	20000464 	.word	0x20000464

08008768 <_getpid_r>:
 8008768:	f7fa bc85 	b.w	8003076 <_getpid>

0800876c <_init>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr

08008778 <_fini>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	bf00      	nop
 800877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877e:	bc08      	pop	{r3}
 8008780:	469e      	mov	lr, r3
 8008782:	4770      	bx	lr
